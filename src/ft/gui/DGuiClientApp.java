/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ft.gui;

import ft.mod.DModConsts;
import ft.mod.DModModuleCfg;
import ft.mod.DModModuleMfg;
import ft.mod.DModSysConsts;
import ft.mod.DModUtils;
import ft.mod.cfg.db.DDbConfig;
import ft.mod.cfg.db.DDbUser;
import ft.mod.cfg.db.DDbUserGui;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Date;
import java.util.HashMap;
import java.util.TimeZone;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JToggleButton;
import javax.swing.UIManager;
import sba.gui.util.DUtilConfigXml;
import sba.gui.util.DUtilConsts;
import sba.gui.util.DUtilLoginDlg;
import sba.gui.util.DUtilPasswordDlg;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbConsts;
import sba.lib.db.DDbDatabase;
import sba.lib.db.DDbDatabaseMonitor;
import sba.lib.grid.DGridPaneView;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiDatePicker;
import sba.lib.gui.DGuiDateRangePicker;
import sba.lib.gui.DGuiSession;
import sba.lib.gui.DGuiUserGui;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiYearMonthPicker;
import sba.lib.gui.DGuiYearPicker;
import sba.lib.gui.bean.DBeanDialogReport;
import sba.lib.gui.bean.DBeanForm;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.lib.gui.bean.DBeanFormProcess;
import sba.lib.gui.bean.DBeanOptionPicker;
import sba.lib.img.DImgConsts;
import sba.lib.xml.DXmlUtils;

/**
 *
 * @author Sergio Flores
 */
public class DGuiClientApp extends JFrame implements DGuiClient, ActionListener  {

    public static final String APP_NAME = "FoodTrace 1.0";
    public static final String APP_RELEASE = "FoodTrace 1.0 003.01";
    public static final String APP_COPYRIGHT = "Copyright Â© FoodTrace SA de CV";
    public static final String APP_PROVIDER = "http://www.foodtrace.com";
    
    private boolean mbFirstActivation;
    private boolean mbLoggedIn;
    private DGuiSession moSession;
    private DUtilConfigXml moConfigXml;
    private DDbDatabase moSysDatabase;
    private DDbDatabaseMonitor moSysDatabaseMonitor;
    private Statement miSysStatement;
    private String msCompany;

    private DGuiDatePicker moDatePicker;
    private DGuiDateRangePicker moDateRangePicker;
    private DGuiYearPicker moYearPicker;
    private DGuiYearMonthPicker moYearMonthPicker;
    private JFileChooser moFileChooser;
    private ImageIcon moIcon;
    private ImageIcon moIconGuiClose;
    private ImageIcon moIconGuiCloseIna;
    private ImageIcon moIconGuiCloseBri;
    private ImageIcon moIconGuiCloseDar;
    private ImageIcon moIconCmdStdOk;
    private ImageIcon moIconCmdStdDelete;
    private ImageIcon moIconCmdStdDisable;
    private ImageIcon moIconCmdStdPrint;
    private ImageIcon moIconCmdStdCardex;
    private ImageIcon moIconCmdStdView;
    private ImageIcon moIconCmdStdDate;
    private ImageIcon moIconCmdStdClear;
    private ImageIcon moIconCmdStdAdd;
    private ImageIcon moIconCmdStdSubtract;
    private ImageIcon moIconCmdStdLot;
    private ImageIcon moIconCmdStdSerialNumber;
    private ImageIcon moIconCmdStdAdjustmentDiscount;
    private ImageIcon moIconCmdStdAdjustmentReturn;
    private ImageIcon moIconCmdStdAdjustmentDocument;
    private ImageIcon moIconCmdStdAdjustmentLot;
    private ImageIcon moIconCmdStdAdjustmentSerialNumber;
    private ImageIcon moIconCmdStdNote;
    private ImageIcon moIconCmdStdSign;
    private ImageIcon moIconCmdStdSend;
    private ImageIcon moIconCmdStdExport;
    private ImageIcon moIconCmdStdImport;
    
    /**
     * Creates new form DGuiClientApp
     */
    public DGuiClientApp() {
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtpWorkingArea = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jpStatus = new javax.swing.JPanel();
        jtfSystemDate = new javax.swing.JTextField();
        jtfWorkingDate = new javax.swing.JTextField();
        jbWorkingDate = new javax.swing.JButton();
        jtfUser = new javax.swing.JTextField();
        jtfUserTs = new javax.swing.JTextField();
        jlAppRelease = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmFile = new javax.swing.JMenu();
        jmiFileWorkingDate = new javax.swing.JMenuItem();
        jmiFileUserPassword = new javax.swing.JMenuItem();
        jsFile1 = new javax.swing.JPopupMenu.Separator();
        jmiFileCloseViewsAll = new javax.swing.JMenuItem();
        jmiFileCloseViewsOther = new javax.swing.JMenuItem();
        jsFile2 = new javax.swing.JPopupMenu.Separator();
        jmiFileCloseSession = new javax.swing.JMenuItem();
        jsFile3 = new javax.swing.JPopupMenu.Separator();
        jmiFileExit = new javax.swing.JMenuItem();
        jmCfg = new javax.swing.JMenu();
        jmiCfgLine = new javax.swing.JMenuItem();
        jmiCfgDepart = new javax.swing.JMenuItem();
        jsCfg = new javax.swing.JPopupMenu.Separator();
        jmiCfgWarehouse = new javax.swing.JMenuItem();
        jmiCfgCompany = new javax.swing.JMenuItem();
        jsCfg2 = new javax.swing.JPopupMenu.Separator();
        jmiCfgYear = new javax.swing.JMenuItem();
        jsCfg3 = new javax.swing.JPopupMenu.Separator();
        jmiCfgUser = new javax.swing.JMenuItem();
        jmiCfgUserModule = new javax.swing.JMenuItem();
        jsCfg4 = new javax.swing.JPopupMenu.Separator();
        jmiCfgConfig = new javax.swing.JMenuItem();
        jmCat = new javax.swing.JMenu();
        jmiCatItemPf = new javax.swing.JMenuItem();
        jmiCatItemPb = new javax.swing.JMenuItem();
        jmiCatItemP = new javax.swing.JMenuItem();
        jsCat1 = new javax.swing.JPopupMenu.Separator();
        jmiCatItemBp = new javax.swing.JMenuItem();
        jmiCatItemSc = new javax.swing.JMenuItem();
        jsCat2 = new javax.swing.JPopupMenu.Separator();
        jmiCatItemRmi = new javax.swing.JMenuItem();
        jmiCatItemRmp = new javax.swing.JMenuItem();
        jmiCatItemMi = new javax.swing.JMenuItem();
        jsCat3 = new javax.swing.JPopupMenu.Separator();
        jmiCatItemMo = new javax.swing.JMenuItem();
        jsCat4 = new javax.swing.JPopupMenu.Separator();
        jmiCatFamily = new javax.swing.JMenuItem();
        jmiCatUnit = new javax.swing.JMenuItem();
        jmiCatPresent = new javax.swing.JMenuItem();
        jsCat5 = new javax.swing.JPopupMenu.Separator();
        jmiCatBizPartnerCus = new javax.swing.JMenuItem();
        jmiCatBizPartnerSup = new javax.swing.JMenuItem();
        jmMfg = new javax.swing.JMenu();
        jmiMfgJob = new javax.swing.JMenuItem();
        jsMfg1 = new javax.swing.JPopupMenu.Separator();
        jmiMfgFormula = new javax.swing.JMenuItem();
        jmiMfgFormulaComp = new javax.swing.JMenuItem();
        jmiMfgFormulaByproduct = new javax.swing.JMenuItem();
        jsMfg2 = new javax.swing.JPopupMenu.Separator();
        jmiMfgVariable = new javax.swing.JMenuItem();
        jmQty = new javax.swing.JMenu();
        jmiQtyTestApp = new javax.swing.JMenuItem();
        jmiQtyTestAppResult = new javax.swing.JMenuItem();
        jsQty1 = new javax.swing.JPopupMenu.Separator();
        jmiQtyTest = new javax.swing.JMenuItem();
        jmiQtyParam = new javax.swing.JMenuItem();
        jmInv = new javax.swing.JMenu();
        jmiInvWsm = new javax.swing.JMenuItem();
        jmiInvWsmRow = new javax.swing.JMenuItem();
        jsInv1 = new javax.swing.JPopupMenu.Separator();
        jmiInvStock = new javax.swing.JMenuItem();
        jmiInvStockLot = new javax.swing.JMenuItem();
        jmRep = new javax.swing.JMenu();
        jmHelp = new javax.swing.JMenu();
        jmiHelpHelp = new javax.swing.JMenuItem();
        jsHlp1 = new javax.swing.JPopupMenu.Separator();
        jmiHelpAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().add(jtpWorkingArea, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jpStatus.setBackground(java.awt.Color.black);
        jpStatus.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 3));

        jtfSystemDate.setEditable(false);
        jtfSystemDate.setForeground(java.awt.Color.white);
        jtfSystemDate.setText("01/01/2000");
        jtfSystemDate.setToolTipText("Fecha de sistema");
        jtfSystemDate.setFocusable(false);
        jtfSystemDate.setOpaque(false);
        jtfSystemDate.setPreferredSize(new java.awt.Dimension(65, 20));
        jpStatus.add(jtfSystemDate);

        jtfWorkingDate.setEditable(false);
        jtfWorkingDate.setForeground(java.awt.Color.white);
        jtfWorkingDate.setText("01/01/2000");
        jtfWorkingDate.setToolTipText("Fecha de trabajo");
        jtfWorkingDate.setFocusable(false);
        jtfWorkingDate.setOpaque(false);
        jtfWorkingDate.setPreferredSize(new java.awt.Dimension(65, 20));
        jpStatus.add(jtfWorkingDate);

        jbWorkingDate.setText("...");
        jbWorkingDate.setToolTipText("Cambiar fecha de trabajo");
        jbWorkingDate.setOpaque(false);
        jbWorkingDate.setPreferredSize(new java.awt.Dimension(23, 23));
        jpStatus.add(jbWorkingDate);

        jtfUser.setEditable(false);
        jtfUser.setForeground(java.awt.Color.white);
        jtfUser.setText("TEXT");
        jtfUser.setToolTipText("Usuario");
        jtfUser.setFocusable(false);
        jtfUser.setOpaque(false);
        jtfUser.setPreferredSize(new java.awt.Dimension(100, 20));
        jpStatus.add(jtfUser);

        jtfUserTs.setEditable(false);
        jtfUserTs.setForeground(java.awt.Color.white);
        jtfUserTs.setText("01/01/2000 00:00:00 +0000");
        jtfUserTs.setToolTipText("Marca de tiempo de acceso");
        jtfUserTs.setFocusable(false);
        jtfUserTs.setOpaque(false);
        jtfUserTs.setPreferredSize(new java.awt.Dimension(150, 20));
        jpStatus.add(jtfUserTs);

        jlAppRelease.setForeground(new java.awt.Color(255, 204, 102));
        jlAppRelease.setText("RELEASE");
        jlAppRelease.setPreferredSize(new java.awt.Dimension(125, 20));
        jpStatus.add(jlAppRelease);

        jPanel1.add(jpStatus, java.awt.BorderLayout.WEST);

        jPanel2.setBackground(java.awt.Color.black);
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 3));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ft/gui/img/logo 024.jpg"))); // NOI18N
        jPanel2.add(jLabel1);

        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jmFile.setText("Archivo");

        jmiFileWorkingDate.setText("Cambiar fecha de trabajo...");
        jmFile.add(jmiFileWorkingDate);

        jmiFileUserPassword.setText("Cambiar contraseÃ±a...");
        jmFile.add(jmiFileUserPassword);
        jmFile.add(jsFile1);

        jmiFileCloseViewsAll.setText("Cerrar todas las vistas");
        jmFile.add(jmiFileCloseViewsAll);

        jmiFileCloseViewsOther.setText("Cerrar las otras vistas");
        jmFile.add(jmiFileCloseViewsOther);
        jmFile.add(jsFile2);

        jmiFileCloseSession.setText("Cerrar sesiÃ³n de usuario");
        jmFile.add(jmiFileCloseSession);
        jmFile.add(jsFile3);

        jmiFileExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jmiFileExit.setText("Salir");
        jmFile.add(jmiFileExit);

        jMenuBar1.add(jmFile);

        jmCfg.setText("ConfiguraciÃ³n");

        jmiCfgLine.setText("LÃ­neas de producciÃ³n");
        jmCfg.add(jmiCfgLine);

        jmiCfgDepart.setText("Departamentos de producciÃ³n");
        jmCfg.add(jmiCfgDepart);
        jmCfg.add(jsCfg);

        jmiCfgWarehouse.setText("Almacenes");
        jmCfg.add(jmiCfgWarehouse);

        jmiCfgCompany.setText("Empresa");
        jmCfg.add(jmiCfgCompany);
        jmCfg.add(jsCfg2);

        jmiCfgYear.setText("AÃ±os");
        jmCfg.add(jmiCfgYear);
        jmCfg.add(jsCfg3);

        jmiCfgUser.setText("Usuarios");
        jmCfg.add(jmiCfgUser);

        jmiCfgUserModule.setText("Accesos de usuarios");
        jmCfg.add(jmiCfgUserModule);
        jmCfg.add(jsCfg4);

        jmiCfgConfig.setText("ConfiguraciÃ³n del sistema");
        jmCfg.add(jmiCfgConfig);

        jMenuBar1.add(jmCfg);

        jmCat.setText("CatÃ¡logos");

        jmiCatItemPf.setText("Productos terminados");
        jmCat.add(jmiCatItemPf);

        jmiCatItemPb.setText("Productos base");
        jmCat.add(jmiCatItemPb);

        jmiCatItemP.setText("Productos");
        jmCat.add(jmiCatItemP);
        jmCat.add(jsCat1);

        jmiCatItemBp.setText("Subproductos");
        jmCat.add(jmiCatItemBp);

        jmiCatItemSc.setText("Desechos");
        jmCat.add(jmiCatItemSc);
        jmCat.add(jsCat2);

        jmiCatItemRmi.setText("Materiales directos insumo");
        jmCat.add(jmiCatItemRmi);

        jmiCatItemRmp.setText("Materiales directos empaque");
        jmCat.add(jmiCatItemRmp);

        jmiCatItemMi.setText("Materiales indirectos");
        jmCat.add(jmiCatItemMi);
        jmCat.add(jsCat3);

        jmiCatItemMo.setText("Gastos indirectos");
        jmCat.add(jmiCatItemMo);
        jmCat.add(jsCat4);

        jmiCatFamily.setText("Familias");
        jmCat.add(jmiCatFamily);

        jmiCatUnit.setText("Unidades");
        jmCat.add(jmiCatUnit);

        jmiCatPresent.setText("Presentaciones");
        jmCat.add(jmiCatPresent);
        jmCat.add(jsCat5);

        jmiCatBizPartnerCus.setText("Clientes");
        jmCat.add(jmiCatBizPartnerCus);

        jmiCatBizPartnerSup.setText("Proveedores");
        jmCat.add(jmiCatBizPartnerSup);

        jMenuBar1.add(jmCat);

        jmMfg.setText("ProducciÃ³n");

        jmiMfgJob.setText("Ãrdenes de producciÃ³n");
        jmMfg.add(jmiMfgJob);
        jmMfg.add(jsMfg1);

        jmiMfgFormula.setText("FÃ³rmulas");
        jmMfg.add(jmiMfgFormula);

        jmiMfgFormulaComp.setText("FÃ³rmulas y componentes");
        jmMfg.add(jmiMfgFormulaComp);

        jmiMfgFormulaByproduct.setText("FÃ³rmulas y colaterales");
        jmMfg.add(jmiMfgFormulaByproduct);
        jmMfg.add(jsMfg2);

        jmiMfgVariable.setText("Variables de producciÃ³n");
        jmMfg.add(jmiMfgVariable);

        jMenuBar1.add(jmMfg);

        jmQty.setText("Calidad");

        jmiQtyTestApp.setText("Aplicaciones de pruebas de calidad");
        jmQty.add(jmiQtyTestApp);

        jmiQtyTestAppResult.setText("Resultados de aplicaciones de pruebas de calidad");
        jmQty.add(jmiQtyTestAppResult);
        jmQty.add(jsQty1);

        jmiQtyTest.setText("Pruebas de calidad");
        jmQty.add(jmiQtyTest);

        jmiQtyParam.setText("ParÃ¡metros de calidad");
        jmQty.add(jmiQtyParam);

        jMenuBar1.add(jmQty);

        jmInv.setText("Inventarios");

        jmiInvWsm.setText("Documentos de almacÃ©n");
        jmInv.add(jmiInvWsm);

        jmiInvWsmRow.setText("Documentos de almacÃ©n a detalle");
        jmInv.add(jmiInvWsmRow);
        jmInv.add(jsInv1);

        jmiInvStock.setText("Existencias");
        jmInv.add(jmiInvStock);

        jmiInvStockLot.setText("Existencias por lote");
        jmInv.add(jmiInvStockLot);

        jMenuBar1.add(jmInv);

        jmRep.setText("Reportes");
        jMenuBar1.add(jmRep);

        jmHelp.setText("Ayuda");

        jmiHelpHelp.setText("Ayuda");
        jmHelp.add(jmiHelpHelp);
        jmHelp.add(jsHlp1);

        jmiHelpAbout.setText("Acerca de...");
        jmHelp.add(jmiHelpAbout);

        jMenuBar1.add(jmHelp);

        setJMenuBar(jMenuBar1);

        setBounds(0, 0, 816, 539);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        windowClosing();
    }//GEN-LAST:event_formWindowClosing

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        int result = DLibConsts.UNDEFINED;
        String xml = "";
        TimeZone zone = null;

        mbFirstActivation = true;

        setExtendedState(Frame.MAXIMIZED_BOTH);

        logout();

        try {
            xml = DXmlUtils.readXml(DUtilConsts.FILE_NAME_CFG);
            moConfigXml = new DUtilConfigXml();
            moConfigXml.processXml(xml);

            zone = DLibUtils.createTimeZone(TimeZone.getDefault(), TimeZone.getTimeZone((String) moConfigXml.getAttribute(DUtilConfigXml.ATT_TIME_ZONE).getValue()));
            DLibUtils.restoreDateFormats(zone);
            TimeZone.setDefault(zone);

            moSysDatabase = new DDbDatabase(DDbConsts.DBMS_MYSQL);
            result = moSysDatabase.connect(
                    (String) moConfigXml.getAttribute(DUtilConfigXml.ATT_DB_HOST).getValue(),
                    (String) moConfigXml.getAttribute(DUtilConfigXml.ATT_DB_PORT).getValue(),
                    (String) moConfigXml.getAttribute(DUtilConfigXml.ATT_DB_NAME).getValue(),
                    (String) moConfigXml.getAttribute(DUtilConfigXml.ATT_USR_NAME).getValue(),
                    (String) moConfigXml.getAttribute(DUtilConfigXml.ATT_USR_PSWD).getValue());
            if (result != DDbConsts.CONNECTION_OK) {
                throw new Exception(DDbConsts.ERR_MSG_DB_CONNECTION);
            }
            else {
                moSysDatabaseMonitor = new DDbDatabaseMonitor(moSysDatabase);
                moSysDatabaseMonitor.startThread();

                miSysStatement = moSysDatabase.getConnection().createStatement();
            }

            moDatePicker = new DGuiDatePicker(this, DGuiConsts.DATE_PICKER_DATE);
            moDateRangePicker = new DGuiDateRangePicker(this);
            moYearPicker = new DGuiYearPicker(this);
            moYearMonthPicker = new DGuiYearMonthPicker(this);
            moFileChooser = new JFileChooser();
            moIcon = new ImageIcon(getClass().getResource("/ft/gui/img/ft24.gif"));
            moIconGuiClose = new ImageIcon(getClass().getResource("/sba/lib/img/gui_close.png"));
            moIconGuiCloseIna = new ImageIcon(getClass().getResource("/sba/lib/img/gui_close_ina.png"));
            moIconGuiCloseBri = new ImageIcon(getClass().getResource("/sba/lib/img/gui_close_bri.png"));
            moIconGuiCloseDar = new ImageIcon(getClass().getResource("/sba/lib/img/gui_close_dar.png"));
            moIconCmdStdOk = new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_ok.gif"));
            moIconCmdStdDelete = new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_delete.gif"));
            moIconCmdStdDisable = new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_disable.gif"));
            moIconCmdStdPrint = new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_print.gif"));
            moIconCmdStdCardex = new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_cardex.gif"));
            moIconCmdStdView = new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_view.gif"));
            moIconCmdStdDate = new ImageIcon(getClass().getResource("/sba/lib/img/cal_cal.gif"));
            moIconCmdStdClear = new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_clear.gif"));
            moIconCmdStdAdd = new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_add.gif"));
            moIconCmdStdSubtract = new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_subtract.gif"));
            moIconCmdStdLot = new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_lot.gif"));
            moIconCmdStdSerialNumber = new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_sn.gif"));
            moIconCmdStdAdjustmentDiscount = new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_adj_disc.gif"));
            moIconCmdStdAdjustmentReturn = new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_adj_ret.gif"));
            moIconCmdStdAdjustmentDocument = new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_adj_doc.gif"));
            moIconCmdStdAdjustmentLot = new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_adj_lot.gif"));
            moIconCmdStdAdjustmentSerialNumber = new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_adj_sn.gif"));
            moIconCmdStdNote = new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_note.gif"));
            moIconCmdStdSign = new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_sign.gif"));
            moIconCmdStdSend = new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_send.gif"));
            moIconCmdStdExport = new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_exp.gif"));
            moIconCmdStdImport = new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_imp.gif"));

            setIconImage(moIcon.getImage());

            // Set owner frame for bean forms (bean have no-arguments in constructors):

            DBeanForm.OwnerFrame = this;
            DBeanFormDialog.OwnerFrame = this;
            DBeanFormProcess.OwnerFrame = this;
            DBeanOptionPicker.OwnerFrame = this;
            DBeanDialogReport.OwnerFrame = this;
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
            actionFileExit();
        }

        jbWorkingDate.addActionListener(this);

        jmiFileWorkingDate.addActionListener(this);
        jmiFileUserPassword.addActionListener(this);
        jmiFileCloseViewsAll.addActionListener(this);
        jmiFileCloseViewsOther.addActionListener(this);
        jmiFileCloseSession.addActionListener(this);
        jmiFileExit.addActionListener(this);
        jmiCatItemPf.addActionListener(this);
        jmiCatItemPb.addActionListener(this);
        jmiCatItemRmi.addActionListener(this);
        jmiCatItemRmp.addActionListener(this);
        jmiCatItemMi.addActionListener(this);
        jmiCatItemMo.addActionListener(this);
        jmiCatFamily.addActionListener(this);
        jmiCatUnit.addActionListener(this);
        jmiCatPresent.addActionListener(this);
        jmiMfgJob.addActionListener(this);
        jmiMfgFormula.addActionListener(this);
        jmiMfgFormulaComp.addActionListener(this);
        jmiMfgVariable.addActionListener(this);
        jmiHelpHelp.addActionListener(this);
        jmiHelpAbout.addActionListener(this);

        jlAppRelease.setText(APP_RELEASE);
    }

    private void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            login();
        }
    }

    private void windowClosing() {
        if (mbLoggedIn) {
            logout();
        }
    }

    private void logout() {
        actionFileCloseViewAll();

        mbLoggedIn = false;
        moSession = null;

        msCompany = "";
        setTitle(APP_NAME);

        jtfSystemDate.setText("");
        jtfWorkingDate.setText("");
        jtfUser.setText("");
        jtfUserTs.setText("");

        jmFile.setEnabled(false);
        jmCat.setEnabled(false);
        jmMfg.setEnabled(false);
        jmQty.setEnabled(false);
        jmInv.setEnabled(false);
        jmRep.setEnabled(false);
        jmHelp.setEnabled(false);

        jbWorkingDate.setEnabled(false);
    }

    private void login() {
        String sql = "";
        ResultSet resultSet = null;
        Date date = null;
        DDbUser user = null;
        DDbConfig config = null;
        DUtilLoginDlg loginDlg = new DUtilLoginDlg(this, "id_com", "com", false);

        loginDlg.setVisible(true);

        if (loginDlg.getFormResult() != DGuiConsts.FORM_RESULT_OK) {
            actionFileExit();
        }
        else {
            try {
                // Get system date:

                sql = "SELECT NOW() ";
                resultSet = miSysStatement.executeQuery(sql);
                if (!resultSet.next()) {
                    throw new Exception(DUtilConsts.ERR_MSG_SYS_DATE);
                }
                else {
                    date = resultSet.getTimestamp(1);
                }

                // Process login:

                mbLoggedIn = true;
                moSession = new DGuiSession(this);
                moSession.setSystemDate(date);
                moSession.setWorkingDate(date);
                moSession.setUserTs(date);
                moSession.setDatabase(loginDlg.getDatabase());

                config = new DDbConfig();
                config.read(moSession, new int[] { DUtilConsts.BPR_CO_ID });

                user = new DDbUser();
                user.read(moSession, loginDlg.getUserKey());

                moSession.setConfigSystem(null);
                moSession.setConfigCompany(config);
                moSession.setConfigBranch(null);
                moSession.setUser(user);
                moSession.setModuleUtils(new DModUtils());
                moSession.getModules().add(new DModModuleCfg(this));
                moSession.getModules().add(new DModModuleMfg(this));

                /*
                moSession.getUser().computeAccess(moSession);
                moSession.setSessionCustom(null);
                moSession.setEdsSignature(null);
                */
                
                msCompany = loginDlg.getCompany();
                setTitle(APP_NAME + " - " + msCompany);

                jtfSystemDate.setText(DLibUtils.DateFormatDate.format(moSession.getSystemDate()));
                jtfWorkingDate.setText(DLibUtils.DateFormatDate.format(moSession.getWorkingDate()));
                jtfUser.setText(user.getName());
                jtfUserTs.setText(DLibUtils.DateFormatDatetimeTimeZone.format(date));

                jmFile.setEnabled(true);
                jmCat.setEnabled(user.hasModuleAccess(DModSysConsts.CS_MOD_CFG));
                jmMfg.setEnabled(user.hasModuleAccess(DModSysConsts.CS_MOD_MFG));
                //jmQas.setEnabled(user.hasModuleAccess(DModSysConsts.CS_MOD_QAS));
                //jmInv.setEnabled(user.hasModuleAccess(DModSysConsts.CS_MOD_OPE));
                //jmRep.setEnabled(true);
                jmHelp.setEnabled(true);

                jbWorkingDate.setEnabled(true);

                jmiFileWorkingDate.setEnabled(jbWorkingDate.isEnabled());
            }
            catch (Exception e) {
                DLibUtils.showException(this, e);
                actionFileExit();
            }
        }
    }

    public void actionFileWorkingDate() {
        moDatePicker.resetPicker();
        moDatePicker.setOption(moSession.getWorkingDate());
        moDatePicker.setVisible(true);

        if (moDatePicker.getPickerResult() == DGuiConsts.FORM_RESULT_OK) {
            moSession.setWorkingDate(moDatePicker.getOption());
            jtfWorkingDate.setText(DLibUtils.DateFormatDate.format(moSession.getWorkingDate()));
        }
    }

    public void actionFileUserPassword() {
        new DUtilPasswordDlg(this).setVisible(true);
    }

    public void actionFileCloseViewAll() {
        try {
            DGuiUtils.setCursorWait(this);

            for (int i = 0; i < jtpWorkingArea.getTabCount(); i++) {
                ((DGridPaneView) jtpWorkingArea.getComponentAt(i)).paneViewClosed(); // this preserves view user settings
            }

            jtpWorkingArea.removeAll();
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
        finally {
            DGuiUtils.setCursorDefault(this);
        }
    }

    public void actionFileCloseViewOther() {
        int i = 0;
        int index = jtpWorkingArea.getSelectedIndex();

        try {
            DGuiUtils.setCursorWait(this);

            for (i = jtpWorkingArea.getTabCount() - 1; i > index; i--) {
                ((DGridPaneView) jtpWorkingArea.getComponentAt(i)).paneViewClosed(); // this preserves view user settings
                jtpWorkingArea.removeTabAt(i);
            }

            for (i = 0; i < index; i++) {
                ((DGridPaneView) jtpWorkingArea.getComponentAt(0)).paneViewClosed(); // this preserves view user settings
                jtpWorkingArea.removeTabAt(0);
            }
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
        finally {
            DGuiUtils.setCursorDefault(this);
        }
    }

    public void actionFileCloseSession() {
        logout();
        login();
    }

    public void actionFileExit() {
        logout();
        System.exit(0);
    }

    public void actionViewModule(JToggleButton toggleButton) {
        toggleButton.doClick();
        toggleButton.requestFocus();
    }

    public void actionHelpHelp() {

    }

    public void actionHelpAbout() {

    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the system look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch (java.lang.Exception e) {
            java.util.logging.Logger.getLogger(DGuiClientApp.class.getName()).log(java.util.logging.Level.SEVERE, null, e);
            DLibUtils.showException(DGuiClientApp.class.getName(), e);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DGuiClientApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jbWorkingDate;
    private javax.swing.JLabel jlAppRelease;
    private javax.swing.JMenu jmCat;
    private javax.swing.JMenu jmCfg;
    private javax.swing.JMenu jmFile;
    private javax.swing.JMenu jmHelp;
    private javax.swing.JMenu jmInv;
    private javax.swing.JMenu jmMfg;
    private javax.swing.JMenu jmQty;
    private javax.swing.JMenu jmRep;
    private javax.swing.JMenuItem jmiCatBizPartnerCus;
    private javax.swing.JMenuItem jmiCatBizPartnerSup;
    private javax.swing.JMenuItem jmiCatFamily;
    private javax.swing.JMenuItem jmiCatItemBp;
    private javax.swing.JMenuItem jmiCatItemMi;
    private javax.swing.JMenuItem jmiCatItemMo;
    private javax.swing.JMenuItem jmiCatItemP;
    private javax.swing.JMenuItem jmiCatItemPb;
    private javax.swing.JMenuItem jmiCatItemPf;
    private javax.swing.JMenuItem jmiCatItemRmi;
    private javax.swing.JMenuItem jmiCatItemRmp;
    private javax.swing.JMenuItem jmiCatItemSc;
    private javax.swing.JMenuItem jmiCatPresent;
    private javax.swing.JMenuItem jmiCatUnit;
    private javax.swing.JMenuItem jmiCfgCompany;
    private javax.swing.JMenuItem jmiCfgConfig;
    private javax.swing.JMenuItem jmiCfgDepart;
    private javax.swing.JMenuItem jmiCfgLine;
    private javax.swing.JMenuItem jmiCfgUser;
    private javax.swing.JMenuItem jmiCfgUserModule;
    private javax.swing.JMenuItem jmiCfgWarehouse;
    private javax.swing.JMenuItem jmiCfgYear;
    private javax.swing.JMenuItem jmiFileCloseSession;
    private javax.swing.JMenuItem jmiFileCloseViewsAll;
    private javax.swing.JMenuItem jmiFileCloseViewsOther;
    private javax.swing.JMenuItem jmiFileExit;
    private javax.swing.JMenuItem jmiFileUserPassword;
    private javax.swing.JMenuItem jmiFileWorkingDate;
    private javax.swing.JMenuItem jmiHelpAbout;
    private javax.swing.JMenuItem jmiHelpHelp;
    private javax.swing.JMenuItem jmiInvStock;
    private javax.swing.JMenuItem jmiInvStockLot;
    private javax.swing.JMenuItem jmiInvWsm;
    private javax.swing.JMenuItem jmiInvWsmRow;
    private javax.swing.JMenuItem jmiMfgFormula;
    private javax.swing.JMenuItem jmiMfgFormulaByproduct;
    private javax.swing.JMenuItem jmiMfgFormulaComp;
    private javax.swing.JMenuItem jmiMfgJob;
    private javax.swing.JMenuItem jmiMfgVariable;
    private javax.swing.JMenuItem jmiQtyParam;
    private javax.swing.JMenuItem jmiQtyTest;
    private javax.swing.JMenuItem jmiQtyTestApp;
    private javax.swing.JMenuItem jmiQtyTestAppResult;
    private javax.swing.JPanel jpStatus;
    private javax.swing.JPopupMenu.Separator jsCat1;
    private javax.swing.JPopupMenu.Separator jsCat2;
    private javax.swing.JPopupMenu.Separator jsCat3;
    private javax.swing.JPopupMenu.Separator jsCat4;
    private javax.swing.JPopupMenu.Separator jsCat5;
    private javax.swing.JPopupMenu.Separator jsCfg;
    private javax.swing.JPopupMenu.Separator jsCfg2;
    private javax.swing.JPopupMenu.Separator jsCfg3;
    private javax.swing.JPopupMenu.Separator jsCfg4;
    private javax.swing.JPopupMenu.Separator jsFile1;
    private javax.swing.JPopupMenu.Separator jsFile2;
    private javax.swing.JPopupMenu.Separator jsFile3;
    private javax.swing.JPopupMenu.Separator jsHlp1;
    private javax.swing.JPopupMenu.Separator jsInv1;
    private javax.swing.JPopupMenu.Separator jsMfg1;
    private javax.swing.JPopupMenu.Separator jsMfg2;
    private javax.swing.JPopupMenu.Separator jsQty1;
    private javax.swing.JTextField jtfSystemDate;
    private javax.swing.JTextField jtfUser;
    private javax.swing.JTextField jtfUserTs;
    private javax.swing.JTextField jtfWorkingDate;
    private javax.swing.JTabbedPane jtpWorkingArea;
    // End of variables declaration//GEN-END:variables

    /*
     * Overriden methods
     */

    @Override
    public JFrame getFrame() {
        return this;
    }

    @Override
    public JTabbedPane getTabbedPane() {
        return jtpWorkingArea;
    }

    @Override
    public DDbDatabase getSysDatabase() {
        return moSysDatabase;
    }

    @Override
    public Statement getSysStatement() {
        return miSysStatement;
    }

    @Override
    public DGuiSession getSession() {
        return moSession;
    }

    @Override
    public DGuiDatePicker getDatePicker() {
        return moDatePicker;
    }

    @Override
    public DGuiDateRangePicker getDateRangePicker() {
        return moDateRangePicker;
    }

    @Override
    public DGuiYearPicker getYearPicker() {
        return moYearPicker;
    }

    @Override
    public DGuiYearMonthPicker getYearMonthPicker() {
        return moYearMonthPicker;
    }

    @Override
    public JFileChooser getFileChooser() {
        return moFileChooser;
    }

    @Override
    public ImageIcon getImageIcon(final int icon) {
        ImageIcon imageIcon = null;

        switch (icon) {
            case DImgConsts.ICO_GUI_CLOSE:
                imageIcon = moIconGuiClose;
                break;
            case DImgConsts.ICO_GUI_CLOSE_INA:
                imageIcon = moIconGuiCloseIna;
                break;
            case DImgConsts.ICO_GUI_CLOSE_BRI:
                imageIcon = moIconGuiCloseBri;
                break;
            case DImgConsts.ICO_GUI_CLOSE_DAR:
                imageIcon = moIconGuiCloseDar;
                break;
            case DImgConsts.CMD_STD_OK:
                imageIcon = moIconCmdStdOk;
                break;
            case DImgConsts.CMD_STD_DELETE:
                imageIcon = moIconCmdStdDelete;
                break;
            case DImgConsts.CMD_STD_DISABLE:
                imageIcon = moIconCmdStdDisable;
                break;
            case DImgConsts.CMD_STD_PRINT:
                imageIcon = moIconCmdStdPrint;
                break;
            case DImgConsts.CMD_STD_CARDEX:
                imageIcon = moIconCmdStdCardex;
                break;
            case DImgConsts.CMD_STD_VIEW:
                imageIcon = moIconCmdStdView;
                break;
            case DImgConsts.CMD_STD_DATE:
                imageIcon = moIconCmdStdDate;
                break;
            case DImgConsts.CMD_STD_CLEAR:
                imageIcon = moIconCmdStdClear;
                break;
            case DImgConsts.CMD_STD_ADD:
                imageIcon = moIconCmdStdAdd;
                break;
            case DImgConsts.CMD_STD_SUBTRACT:
                imageIcon = moIconCmdStdSubtract;
                break;
            case DImgConsts.CMD_STD_LOT:
                imageIcon = moIconCmdStdLot;
                break;
            case DImgConsts.CMD_STD_SER_NUM:
                imageIcon = moIconCmdStdSerialNumber;
                break;
            case DImgConsts.CMD_STD_ADJ_DISC:
                imageIcon = moIconCmdStdAdjustmentDiscount;
                break;
            case DImgConsts.CMD_STD_ADJ_RET:
                imageIcon = moIconCmdStdAdjustmentReturn;
                break;
            case DImgConsts.CMD_STD_ADJ_DOC:
                imageIcon = moIconCmdStdAdjustmentDocument;
                break;
            case DImgConsts.CMD_STD_ADJ_LOT:
                imageIcon = moIconCmdStdAdjustmentLot;
                break;
            case DImgConsts.CMD_STD_ADJ_SER_NUM:
                imageIcon = moIconCmdStdAdjustmentSerialNumber;
                break;
            case DImgConsts.CMD_STD_NOTE:
                imageIcon = moIconCmdStdNote;
                break;
            case DImgConsts.CMD_STD_SIGN:
                imageIcon = moIconCmdStdSign;
                break;
            case DImgConsts.CMD_STD_SEND:
                imageIcon = moIconCmdStdSend;
                break;
            case DImgConsts.CMD_STD_EXPORT:
                imageIcon = moIconCmdStdExport;
                break;
            case DImgConsts.CMD_STD_IMPORT:
                imageIcon = moIconCmdStdImport;
                break;
            default:
                showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        return imageIcon;
    }

    @Override
    public DGuiUserGui readUserGui(final int[] key) {
        DDbUserGui userGui = new DDbUserGui();

        try {
            userGui.read(moSession, key);
        }
        catch (Exception e) {
            userGui = null;
            DLibUtils.printException(this, e);
        }

        return userGui;
    }

    @Override
    public DGuiUserGui saveUserGui(final int[] key, final String gui) {
        DDbUserGui userGui = (DDbUserGui) readUserGui(key);

        if (userGui == null) {
            userGui = new DDbUserGui();
            userGui.setPrimaryKey(key);
        }

        try {
            userGui.setGui(gui);
            userGui.save(moSession);
        }
        catch (Exception e) {
            DLibUtils.printException(this, e);
        }

        return userGui;
    }

    @Override
    public HashMap<String, Object> createReportParams() {
        HashMap<String, Object> params = new HashMap<String, Object>();

        params.put("sAppName", APP_NAME);
        params.put("sAppCopyright", APP_COPYRIGHT);
        params.put("sAppProvider", APP_PROVIDER);
        params.put("sCompany", msCompany);
        params.put("sUser", moSession.getUser().getName());
        params.put("oFormatDate", DLibUtils.DateFormatDate);

        return params;
    }

    @Override
    public String getTableCompany() {
        return DModConsts.TablesMap.get(DModConsts.SU_COM);
    }

    @Override
    public String getTableUser() {
        return DModConsts.TablesMap.get(DModConsts.CU_USR);
    }

    @Override
    public String getAppName() {
        return APP_NAME;
    }

    @Override
    public String getAppRelease() {
        return APP_RELEASE;
    }

    @Override
    public String getAppCopyright() {
        return APP_COPYRIGHT;
    }

    @Override
    public String getAppProvider() {
        return APP_PROVIDER;
    }

    @Override
    public void showMsgBoxError(final String msg) {
        JOptionPane.showMessageDialog(this, msg, DGuiConsts.MSG_BOX_ERROR, JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void showMsgBoxWarning(final String msg) {
        JOptionPane.showMessageDialog(this, msg, DGuiConsts.MSG_BOX_WARNING, JOptionPane.WARNING_MESSAGE);
    }

    @Override
    public void showMsgBoxInformation(final String msg) {
        JOptionPane.showMessageDialog(this, msg, DGuiConsts.MSG_BOX_INFORMATION, JOptionPane.INFORMATION_MESSAGE);
    }

    @Override
    public int showMsgBoxConfirm(final String msg) {
        return JOptionPane.showConfirmDialog(this, msg, DGuiConsts.MSG_BOX_CONFIRM, JOptionPane.YES_NO_OPTION);
    }

    @Override
    public void finalize() throws Throwable {
        super.finalize();

        if (moSysDatabaseMonitor != null && moSysDatabaseMonitor.isAlive()) {
            moSysDatabaseMonitor.stopThread();
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbWorkingDate) {
                actionFileWorkingDate();
            }
        }
        else if (e.getSource() instanceof JMenuItem) {
            JMenuItem menuItem = (JMenuItem) e.getSource();

            if (menuItem == jmiFileWorkingDate) {
                actionFileWorkingDate();
            }
            else if (menuItem == jmiFileUserPassword) {
                actionFileUserPassword();
            }
            else if (menuItem == jmiFileCloseViewsAll) {
                actionFileCloseViewAll();
            }
            else if (menuItem == jmiFileCloseViewsOther) {
                actionFileCloseViewOther();
            }
            else if (menuItem == jmiFileCloseSession) {
                actionFileCloseSession();
            }
            else if (menuItem == jmiFileExit) {
                actionFileExit();
            }
            else if (menuItem == jmiCatItemPf) {
                moSession.showView(DModConsts.CU_ITM, DModSysConsts.CS_ITM_TP_PF, null);
            }
            else if (menuItem == jmiCatItemPb) {
                moSession.showView(DModConsts.CU_ITM, DModSysConsts.CS_ITM_TP_PB, null);
            }
            else if (menuItem == jmiCatItemRmi) {
                moSession.showView(DModConsts.CU_ITM, DModSysConsts.CS_ITM_TP_RMI, null);
            }
            else if (menuItem == jmiCatItemRmp) {
                moSession.showView(DModConsts.CU_ITM, DModSysConsts.CS_ITM_TP_RMP, null);
            }
            else if (menuItem == jmiCatItemMi) {
                moSession.showView(DModConsts.CU_ITM, DModSysConsts.CS_ITM_TP_MI, null);
            }
            else if (menuItem == jmiCatFamily) {
                moSession.showView(DModConsts.CU_FAM, DLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiCatUnit) {
                moSession.showView(DModConsts.CU_UOM, DLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiCatPresent) {
                moSession.showView(DModConsts.CU_PRE, DLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiMfgJob) {
                moSession.showView(DModConsts.M_JOB, DLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiMfgFormula) {
                moSession.showView(DModConsts.MU_FRM, DLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiHelpHelp) {
                actionHelpHelp();
            }
            else if (menuItem == jmiHelpAbout) {
                actionHelpAbout();
            }
        }
    }
}
