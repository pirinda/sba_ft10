/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ft.mod;

import java.awt.event.ItemEvent;
import javax.swing.JPanel;
import sba.lib.DLibConsts;
import sba.lib.grid.DGridFilter;
import sba.lib.grid.DGridPaneView;
import sba.lib.gui.DGuiClient;

/**
 *
 * @author Sergio Flores
 */
public class DModGridFilter extends JPanel implements DGridFilter {

    protected DGuiClient miClient;
    protected DGridPaneView moPaneView;
    protected int mnFilterType;
    protected boolean mbKeyAdjusting;
    
    /**
     * Creates new form DModGridFilterWarehouse
     */
    public DModGridFilter(DGridPaneView paneView, int filterType) {
        miClient = paneView.getClient();
        moPaneView = paneView;
        mnFilterType = filterType;
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        moKeyFilter = new sba.lib.gui.bean.DBeanFieldKey();
        mjViewAll = new javax.swing.JButton();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moKeyFilter.setPreferredSize(new java.awt.Dimension(150, 23));
        moKeyFilter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                moKeyFilterItemStateChanged(evt);
            }
        });
        add(moKeyFilter);

        mjViewAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_clear.gif"))); // NOI18N
        mjViewAll.setToolTipText("Ver todos");
        mjViewAll.setPreferredSize(new java.awt.Dimension(23, 23));
        mjViewAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mjViewAllActionPerformed(evt);
            }
        });
        add(mjViewAll);
    }// </editor-fold>//GEN-END:initComponents

    private void moKeyFilterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_moKeyFilterItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            itemStateChangedKeyWarehouse();
        }
    }//GEN-LAST:event_moKeyFilterItemStateChanged

    private void mjViewAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mjViewAllActionPerformed
        moKeyFilter.resetField();
    }//GEN-LAST:event_mjViewAllActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton mjViewAll;
    private sba.lib.gui.bean.DBeanFieldKey moKeyFilter;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */
    
    private void initComponentsCustom() {
        mbKeyAdjusting = true;
        
        miClient.getSession().populateCatalogue(moKeyFilter, mnFilterType, DLibConsts.UNDEFINED, null);
        
        mbKeyAdjusting = false;
    }
    
    private void itemStateChangedKeyWarehouse() {
        if (!mbKeyAdjusting) {
            moPaneView.putFilter(mnFilterType, moKeyFilter.getValue());
        }
    }
    
    /*
     * Public methods
     */
    
    /*
     * Overriden methods
     */
    
    @Override
    public void initFilter(Object value) {
        moKeyFilter.setValue((int[]) value);
    }
}
