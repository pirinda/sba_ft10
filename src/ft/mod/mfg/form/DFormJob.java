/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFormJob.java
 *
 * Created on 29/08/2011, 08:02:13 PM
 */

package ft.mod.mfg.form;

import ft.gui.DGuiClientApp;
import ft.mod.DModConsts;
import ft.mod.DModSysConsts;
import ft.mod.cfg.db.DDbConfig;
import ft.mod.cfg.db.DDbItem;
import ft.mod.mfg.db.DDbFormula;
import ft.mod.mfg.db.DDbJob;
import ft.mod.mfg.db.DDbJobLinePack;
import ft.mod.mfg.db.DDbJobLinePackRqmt;
import ft.mod.mfg.db.DDbJobLinePrep;
import ft.mod.mfg.db.DDbJobLinePrepRqmt;
import ft.mod.mfg.db.DRowJobProg;
import ft.mod.mfg.db.DRowJobProgMask;
import ft.mod.mfg.db.DRowJobRqmt;
import ft.mod.mfg.db.DRowJobRqmtMask;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.JButton;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibConsts;
import sba.lib.DLibTimeUtils;
import sba.lib.DLibUtils;
import sba.lib.db.DDbConsts;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridColumnForm;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridPaneFormOwner;
import sba.lib.grid.DGridRow;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiField;
import sba.lib.gui.DGuiFieldKeyGroup;
import sba.lib.gui.DGuiItem;
import sba.lib.gui.DGuiParams;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldDecimal;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanForm;

/**
 *
 * @author Sergio Flores
 */
public class DFormJob extends DBeanForm implements DGridPaneFormOwner, ActionListener, ItemListener, FocusListener {
    
    private static final int TAB_PROG = 0;
    private static final int TAB_PREP = 1;
    private static final int TAB_PACK = 2;
    private static final int TAB_STAT = 3;

    private DDbJob moRegistry;
    private DDbConfig moConfig;
    private int mnJobType;
    private int mnJobStatus;
    private DGridPaneForm moGridProgPrep;
    private DGridPaneForm moGridProgPack;
    private DGridPaneForm moGridPrepRqmt;
    private DGridPaneForm moGridPrepCons;
    private DGridPaneForm moGridPrepMfg;
    private DGridPaneForm moGridPackRqmt;
    private DGridPaneForm moGridPackCons;
    private DGridPaneForm moGridPackMfg;
    private DGuiFieldKeyGroup moKeyGroupJobItem;
    private DDbFormula moFormulaPrep;
    private DDbFormula moFormulaPack;

    /** Creates new form DFormJob */
    public DFormJob(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.M_JOB, DLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContainer = new javax.swing.JPanel();
        jpJob = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlJobType = new javax.swing.JLabel();
        moKeyJobType = new sba.lib.gui.bean.DBeanFieldKey();
        jtfJobNumber = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlJobDate = new javax.swing.JLabel();
        moDateJobDate = new sba.lib.gui.bean.DBeanFieldDate();
        jPanel6 = new javax.swing.JPanel();
        jlJobItemFamily = new javax.swing.JLabel();
        moKeyJobItemFamily = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel11 = new javax.swing.JPanel();
        jlJobItem = new javax.swing.JLabel();
        moKeyJobItem = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel9 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlJobLot = new javax.swing.JLabel();
        moTextJobLot = new sba.lib.gui.bean.DBeanFieldText();
        jPanel15 = new javax.swing.JPanel();
        jlJobTimeStart = new javax.swing.JLabel();
        moTimeJobTimeStart = new sba.lib.gui.bean.DBeanFieldDatetime();
        jPanel16 = new javax.swing.JPanel();
        jlJobTimeEnd = new javax.swing.JLabel();
        moTimeJobTimeEnd = new sba.lib.gui.bean.DBeanFieldDatetime();
        jPanel14 = new javax.swing.JPanel();
        jlJobStatus = new javax.swing.JLabel();
        moKeyJobStatus = new sba.lib.gui.bean.DBeanFieldKey();
        jbGoPrevStatus = new javax.swing.JButton();
        jbGoNextStatus = new javax.swing.JButton();
        jtpJobSettings = new javax.swing.JTabbedPane();
        jpProg = new javax.swing.JPanel();
        jpProgPrep = new javax.swing.JPanel();
        jpProgPrepData = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jlProgPrepLinePrep = new javax.swing.JLabel();
        moKeyProgPrepLinePrep = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel18 = new javax.swing.JPanel();
        jlProgPrepLinePrepItem = new javax.swing.JLabel();
        moKeyProgPrepLinePrepItem = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel19 = new javax.swing.JPanel();
        jlProgPrepFormula = new javax.swing.JLabel();
        moKeyProgPrepFormula = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel20 = new javax.swing.JPanel();
        jlProgPrepLoads = new javax.swing.JLabel();
        moDecProgPrepLoads = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel21 = new javax.swing.JPanel();
        jlProgPrepQuantity = new javax.swing.JLabel();
        moCompProgPrepQuantity = new sba.lib.gui.bean.DBeanCompoundField();
        moCompProgPrepDefaultVariable1 = new sba.lib.gui.bean.DBeanCompoundField();
        jbProgPrepAdd = new javax.swing.JButton();
        jbProgPrepClear = new javax.swing.JButton();
        jpProgPrepGrid = new javax.swing.JPanel();
        jpProgPack = new javax.swing.JPanel();
        jpProgPackData = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jlProgPackLinePack = new javax.swing.JLabel();
        moKeyProgPackLinePack = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel24 = new javax.swing.JPanel();
        jlProgPackLinePackItem = new javax.swing.JLabel();
        moKeyProgPackLinePackItem = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel25 = new javax.swing.JPanel();
        jlProgPackFormula = new javax.swing.JLabel();
        moKeyProgPackFormula = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel26 = new javax.swing.JPanel();
        jlProgPackLoads = new javax.swing.JLabel();
        moDecProgPackLoads = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel27 = new javax.swing.JPanel();
        jlProgPackQuantity = new javax.swing.JLabel();
        moCompProgPackQuantity = new sba.lib.gui.bean.DBeanCompoundField();
        jLabel1 = new javax.swing.JLabel();
        jbProgPackAdd = new javax.swing.JButton();
        jbProgPackClear = new javax.swing.JButton();
        jpProgPackGrid = new javax.swing.JPanel();
        jpPrep = new javax.swing.JPanel();
        jpPrepRqmt = new javax.swing.JPanel();
        jpPrepRqmtGrid = new javax.swing.JPanel();
        jpPrepCons = new javax.swing.JPanel();
        jpPrepConsData = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlPrepConLinePrep = new javax.swing.JLabel();
        moKeyPrepConLinePrep = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel10 = new javax.swing.JPanel();
        jlPrepConLinePrepItem = new javax.swing.JLabel();
        moKeyPrepConLinePrepItem = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel7 = new javax.swing.JPanel();
        jlPrepConRequirement = new javax.swing.JLabel();
        moKeyPrepConRequirement = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel8 = new javax.swing.JPanel();
        jlPrepConQuantity = new javax.swing.JLabel();
        moCompPrepConQuantity = new sba.lib.gui.bean.DBeanCompoundField();
        moCompPrepConVariable1 = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel12 = new javax.swing.JPanel();
        jlPrepConLot = new javax.swing.JLabel();
        moTextPrepConLot = new sba.lib.gui.bean.DBeanFieldText();
        jLabel3 = new javax.swing.JLabel();
        jbPrepConAdd = new javax.swing.JButton();
        jbPrepConClear = new javax.swing.JButton();
        jpPrepConsGrid = new javax.swing.JPanel();
        jpPrepMfg = new javax.swing.JPanel();
        jpPrepMfgData = new javax.swing.JPanel();
        jPanel28 = new javax.swing.JPanel();
        jlPrepMfgLinePrep = new javax.swing.JLabel();
        moKeyPrepMfgLinePrep = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel31 = new javax.swing.JPanel();
        jlPrepMfgLinePrepItem = new javax.swing.JLabel();
        moKeyPrepMfgLinePrepItem = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel29 = new javax.swing.JPanel();
        jPanel30 = new javax.swing.JPanel();
        jlPrepMfgQuantity = new javax.swing.JLabel();
        moCompPrepMfgQuantity = new sba.lib.gui.bean.DBeanCompoundField();
        moCompPrepMfgVariable1 = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel32 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jbPrepMfgAdd = new javax.swing.JButton();
        jbPrepMfgClear = new javax.swing.JButton();
        jpPrepMfgGrid = new javax.swing.JPanel();
        jpPack = new javax.swing.JPanel();
        jpPackRqmt = new javax.swing.JPanel();
        jpPackRqmtGrid = new javax.swing.JPanel();
        jpPackCons = new javax.swing.JPanel();
        jpPackConsData = new javax.swing.JPanel();
        jPanel34 = new javax.swing.JPanel();
        jlPackConLinePack = new javax.swing.JLabel();
        moKeyPackConLinePack = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel37 = new javax.swing.JPanel();
        jlPackConLinePackItem = new javax.swing.JLabel();
        moKeyPackConLinePackItem = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel35 = new javax.swing.JPanel();
        jlPackConRequirement = new javax.swing.JLabel();
        moKeyPackConRequirement = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel36 = new javax.swing.JPanel();
        jlPackConQuantity = new javax.swing.JLabel();
        moCompPackConQuantity = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel38 = new javax.swing.JPanel();
        jlPackConLot = new javax.swing.JLabel();
        moTextPackConLot = new sba.lib.gui.bean.DBeanFieldText();
        jLabel5 = new javax.swing.JLabel();
        jbPackConAdd = new javax.swing.JButton();
        jbPackConClear = new javax.swing.JButton();
        jpPackConsGrid = new javax.swing.JPanel();
        jpPackMfg = new javax.swing.JPanel();
        jpPackMfgData = new javax.swing.JPanel();
        jPanel40 = new javax.swing.JPanel();
        jlPackMfgLinePack = new javax.swing.JLabel();
        moKeyPackMfgLinePack = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel43 = new javax.swing.JPanel();
        jlPackMfgLinePackItem = new javax.swing.JLabel();
        moKeyPackMfgLinePackItem = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel41 = new javax.swing.JPanel();
        jPanel42 = new javax.swing.JPanel();
        jlPackMfgQuantity = new javax.swing.JLabel();
        moCompPackMfgQuantity = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel44 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jbPackMfgAdd = new javax.swing.JButton();
        jbPackMfgClear = new javax.swing.JButton();
        jpPackMfgGrid = new javax.swing.JPanel();
        jpStat = new javax.swing.JPanel();

        jpContainer.setLayout(new java.awt.BorderLayout());

        jpJob.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpJob.setLayout(new java.awt.GridLayout(1, 2));

        jPanel1.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobType.setText("Tipo orden:*");
        jlJobType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlJobType);

        moKeyJobType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel3.add(moKeyJobType);

        jtfJobNumber.setEditable(false);
        jtfJobNumber.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfJobNumber.setText("0");
        jtfJobNumber.setFocusable(false);
        jtfJobNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jtfJobNumber);

        jPanel1.add(jPanel3);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobDate.setText("Fecha:*");
        jlJobDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlJobDate);
        jPanel5.add(moDateJobDate);

        jPanel1.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobItemFamily.setText("Familia producto:*");
        jlJobItemFamily.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlJobItemFamily);

        moKeyJobItemFamily.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel6.add(moKeyJobItemFamily);

        jPanel1.add(jPanel6);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobItem.setText("Producto:*");
        jlJobItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlJobItem);

        moKeyJobItem.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel11.add(moKeyJobItem);

        jPanel1.add(jPanel11);

        jpJob.add(jPanel1);

        jPanel9.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobLot.setText("Lote:*");
        jlJobLot.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlJobLot);

        moTextJobLot.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel13.add(moTextJobLot);

        jPanel9.add(jPanel13);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobTimeStart.setText("Fecha-hora inicial:");
        jlJobTimeStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlJobTimeStart);
        jPanel15.add(moTimeJobTimeStart);

        jPanel9.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobTimeEnd.setText("Fecha-hora final:");
        jlJobTimeEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlJobTimeEnd);
        jPanel16.add(moTimeJobTimeEnd);

        jPanel9.add(jPanel16);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobStatus.setText("Estatus orden:*");
        jlJobStatus.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlJobStatus);

        moKeyJobStatus.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel14.add(moKeyJobStatus);

        jbGoPrevStatus.setText("<<<");
        jbGoPrevStatus.setToolTipText("Ir a estatus previo");
        jbGoPrevStatus.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbGoPrevStatus.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel14.add(jbGoPrevStatus);

        jbGoNextStatus.setText(">>>");
        jbGoNextStatus.setToolTipText("Ir a estatus siguiente");
        jbGoNextStatus.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbGoNextStatus.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel14.add(jbGoNextStatus);

        jPanel9.add(jPanel14);

        jpJob.add(jPanel9);

        jpContainer.add(jpJob, java.awt.BorderLayout.NORTH);

        jpProg.setLayout(new java.awt.GridLayout(1, 2));

        jpProgPrep.setBorder(javax.swing.BorderFactory.createTitledBorder("Preparación:"));
        jpProgPrep.setLayout(new java.awt.BorderLayout(0, 5));

        jpProgPrepData.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProgPrepLinePrep.setText("Línea:*");
        jlProgPrepLinePrep.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlProgPrepLinePrep);

        moKeyProgPrepLinePrep.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel17.add(moKeyProgPrepLinePrep);

        jpProgPrepData.add(jPanel17);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProgPrepLinePrepItem.setText("Producto:*");
        jlProgPrepLinePrepItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel18.add(jlProgPrepLinePrepItem);

        moKeyProgPrepLinePrepItem.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel18.add(moKeyProgPrepLinePrepItem);

        jpProgPrepData.add(jPanel18);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProgPrepFormula.setText("Fórmula:*");
        jlProgPrepFormula.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel19.add(jlProgPrepFormula);

        moKeyProgPrepFormula.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel19.add(moKeyProgPrepFormula);

        jpProgPrepData.add(jPanel19);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProgPrepLoads.setText("Cargas:*");
        jlProgPrepLoads.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jlProgPrepLoads);
        jPanel20.add(moDecProgPrepLoads);

        jpProgPrepData.add(jPanel20);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProgPrepQuantity.setText("Cantidad:*");
        jlProgPrepQuantity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlProgPrepQuantity);
        jPanel21.add(moCompProgPrepQuantity);

        moCompProgPrepDefaultVariable1.setToolTipText("Variable 1 default");
        jPanel21.add(moCompProgPrepDefaultVariable1);

        jbProgPrepAdd.setText("+");
        jbProgPrepAdd.setToolTipText("Agregar");
        jbProgPrepAdd.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbProgPrepAdd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel21.add(jbProgPrepAdd);

        jbProgPrepClear.setText("!");
        jbProgPrepClear.setToolTipText("Limpiar");
        jbProgPrepClear.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbProgPrepClear.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel21.add(jbProgPrepClear);

        jpProgPrepData.add(jPanel21);

        jpProgPrep.add(jpProgPrepData, java.awt.BorderLayout.NORTH);

        jpProgPrepGrid.setLayout(new java.awt.BorderLayout());
        jpProgPrep.add(jpProgPrepGrid, java.awt.BorderLayout.CENTER);

        jpProg.add(jpProgPrep);

        jpProgPack.setBorder(javax.swing.BorderFactory.createTitledBorder("Envasado:"));
        jpProgPack.setLayout(new java.awt.BorderLayout(0, 5));

        jpProgPackData.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProgPackLinePack.setText("Línea:*");
        jlProgPackLinePack.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel23.add(jlProgPackLinePack);

        moKeyProgPackLinePack.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel23.add(moKeyProgPackLinePack);

        jpProgPackData.add(jPanel23);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProgPackLinePackItem.setText("Producto:*");
        jlProgPackLinePackItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel24.add(jlProgPackLinePackItem);

        moKeyProgPackLinePackItem.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel24.add(moKeyProgPackLinePackItem);

        jpProgPackData.add(jPanel24);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProgPackFormula.setText("Fórmula:*");
        jlProgPackFormula.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel25.add(jlProgPackFormula);

        moKeyProgPackFormula.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel25.add(moKeyProgPackFormula);

        jpProgPackData.add(jPanel25);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProgPackLoads.setText("Cargas:*");
        jlProgPackLoads.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel26.add(jlProgPackLoads);
        jPanel26.add(moDecProgPackLoads);

        jpProgPackData.add(jPanel26);

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProgPackQuantity.setText("Cantidad:*");
        jlProgPackQuantity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel27.add(jlProgPackQuantity);
        jPanel27.add(moCompProgPackQuantity);

        jLabel1.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel27.add(jLabel1);

        jbProgPackAdd.setText("+");
        jbProgPackAdd.setToolTipText("Agregar");
        jbProgPackAdd.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbProgPackAdd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel27.add(jbProgPackAdd);

        jbProgPackClear.setText("!");
        jbProgPackClear.setToolTipText("Limpiar");
        jbProgPackClear.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbProgPackClear.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel27.add(jbProgPackClear);

        jpProgPackData.add(jPanel27);

        jpProgPack.add(jpProgPackData, java.awt.BorderLayout.NORTH);

        jpProgPackGrid.setLayout(new java.awt.BorderLayout());
        jpProgPack.add(jpProgPackGrid, java.awt.BorderLayout.CENTER);

        jpProg.add(jpProgPack);

        jtpJobSettings.addTab("Programa", jpProg);

        jpPrep.setLayout(new java.awt.GridLayout(1, 3));

        jpPrepRqmt.setBorder(javax.swing.BorderFactory.createTitledBorder("Insumos requeridos:"));
        jpPrepRqmt.setLayout(new java.awt.BorderLayout());

        jpPrepRqmtGrid.setLayout(new java.awt.BorderLayout());
        jpPrepRqmt.add(jpPrepRqmtGrid, java.awt.BorderLayout.CENTER);

        jpPrep.add(jpPrepRqmt);

        jpPrepCons.setBorder(javax.swing.BorderFactory.createTitledBorder("Insumos consumidos:"));
        jpPrepCons.setLayout(new java.awt.BorderLayout(0, 5));

        jpPrepConsData.setLayout(new java.awt.GridLayout(5, 0, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPrepConLinePrep.setText("Línea:*");
        jlPrepConLinePrep.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(jlPrepConLinePrep);

        moKeyPrepConLinePrep.setPreferredSize(new java.awt.Dimension(240, 23));
        jPanel4.add(moKeyPrepConLinePrep);

        jpPrepConsData.add(jPanel4);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPrepConLinePrepItem.setText("Producto:*");
        jlPrepConLinePrepItem.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jlPrepConLinePrepItem);

        moKeyPrepConLinePrepItem.setPreferredSize(new java.awt.Dimension(240, 23));
        jPanel10.add(moKeyPrepConLinePrepItem);

        jpPrepConsData.add(jPanel10);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPrepConRequirement.setText("Insumo:*");
        jlPrepConRequirement.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jlPrepConRequirement);

        moKeyPrepConRequirement.setPreferredSize(new java.awt.Dimension(240, 23));
        jPanel7.add(moKeyPrepConRequirement);

        jpPrepConsData.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPrepConQuantity.setText("Cantidad:*");
        jlPrepConQuantity.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jlPrepConQuantity);
        jPanel8.add(moCompPrepConQuantity);

        moCompPrepConVariable1.setToolTipText("Variable 1");
        moCompPrepConVariable1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(moCompPrepConVariable1);

        jpPrepConsData.add(jPanel8);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPrepConLot.setText("Lote:*");
        jlPrepConLot.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel12.add(jlPrepConLot);
        jPanel12.add(moTextPrepConLot);

        jLabel3.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel12.add(jLabel3);

        jbPrepConAdd.setText("+");
        jbPrepConAdd.setToolTipText("Agregar");
        jbPrepConAdd.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbPrepConAdd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbPrepConAdd);

        jbPrepConClear.setText("!");
        jbPrepConClear.setToolTipText("Limpiar");
        jbPrepConClear.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbPrepConClear.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbPrepConClear);

        jpPrepConsData.add(jPanel12);

        jpPrepCons.add(jpPrepConsData, java.awt.BorderLayout.NORTH);

        jpPrepConsGrid.setLayout(new java.awt.BorderLayout());
        jpPrepCons.add(jpPrepConsGrid, java.awt.BorderLayout.CENTER);

        jpPrep.add(jpPrepCons);

        jpPrepMfg.setBorder(javax.swing.BorderFactory.createTitledBorder("Producción:"));
        jpPrepMfg.setLayout(new java.awt.BorderLayout(0, 5));

        jpPrepMfgData.setLayout(new java.awt.GridLayout(5, 0, 0, 5));

        jPanel28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPrepMfgLinePrep.setText("Línea:*");
        jlPrepMfgLinePrep.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel28.add(jlPrepMfgLinePrep);

        moKeyPrepMfgLinePrep.setPreferredSize(new java.awt.Dimension(240, 23));
        jPanel28.add(moKeyPrepMfgLinePrep);

        jpPrepMfgData.add(jPanel28);

        jPanel31.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPrepMfgLinePrepItem.setText("Producto:*");
        jlPrepMfgLinePrepItem.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel31.add(jlPrepMfgLinePrepItem);

        moKeyPrepMfgLinePrepItem.setPreferredSize(new java.awt.Dimension(240, 23));
        jPanel31.add(moKeyPrepMfgLinePrepItem);

        jpPrepMfgData.add(jPanel31);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jpPrepMfgData.add(jPanel29);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPrepMfgQuantity.setText("Cantidad:*");
        jlPrepMfgQuantity.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel30.add(jlPrepMfgQuantity);
        jPanel30.add(moCompPrepMfgQuantity);

        moCompPrepMfgVariable1.setToolTipText("Variable 1");
        moCompPrepMfgVariable1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel30.add(moCompPrepMfgVariable1);

        jpPrepMfgData.add(jPanel30);

        jPanel32.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jLabel2.setPreferredSize(new java.awt.Dimension(180, 23));
        jPanel32.add(jLabel2);

        jLabel4.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel32.add(jLabel4);

        jbPrepMfgAdd.setText("+");
        jbPrepMfgAdd.setToolTipText("Agregar");
        jbPrepMfgAdd.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbPrepMfgAdd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel32.add(jbPrepMfgAdd);

        jbPrepMfgClear.setText("!");
        jbPrepMfgClear.setToolTipText("Limpiar");
        jbPrepMfgClear.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbPrepMfgClear.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel32.add(jbPrepMfgClear);

        jpPrepMfgData.add(jPanel32);

        jpPrepMfg.add(jpPrepMfgData, java.awt.BorderLayout.NORTH);

        jpPrepMfgGrid.setLayout(new java.awt.BorderLayout());
        jpPrepMfg.add(jpPrepMfgGrid, java.awt.BorderLayout.CENTER);

        jpPrep.add(jpPrepMfg);

        jtpJobSettings.addTab("Preparación", jpPrep);

        jpPack.setLayout(new java.awt.GridLayout(1, 3));

        jpPackRqmt.setBorder(javax.swing.BorderFactory.createTitledBorder("Insumos requeridos:"));
        jpPackRqmt.setLayout(new java.awt.BorderLayout());

        jpPackRqmtGrid.setLayout(new java.awt.BorderLayout());
        jpPackRqmt.add(jpPackRqmtGrid, java.awt.BorderLayout.CENTER);

        jpPack.add(jpPackRqmt);

        jpPackCons.setBorder(javax.swing.BorderFactory.createTitledBorder("Insumos consumidos:"));
        jpPackCons.setLayout(new java.awt.BorderLayout(0, 5));

        jpPackConsData.setLayout(new java.awt.GridLayout(5, 0, 0, 5));

        jPanel34.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPackConLinePack.setText("Línea:*");
        jlPackConLinePack.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel34.add(jlPackConLinePack);

        moKeyPackConLinePack.setPreferredSize(new java.awt.Dimension(240, 23));
        jPanel34.add(moKeyPackConLinePack);

        jpPackConsData.add(jPanel34);

        jPanel37.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPackConLinePackItem.setText("Producto:*");
        jlPackConLinePackItem.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel37.add(jlPackConLinePackItem);

        moKeyPackConLinePackItem.setPreferredSize(new java.awt.Dimension(240, 23));
        jPanel37.add(moKeyPackConLinePackItem);

        jpPackConsData.add(jPanel37);

        jPanel35.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPackConRequirement.setText("Insumo:*");
        jlPackConRequirement.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel35.add(jlPackConRequirement);

        moKeyPackConRequirement.setPreferredSize(new java.awt.Dimension(240, 23));
        jPanel35.add(moKeyPackConRequirement);

        jpPackConsData.add(jPanel35);

        jPanel36.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPackConQuantity.setText("Cantidad:*");
        jlPackConQuantity.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel36.add(jlPackConQuantity);
        jPanel36.add(moCompPackConQuantity);

        jpPackConsData.add(jPanel36);

        jPanel38.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPackConLot.setText("Lote:*");
        jlPackConLot.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel38.add(jlPackConLot);
        jPanel38.add(moTextPackConLot);

        jLabel5.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel38.add(jLabel5);

        jbPackConAdd.setText("+");
        jbPackConAdd.setToolTipText("Agregar");
        jbPackConAdd.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbPackConAdd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel38.add(jbPackConAdd);

        jbPackConClear.setText("!");
        jbPackConClear.setToolTipText("Limpiar");
        jbPackConClear.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbPackConClear.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel38.add(jbPackConClear);

        jpPackConsData.add(jPanel38);

        jpPackCons.add(jpPackConsData, java.awt.BorderLayout.NORTH);

        jpPackConsGrid.setLayout(new java.awt.BorderLayout());
        jpPackCons.add(jpPackConsGrid, java.awt.BorderLayout.CENTER);

        jpPack.add(jpPackCons);

        jpPackMfg.setBorder(javax.swing.BorderFactory.createTitledBorder("Producción:"));
        jpPackMfg.setLayout(new java.awt.BorderLayout(0, 5));

        jpPackMfgData.setLayout(new java.awt.GridLayout(5, 0, 0, 5));

        jPanel40.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPackMfgLinePack.setText("Línea:*");
        jlPackMfgLinePack.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel40.add(jlPackMfgLinePack);

        moKeyPackMfgLinePack.setPreferredSize(new java.awt.Dimension(240, 23));
        jPanel40.add(moKeyPackMfgLinePack);

        jpPackMfgData.add(jPanel40);

        jPanel43.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPackMfgLinePackItem.setText("Producto:*");
        jlPackMfgLinePackItem.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel43.add(jlPackMfgLinePackItem);

        moKeyPackMfgLinePackItem.setPreferredSize(new java.awt.Dimension(240, 23));
        jPanel43.add(moKeyPackMfgLinePackItem);

        jpPackMfgData.add(jPanel43);

        jPanel41.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jpPackMfgData.add(jPanel41);

        jPanel42.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPackMfgQuantity.setText("Cantidad:*");
        jlPackMfgQuantity.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel42.add(jlPackMfgQuantity);
        jPanel42.add(moCompPackMfgQuantity);

        jpPackMfgData.add(jPanel42);

        jPanel44.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jLabel6.setPreferredSize(new java.awt.Dimension(180, 23));
        jPanel44.add(jLabel6);

        jLabel7.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel44.add(jLabel7);

        jbPackMfgAdd.setText("+");
        jbPackMfgAdd.setToolTipText("Agregar");
        jbPackMfgAdd.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbPackMfgAdd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel44.add(jbPackMfgAdd);

        jbPackMfgClear.setText("!");
        jbPackMfgClear.setToolTipText("Limpiar");
        jbPackMfgClear.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbPackMfgClear.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel44.add(jbPackMfgClear);

        jpPackMfgData.add(jPanel44);

        jpPackMfg.add(jpPackMfgData, java.awt.BorderLayout.NORTH);

        jpPackMfgGrid.setLayout(new java.awt.BorderLayout());
        jpPackMfg.add(jpPackMfgGrid, java.awt.BorderLayout.CENTER);

        jpPack.add(jpPackMfg);

        jtpJobSettings.addTab("Envasado", jpPack);
        jtpJobSettings.addTab("Estadísticas", jpStat);

        jpContainer.add(jtpJobSettings, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbGoNextStatus;
    private javax.swing.JButton jbGoPrevStatus;
    private javax.swing.JButton jbPackConAdd;
    private javax.swing.JButton jbPackConClear;
    private javax.swing.JButton jbPackMfgAdd;
    private javax.swing.JButton jbPackMfgClear;
    private javax.swing.JButton jbPrepConAdd;
    private javax.swing.JButton jbPrepConClear;
    private javax.swing.JButton jbPrepMfgAdd;
    private javax.swing.JButton jbPrepMfgClear;
    private javax.swing.JButton jbProgPackAdd;
    private javax.swing.JButton jbProgPackClear;
    private javax.swing.JButton jbProgPrepAdd;
    private javax.swing.JButton jbProgPrepClear;
    private javax.swing.JLabel jlJobDate;
    private javax.swing.JLabel jlJobItem;
    private javax.swing.JLabel jlJobItemFamily;
    private javax.swing.JLabel jlJobLot;
    private javax.swing.JLabel jlJobStatus;
    private javax.swing.JLabel jlJobTimeEnd;
    private javax.swing.JLabel jlJobTimeStart;
    private javax.swing.JLabel jlJobType;
    private javax.swing.JLabel jlPackConLinePack;
    private javax.swing.JLabel jlPackConLinePackItem;
    private javax.swing.JLabel jlPackConLot;
    private javax.swing.JLabel jlPackConQuantity;
    private javax.swing.JLabel jlPackConRequirement;
    private javax.swing.JLabel jlPackMfgLinePack;
    private javax.swing.JLabel jlPackMfgLinePackItem;
    private javax.swing.JLabel jlPackMfgQuantity;
    private javax.swing.JLabel jlPrepConLinePrep;
    private javax.swing.JLabel jlPrepConLinePrepItem;
    private javax.swing.JLabel jlPrepConLot;
    private javax.swing.JLabel jlPrepConQuantity;
    private javax.swing.JLabel jlPrepConRequirement;
    private javax.swing.JLabel jlPrepMfgLinePrep;
    private javax.swing.JLabel jlPrepMfgLinePrepItem;
    private javax.swing.JLabel jlPrepMfgQuantity;
    private javax.swing.JLabel jlProgPackFormula;
    private javax.swing.JLabel jlProgPackLinePack;
    private javax.swing.JLabel jlProgPackLinePackItem;
    private javax.swing.JLabel jlProgPackLoads;
    private javax.swing.JLabel jlProgPackQuantity;
    private javax.swing.JLabel jlProgPrepFormula;
    private javax.swing.JLabel jlProgPrepLinePrep;
    private javax.swing.JLabel jlProgPrepLinePrepItem;
    private javax.swing.JLabel jlProgPrepLoads;
    private javax.swing.JLabel jlProgPrepQuantity;
    private javax.swing.JPanel jpContainer;
    private javax.swing.JPanel jpJob;
    private javax.swing.JPanel jpPack;
    private javax.swing.JPanel jpPackCons;
    private javax.swing.JPanel jpPackConsData;
    private javax.swing.JPanel jpPackConsGrid;
    private javax.swing.JPanel jpPackMfg;
    private javax.swing.JPanel jpPackMfgData;
    private javax.swing.JPanel jpPackMfgGrid;
    private javax.swing.JPanel jpPackRqmt;
    private javax.swing.JPanel jpPackRqmtGrid;
    private javax.swing.JPanel jpPrep;
    private javax.swing.JPanel jpPrepCons;
    private javax.swing.JPanel jpPrepConsData;
    private javax.swing.JPanel jpPrepConsGrid;
    private javax.swing.JPanel jpPrepMfg;
    private javax.swing.JPanel jpPrepMfgData;
    private javax.swing.JPanel jpPrepMfgGrid;
    private javax.swing.JPanel jpPrepRqmt;
    private javax.swing.JPanel jpPrepRqmtGrid;
    private javax.swing.JPanel jpProg;
    private javax.swing.JPanel jpProgPack;
    private javax.swing.JPanel jpProgPackData;
    private javax.swing.JPanel jpProgPackGrid;
    private javax.swing.JPanel jpProgPrep;
    private javax.swing.JPanel jpProgPrepData;
    private javax.swing.JPanel jpProgPrepGrid;
    private javax.swing.JPanel jpStat;
    private javax.swing.JTextField jtfJobNumber;
    private javax.swing.JTabbedPane jtpJobSettings;
    private sba.lib.gui.bean.DBeanCompoundField moCompPackConQuantity;
    private sba.lib.gui.bean.DBeanCompoundField moCompPackMfgQuantity;
    private sba.lib.gui.bean.DBeanCompoundField moCompPrepConQuantity;
    private sba.lib.gui.bean.DBeanCompoundField moCompPrepConVariable1;
    private sba.lib.gui.bean.DBeanCompoundField moCompPrepMfgQuantity;
    private sba.lib.gui.bean.DBeanCompoundField moCompPrepMfgVariable1;
    private sba.lib.gui.bean.DBeanCompoundField moCompProgPackQuantity;
    private sba.lib.gui.bean.DBeanCompoundField moCompProgPrepDefaultVariable1;
    private sba.lib.gui.bean.DBeanCompoundField moCompProgPrepQuantity;
    private sba.lib.gui.bean.DBeanFieldDate moDateJobDate;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecProgPackLoads;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecProgPrepLoads;
    private sba.lib.gui.bean.DBeanFieldKey moKeyJobItem;
    private sba.lib.gui.bean.DBeanFieldKey moKeyJobItemFamily;
    private sba.lib.gui.bean.DBeanFieldKey moKeyJobStatus;
    private sba.lib.gui.bean.DBeanFieldKey moKeyJobType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyPackConLinePack;
    private sba.lib.gui.bean.DBeanFieldKey moKeyPackConLinePackItem;
    private sba.lib.gui.bean.DBeanFieldKey moKeyPackConRequirement;
    private sba.lib.gui.bean.DBeanFieldKey moKeyPackMfgLinePack;
    private sba.lib.gui.bean.DBeanFieldKey moKeyPackMfgLinePackItem;
    private sba.lib.gui.bean.DBeanFieldKey moKeyPrepConLinePrep;
    private sba.lib.gui.bean.DBeanFieldKey moKeyPrepConLinePrepItem;
    private sba.lib.gui.bean.DBeanFieldKey moKeyPrepConRequirement;
    private sba.lib.gui.bean.DBeanFieldKey moKeyPrepMfgLinePrep;
    private sba.lib.gui.bean.DBeanFieldKey moKeyPrepMfgLinePrepItem;
    private sba.lib.gui.bean.DBeanFieldKey moKeyProgPackFormula;
    private sba.lib.gui.bean.DBeanFieldKey moKeyProgPackLinePack;
    private sba.lib.gui.bean.DBeanFieldKey moKeyProgPackLinePackItem;
    private sba.lib.gui.bean.DBeanFieldKey moKeyProgPrepFormula;
    private sba.lib.gui.bean.DBeanFieldKey moKeyProgPrepLinePrep;
    private sba.lib.gui.bean.DBeanFieldKey moKeyProgPrepLinePrepItem;
    private sba.lib.gui.bean.DBeanFieldText moTextJobLot;
    private sba.lib.gui.bean.DBeanFieldText moTextPackConLot;
    private sba.lib.gui.bean.DBeanFieldText moTextPrepConLot;
    private sba.lib.gui.bean.DBeanFieldDatetime moTimeJobTimeEnd;
    private sba.lib.gui.bean.DBeanFieldDatetime moTimeJobTimeStart;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 1040, 650);
        
        moKeyJobType.setKeySettings(miClient, DGuiUtils.getLabelName(jlJobType), true);
        moDateJobDate.setDateSettings(miClient, DGuiUtils.getLabelName(jlJobDate), true);
        moKeyJobItemFamily.setKeySettings(miClient, DGuiUtils.getLabelName(jlJobItemFamily), true);
        moKeyJobItem.setKeySettings(miClient, DGuiUtils.getLabelName(jlJobItem), true);
        moTextJobLot.setTextSettings(DGuiUtils.getLabelName(jlJobLot), 25);
        moTimeJobTimeStart.setDateSettings(miClient, DGuiUtils.getLabelName(jlJobTimeStart), true);
        moTimeJobTimeEnd.setDateSettings(miClient, DGuiUtils.getLabelName(jlJobTimeEnd), true);
        moKeyJobStatus.setKeySettings(miClient, DGuiUtils.getLabelName(jlJobStatus), true);

        moKeyProgPrepLinePrep.setKeySettings(miClient, DGuiUtils.getLabelName(jlProgPrepLinePrep), true);
        moKeyProgPrepLinePrepItem.setKeySettings(miClient, DGuiUtils.getLabelName(jlProgPrepLinePrepItem), true);
        moKeyProgPrepFormula.setKeySettings(miClient, DGuiUtils.getLabelName(jlProgPrepFormula), true);
        moDecProgPrepLoads.setDecimalSettings(DGuiUtils.getLabelName(jlProgPrepLoads), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCompProgPrepQuantity.setCompoundFieldSettings(miClient);
        moCompProgPrepQuantity.getField().setDecimalSettings(DGuiUtils.getLabelName(jlProgPrepQuantity), DGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCompProgPrepDefaultVariable1.setCompoundFieldSettings(miClient);
        moCompProgPrepDefaultVariable1.getField().setDecimalSettings(DGuiUtils.getLabelName(moCompProgPrepDefaultVariable1.getToolTipText()), DGuiConsts.GUI_TYPE_DEC_QTY, false);
        
        moKeyProgPackLinePack.setKeySettings(miClient, DGuiUtils.getLabelName(jlProgPackLinePack), true);
        moKeyProgPackLinePackItem.setKeySettings(miClient, DGuiUtils.getLabelName(jlProgPackLinePackItem), true);
        moKeyProgPackFormula.setKeySettings(miClient, DGuiUtils.getLabelName(jlProgPackFormula), true);
        moDecProgPackLoads.setDecimalSettings(DGuiUtils.getLabelName(jlProgPackLoads), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCompProgPackQuantity.setCompoundFieldSettings(miClient);
        moCompProgPackQuantity.getField().setDecimalSettings(DGuiUtils.getLabelName(jlProgPackQuantity), DGuiConsts.GUI_TYPE_DEC_QTY, false);
        
        moKeyPrepConLinePrep.setKeySettings(miClient, DGuiUtils.getLabelName(jlPrepConLinePrep), true);
        moKeyPrepConLinePrepItem.setKeySettings(miClient, DGuiUtils.getLabelName(jlPrepConLinePrepItem), true);
        moKeyPrepConRequirement.setKeySettings(miClient, DGuiUtils.getLabelName(jlPrepConRequirement), true);
        moCompPrepConQuantity.setCompoundFieldSettings(miClient);
        moCompPrepConQuantity.getField().setDecimalSettings(DGuiUtils.getLabelName(jlPrepConQuantity), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCompPrepConVariable1.setCompoundFieldSettings(miClient);
        moCompPrepConVariable1.getField().setDecimalSettings(DGuiUtils.getLabelName(moCompPrepConVariable1.getToolTipText()), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moTextPrepConLot.setTextSettings(DGuiUtils.getLabelName(jlPrepConLot), 25);
        
        moKeyPrepMfgLinePrep.setKeySettings(miClient, DGuiUtils.getLabelName(jlPrepMfgLinePrep), true);
        moKeyPrepMfgLinePrepItem.setKeySettings(miClient, DGuiUtils.getLabelName(jlPrepMfgLinePrepItem), true);
        moCompPrepMfgQuantity.setCompoundFieldSettings(miClient);
        moCompPrepMfgQuantity.getField().setDecimalSettings(DGuiUtils.getLabelName(jlPrepMfgQuantity), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCompPrepMfgVariable1.setCompoundFieldSettings(miClient);
        moCompPrepMfgVariable1.getField().setDecimalSettings(DGuiUtils.getLabelName(moCompPrepMfgVariable1.getToolTipText()), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        
        moKeyPackConLinePack.setKeySettings(miClient, DGuiUtils.getLabelName(jlPackConLinePack), true);
        moKeyPackConLinePackItem.setKeySettings(miClient, DGuiUtils.getLabelName(jlPackConLinePackItem), true);
        moKeyPackConRequirement.setKeySettings(miClient, DGuiUtils.getLabelName(jlPackConRequirement), true);
        moCompPackConQuantity.setCompoundFieldSettings(miClient);
        moCompPackConQuantity.getField().setDecimalSettings(DGuiUtils.getLabelName(jlPackConQuantity), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moTextPackConLot.setTextSettings(DGuiUtils.getLabelName(jlPackConLot), 25);
        
        moKeyPackMfgLinePack.setKeySettings(miClient, DGuiUtils.getLabelName(jlPackMfgLinePack), true);
        moKeyPackMfgLinePackItem.setKeySettings(miClient, DGuiUtils.getLabelName(jlPackMfgLinePackItem), true);
        moCompPackMfgQuantity.setCompoundFieldSettings(miClient);
        moCompPackMfgQuantity.getField().setDecimalSettings(DGuiUtils.getLabelName(jlPackMfgQuantity), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        
        moFields.addField(moKeyJobType);
        moFields.addField(moDateJobDate);
        moFields.addField(moKeyJobItemFamily);
        moFields.addField(moKeyJobItem);
        moFields.addField(moTextJobLot);
        moFields.addField(moTimeJobTimeStart);
        moFields.addField(moTimeJobTimeEnd);
        moFields.addField(moKeyJobStatus);
        
        moFields.addField(moKeyProgPrepLinePrep);
        moFields.addField(moKeyProgPrepLinePrepItem);
        moFields.addField(moKeyProgPrepFormula);
        moFields.addField(moDecProgPrepLoads);
        moFields.addField(moCompProgPrepQuantity.getField());
        moFields.addField(moCompProgPrepDefaultVariable1.getField());
        
        moFields.addField(moKeyProgPackLinePack);
        moFields.addField(moKeyProgPackLinePackItem);
        moFields.addField(moKeyProgPackFormula);
        moFields.addField(moDecProgPackLoads);
        moFields.addField(moCompProgPackQuantity.getField());
        
        moFields.addField(moKeyPrepConLinePrep);
        moFields.addField(moKeyPrepConLinePrepItem);
        moFields.addField(moKeyPrepConRequirement);
        moFields.addField(moCompPrepConQuantity.getField());
        moFields.addField(moCompPrepConVariable1.getField());
        moFields.addField(moTextPrepConLot);
        
        moFields.addField(moKeyPrepMfgLinePrep);
        moFields.addField(moKeyPrepMfgLinePrepItem);
        moFields.addField(moCompPrepMfgQuantity.getField());
        moFields.addField(moCompPrepMfgVariable1.getField());
        
        moFields.addField(moKeyPackConLinePack);
        moFields.addField(moKeyPackConLinePackItem);
        moFields.addField(moKeyPackConRequirement);
        moFields.addField(moCompPackConQuantity.getField());
        moFields.addField(moTextPackConLot);
        
        moFields.addField(moKeyPackMfgLinePack);
        moFields.addField(moKeyPackMfgLinePackItem);
        moFields.addField(moCompPackMfgQuantity.getField());
        
        moFields.setFormButton(jbSave);
        
        moConfig = (DDbConfig) miClient.getSession().getConfigCompany();
        
        moCompProgPrepDefaultVariable1.setCompoundText(moConfig.getVariable1());
        moCompPrepConVariable1.setCompoundText(moConfig.getVariable1());
        moCompPrepMfgVariable1.setCompoundText(moConfig.getVariable1());
        
        moGridProgPrep = new DGridPaneForm(miClient, mnFormType, DModConsts.M_JOB_PRP, msTitle) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, true);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[6];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CO, "Línea");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Producto");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Fórmula");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cantidad");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, ((DGuiClientApp) miClient).getVariable1() + " default");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };
        
        moGridProgPack = new DGridPaneForm(miClient, mnFormType, DModConsts.M_JOB_PCK, msTitle) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, true);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[5];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CO, "Línea");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Producto");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Fórmula");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cantidad");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };
        
        moGridPrepRqmt = new DGridPaneForm(miClient, mnFormType, DModConsts.M_JOB_PRP_REQ, msTitle) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[7];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CO, "Línea");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Producto");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CO, DGridConsts.COL_TITLE_TYPE + " insumo");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Insumo");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cant requerida");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cant consumida");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };
        
        moGridPrepCons = new DGridPaneForm(miClient, mnFormType, DModConsts.M_JOB_PRP_CON, msTitle) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, true);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[8];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CO, "Línea");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_INT_1B, "Programa");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CO, DGridConsts.COL_TITLE_TYPE + " insumo");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Insumo");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cantidad");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, ((DGuiClientApp) miClient).getVariable1());
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT, "Lote");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };
        
        moGridPrepMfg = new DGridPaneForm(miClient, mnFormType, DModConsts.M_JOB_PRP_MFG, msTitle) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, true);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[7];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CO, "Línea");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_INT_1B, "Programa");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CO, DGridConsts.COL_TITLE_TYPE + " producto");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Producto");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cantidad");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, ((DGuiClientApp) miClient).getVariable1());

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };
        
        moGridPackRqmt = new DGridPaneForm(miClient, mnFormType, DModConsts.M_JOB_PCK_REQ, msTitle) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[7];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CO, "Línea");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Producto");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CO, DGridConsts.COL_TITLE_TYPE + " insumo");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Insumo");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cant requerida");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cant consumida");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };
        
        moGridPackCons = new DGridPaneForm(miClient, mnFormType, DModConsts.M_JOB_PCK_CON, msTitle) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, true);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[7];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CO, "Línea");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_INT_1B, "Programa");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CO, DGridConsts.COL_TITLE_TYPE + " insumo");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Insumo");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cantidad");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT, "Lote");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };
        
        moGridPackMfg = new DGridPaneForm(miClient, mnFormType, DModConsts.M_JOB_PCK_MFG, msTitle) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, true);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[6];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CO, "Línea");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_INT_1B, "#");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CO, DGridConsts.COL_TITLE_TYPE + " producto");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Producto");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cantidad");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridProgPrep.setPaneFormOwner(this);
        moGridProgPack.setPaneFormOwner(this);
        moGridPrepRqmt.setPaneFormOwner(this);
        moGridPrepCons.setPaneFormOwner(this);
        moGridPrepMfg.setPaneFormOwner(this);
        moGridPackRqmt.setPaneFormOwner(this);
        moGridPackCons.setPaneFormOwner(this);
        moGridPackMfg.setPaneFormOwner(this);
        
        jpProgPrepGrid.add(moGridProgPrep, BorderLayout.CENTER);
        jpProgPackGrid.add(moGridProgPack, BorderLayout.CENTER);
        jpPrepRqmtGrid.add(moGridPrepRqmt, BorderLayout.CENTER);
        jpPrepConsGrid.add(moGridPrepCons, BorderLayout.CENTER);
        jpPrepMfgGrid.add(moGridPrepMfg, BorderLayout.CENTER);
        jpPackRqmtGrid.add(moGridPackRqmt, BorderLayout.CENTER);
        jpPackConsGrid.add(moGridPackCons, BorderLayout.CENTER);
        jpPackMfgGrid.add(moGridPackMfg, BorderLayout.CENTER);
        
        mvFormGrids.add(moGridProgPrep);
        mvFormGrids.add(moGridProgPack);
        mvFormGrids.add(moGridPrepRqmt);
        mvFormGrids.add(moGridPrepCons);
        mvFormGrids.add(moGridPrepMfg);
        mvFormGrids.add(moGridPackRqmt);
        mvFormGrids.add(moGridPackCons);
        mvFormGrids.add(moGridPackMfg);
        
        moKeyGroupJobItem = new DGuiFieldKeyGroup(miClient);
    }
    
    private boolean isJobTypePrepPack() {
        return mnJobType == DModSysConsts.MS_JOB_TP_PRP_PCK;
    }
    
    private boolean isJobStatusPending() {
        return mnJobStatus == DModSysConsts.MS_JOB_ST_PND;
    }
    
    /*
     * Private methods: update fields handlers
     */

    private void updateFieldsJobType() {
        jtpJobSettings.setSelectedIndex(0);
        
        if (moKeyJobType.getSelectedIndex() <= 0) {
            mnJobType = DLibConsts.UNDEFINED;
            
            jtpJobSettings.setEnabledAt(TAB_PREP, false);
            jtpJobSettings.setEnabledAt(TAB_PACK, false);
            jtpJobSettings.setEnabledAt(TAB_STAT, false);
        }
        else {
            mnJobType = moKeyJobType.getValue()[0];
            
            switch (mnJobType) {
                case DModSysConsts.MS_JOB_TP_PRP_PCK:
                    jtpJobSettings.setEnabledAt(TAB_PREP, true);
                    jtpJobSettings.setEnabledAt(TAB_PACK, true);
                    jtpJobSettings.setEnabledAt(TAB_STAT, true);
                    break;
                case DModSysConsts.MS_JOB_TP_PCK:
                    jtpJobSettings.setEnabledAt(TAB_PREP, false);
                    jtpJobSettings.setEnabledAt(TAB_PACK, true);
                    jtpJobSettings.setEnabledAt(TAB_STAT, true);
                    break;
                default:
            }
        }
    }
    
    private void updateFieldsJobStatus() {
        mnJobStatus = moKeyJobStatus.getSelectedIndex() <= 0 ? DModSysConsts.MS_JOB_ST_PND : moKeyJobStatus.getValue()[0];
        
        moKeyJobStatus.setEnabled(false);
        jbGoPrevStatus.setEnabled(moKeyJobStatus.getSelectedIndex() > 1);
        jbGoNextStatus.setEnabled(moKeyJobStatus.getSelectedIndex() < (moKeyJobStatus.getItemCount() - 1));
        
        switch (mnJobStatus) {
            case DModSysConsts.MS_JOB_ST_PND:
                moKeyJobType.setEnabled(true);
                moDateJobDate.setEditable(true);
                moKeyJobItemFamily.setEditable(true);
                moKeyJobItem.setEditable(moKeyJobItemFamily.getSelectedIndex() > 0);
                moTextJobLot.setEditable(false);
                moTimeJobTimeStart.setEditable(false);
                moTimeJobTimeEnd.setEditable(false);
                break;
            case DModSysConsts.MS_JOB_ST_PRC:
                moKeyJobType.setEnabled(false);
                moDateJobDate.setEditable(false);
                moKeyJobItemFamily.setEditable(false);
                moKeyJobItem.setEditable(false);
                moTextJobLot.setEditable(true);
                moTimeJobTimeStart.setEditable(true);
                moTimeJobTimeEnd.setEditable(true);
                break;
            case DModSysConsts.MS_JOB_ST_FIN:
            case DModSysConsts.MS_JOB_ST_CAN:
                moKeyJobType.setEnabled(false);
                moDateJobDate.setEditable(false);
                moKeyJobItemFamily.setEditable(false);
                moKeyJobItem.setEditable(false);
                moTextJobLot.setEditable(false);
                moTimeJobTimeStart.setEditable(false);
                moTimeJobTimeEnd.setEditable(false);
                break;
            default:
        }
    }
    
    private void updateFieldsJobItemFamily() {
        if (moKeyJobItemFamily.getSelectedIndex() <= 0 || !isJobTypePrepPack() || !isJobStatusPending()) {
            moKeyProgPrepLinePrep.setEnabled(false);
        }
        else {
            moKeyProgPrepLinePrep.setEnabled(true);
        }
    }
    
    private void updateFieldsJobItem() {
        
    }
    
    private void updateFieldsProgPrepLinePrep() {
        if (moKeyProgPrepLinePrep.getSelectedIndex() <= 0) {
            moKeyProgPrepLinePrepItem.setEnabled(false);
            
            moKeyProgPackLinePack.setEnabled(false);
        }
        else {
            moKeyProgPrepLinePrepItem.setEnabled(false);    // remains disabled
            
            moKeyProgPackLinePack.setEnabled(true);
        }
    }
    
    private void updateFieldsProgPrepLinePrepItem() {
        if (moKeyProgPrepLinePrepItem.getSelectedIndex() <= 0 || !isJobTypePrepPack() || !isJobStatusPending()) {
            moKeyProgPrepFormula.setEnabled(false);
        }
        else {
            moKeyProgPrepFormula.setEnabled(true);
        }
    }
    
    private void updateFieldsProgPrepFormula() {
        moCompProgPrepQuantity.setEnabled(false);   // remains disabled
        
        if (moKeyProgPrepFormula.getSelectedIndex() <= 0) {
            moFormulaPrep = null;
        }
        else {
            moFormulaPrep = (DDbFormula) miClient.getSession().readRegistry(DModConsts.MU_FRM, moKeyProgPrepFormula.getValue());
        }
        
        if (moFormulaPrep == null) {
            moDecProgPrepLoads.setEditable(false);
            moCompProgPrepDefaultVariable1.setEditable(false);
        }
        else {
            moDecProgPrepLoads.setEditable(moFormulaPrep.getFkFormulaTypeId() == DModSysConsts.MS_FRM_TP_STD);
            moCompProgPrepDefaultVariable1.setEditable(moFormulaPrep.isQuantityVariable1());
        }
    }
    
    private void updateFieldsProgPackLinePack() {
        if (moKeyProgPackLinePack.getSelectedIndex() <= 0) {
            moKeyProgPackLinePackItem.setEnabled(false);
        }
        else {
            moKeyProgPackLinePackItem.setEnabled(true);
        }
    }
    
    private void updateFieldsProgPackLinePackItem() {
        if (moKeyProgPackLinePackItem.getSelectedIndex() <= 0 || !isJobStatusPending()) {
            moKeyProgPackFormula.setEnabled(false);
        }
        else {
            moKeyProgPackFormula.setEnabled(true);
        }
    }
    
    private void updateFieldsProgPackFormula() {
        moCompProgPackQuantity.setEnabled(false);   // remains disabled
        
        if (moKeyProgPackFormula.getSelectedIndex() <= 0) {
            moFormulaPack = null;
        }
        else {
            moFormulaPack = (DDbFormula) miClient.getSession().readRegistry(DModConsts.MU_FRM, moKeyProgPackFormula.getValue());
        }
        
        if (moFormulaPack == null) {
            moDecProgPackLoads.setEditable(false);
        }
        else {
            moDecProgPackLoads.setEditable(moFormulaPack.getFkFormulaTypeId() == DModSysConsts.MS_FRM_TP_STD);
        }
    }
    
    private void updateFieldsPrepConLinePrep() {
        if (moKeyPrepConLinePrep.getSelectedIndex() <= 0) {
            moKeyPrepConLinePrepItem.setEnabled(false);
        }
        else {
            moKeyPrepConLinePrepItem.setEnabled(true);
        }
    }
    
    private void updateFieldsPrepConLinePrepItem() {
        if (moKeyPrepConLinePrepItem.getSelectedIndex() <= 0) {
            moKeyPrepConRequirement.setEnabled(false);
        }
        else {
            moKeyPrepConRequirement.setEnabled(true);
        }
    }
    
    private void updateFieldsPrepConRequirement() {
        if (moKeyPrepConRequirement.getSelectedIndex() <= 0) {
            moCompPrepConQuantity.setEditable(false);
            moCompPrepConVariable1.setEditable(false);
            moTextPrepConLot.setEditable(false);
        }
        else {
            moCompPrepConQuantity.setEditable(true);
            moCompPrepConVariable1.setEditable(true);
            moTextPrepConLot.setEditable(true);
        }
    }
    
    private void updateFieldsPrepMfgLinePrep() {
        if (moKeyPrepMfgLinePrep.getSelectedIndex() <= 0) {
            moKeyPrepMfgLinePrepItem.setEnabled(false);
        }
        else {
            moKeyPrepMfgLinePrepItem.setEnabled(true);
        }
    }
    
    private void updateFieldsPrepMfgLinePrepItem() {
        if (moKeyPrepMfgLinePrepItem.getSelectedIndex() <= 0) {
            moCompPrepMfgQuantity.setEditable(false);
            moCompPrepMfgVariable1.setEditable(false);
        }
        else {
            moCompPrepMfgQuantity.setEditable(true);
            moCompPrepMfgVariable1.setEditable(true);
        }
    }
    
    private void updateFieldsPackConLinePack() {
        if (moKeyPackConLinePack.getSelectedIndex() <= 0) {
            moKeyPackConLinePackItem.setEnabled(false);
        }
        else {
            moKeyPackConLinePackItem.setEnabled(true);
        }
    }
    
    private void updateFieldsPackConLinePackItem() {
        if (moKeyPackConLinePackItem.getSelectedIndex() <= 0) {
            moKeyPackConRequirement.setEnabled(false);
        }
        else {
            moKeyPackConRequirement.setEnabled(true);
        }
    }
    
    private void updateFieldsPackConRequirement() {
        if (moKeyPackConRequirement.getSelectedIndex() <= 0) {
            moCompPackConQuantity.setEditable(false);
            moTextPackConLot.setEditable(false);
        }
        else {
            moCompPackConQuantity.setEditable(true);
            moTextPackConLot.setEditable(true);
        }
    }
    
    private void updateFieldsPackMfgLinePack() {
        if (moKeyPackMfgLinePack.getSelectedIndex() <= 0) {
            moKeyPackMfgLinePackItem.setEnabled(false);
        }
        else {
            moKeyPackMfgLinePackItem.setEnabled(true);
        }
    }
    
    private void updateFieldsPackMfgLinePackItem() {
        if (moKeyPackMfgLinePackItem.getSelectedIndex() <= 0) {
            moCompPackMfgQuantity.setEditable(false);
        }
        else {
            moCompPackMfgQuantity.setEditable(true);
        }
    }
    
    /*
     * Private methods: clear fields handlers
     */

    private void clearFieldsProgPrep(boolean preserveLine) {
        if (!preserveLine) {
            moKeyProgPrepLinePrep.resetField();
        }
        moKeyProgPrepFormula.resetField();
    }
    
    private void clearFieldsProgPack(boolean preserveLine) {
        if (!preserveLine) {
            moKeyProgPackLinePack.resetField();
        }
        moKeyProgPackFormula.resetField();
    }
    
    private void clearFieldsPrepCon() {
        moKeyPrepConLinePrep.resetField();
    }
    
    private void clearFieldsPrepMfg() {
        moKeyPrepMfgLinePrep.resetField();
    }
    
    private void clearFieldsPackCon() {
        moKeyPackConLinePack.resetField();
    }
    
    private void clearFieldsPackMfg() {
        moKeyPackMfgLinePack.resetField();
    }
    
    /*
     * Private methods: miscelaneous methods
     */

    private void computeProgPrepQuantity() {
        moCompProgPrepQuantity.getField().setValue(moFormulaPrep == null ? 0d : moFormulaPrep.getQuantity() * moDecProgPrepLoads.getValue());
    }
    
    private void computeProgPackQuantity() {
        moCompProgPackQuantity.getField().setValue(moFormulaPack == null ? 0d : moFormulaPack.getQuantity() * moDecProgPackLoads.getValue());
    }
    
    private void computeDeletionProgPrepLine(DRowJobProg rowJobProg) {
        int index = moGridPrepRqmt.getTable().getSelectedRow();
        DDbJobLinePrepRqmt prepRqmt = null;
        ArrayList<DRowJobRqmt> rowJobRqmts = new ArrayList<>();
        
        for (int i = 0; i < moGridPrepRqmt.getModel().getRowCount(); i++) {
            prepRqmt = (DDbJobLinePrepRqmt) ((DRowJobRqmt) moGridPrepRqmt.getGridRow(i)).getJobRqmt();
            if (DLibUtils.compareKeys(rowJobProg.getRowPrimaryKey(), new int[] { prepRqmt.getPkJobId(), prepRqmt.getPkLinePrepId(), prepRqmt.getPkPrepId() })) {
                rowJobRqmts.add((DRowJobRqmt) moGridPrepRqmt.getGridRow(i));
            }
        }
        
        for (DRowJobRqmt row : rowJobRqmts) {
            moGridPrepRqmt.getModel().getGridRows().remove(row);
        }
        
        moGridPrepRqmt.renderGridRows();
        
        if (moGridPrepRqmt.getTable().getRowCount() > 0) {
            moGridPrepRqmt.setSelectedGridRow(index <= moGridPrepRqmt.getTable().getRowCount() ? index : moGridPrepRqmt.getTable().getRowCount());
        }
        
        populateProgPrepLineItems();
    }
    
    private void computeDeletionProgPackLine(DRowJobProg rowJobProg) {
        int index = moGridPackRqmt.getTable().getSelectedRow();
        DDbJobLinePackRqmt prepRqmt = null;
        ArrayList<DRowJobRqmt> rowJobRqmts = new ArrayList<>();
        
        for (int i = 0; i < moGridPackRqmt.getModel().getRowCount(); i++) {
            prepRqmt = (DDbJobLinePackRqmt) ((DRowJobRqmt) moGridPackRqmt.getGridRow(i)).getJobRqmt();
            if (DLibUtils.compareKeys(rowJobProg.getRowPrimaryKey(), new int[] { prepRqmt.getPkJobId(), prepRqmt.getPkLinePackId(), prepRqmt.getPkPackId() })) {
                rowJobRqmts.add((DRowJobRqmt) moGridPackRqmt.getGridRow(i));
            }
        }
        
        for (DRowJobRqmt row : rowJobRqmts) {
            moGridPackRqmt.getModel().getGridRows().remove(row);
        }
        
        moGridPackRqmt.renderGridRows();
        
        if (moGridPackRqmt.getTable().getRowCount() > 0) {
            moGridPackRqmt.setSelectedGridRow(index <= moGridPackRqmt.getTable().getRowCount() ? index : moGridPackRqmt.getTable().getRowCount());
        }
        
        populateProgPackLineItems();
    }
    
    private DGuiValidation validateFields(final ArrayList<DGuiField> fields) {
        DGuiValidation validation = new DGuiValidation();
        
        for (DGuiField field : fields) {
            validation = field.validateField();
            if (!validation.isValid()) {
                break;
            }
        }
        
        return validation;
    }
    
    private DGuiValidation validateProg(final DGridPaneForm grid, final int[] progKey) {
        DGuiValidation validation = new DGuiValidation();
        
        for (DGridRow row : grid.getModel().getGridRows()) {
            if (DLibUtils.compareKeys(progKey, ((DRowJobProg) row).getRowPrimaryKey())) {
                validation.setMessage(DDbConsts.ERR_MSG_REG_ALLREADY_EXISTS);
                break;
            }
        }
        
        return validation;
    }
    
    private ArrayList<DGuiItem> createProgLineGuiItems(DGridPaneForm grid, String tag) {
        DRowJobProgMask rowJob = null;
        HashMap<Integer, DGuiItem> map = new HashMap<>();
        
        map.put(DLibConsts.UNDEFINED, new DGuiItem(null, "(" + DUtilConsts.TXT_SELECT + " " + tag + ")"));
        
        for (DGridRow row : grid.getModel().getGridRows()) {
            rowJob = ((DRowJobProg) row).getJobProg();
            if (!map.containsKey(rowJob.getLineId())) {
                map.put(rowJob.getLineId(), new DGuiItem(new int[] { rowJob.getLineId() }, rowJob.getLineName()));
            }
        }
        
        return new ArrayList<DGuiItem>(map.values());
    }
    
    private void populateProgPrepLineItems() {
        ArrayList<DGuiItem> items = createProgLineGuiItems(moGridProgPrep, DGuiUtils.getLabelName(jlPrepConLinePrep));

        moKeyPrepConLinePrep.removeAllItems();
        moKeyPrepMfgLinePrep.removeAllItems();

        for (DGuiItem gi : items) {
            moKeyPrepConLinePrep.addItem(gi);
            moKeyPrepMfgLinePrep.addItem(gi);
        }
    }
    
    private void populateProgPackLineItems() {
        ArrayList<DGuiItem> items = createProgLineGuiItems(moGridProgPack, DGuiUtils.getLabelName(jlPackConLinePack));

        moKeyPackConLinePack.removeAllItems();
        moKeyPackMfgLinePack.removeAllItems();

        for (DGuiItem gi : items) {
            moKeyPackConLinePack.addItem(gi);
            moKeyPackMfgLinePack.addItem(gi);
        }
    }
    
    /*
     * Private methods: action performed handlers
     */

    private void actionPerformedGoPrevStatus() {
        int index = moKeyJobStatus.getSelectedIndex();
        
        if (index > 1) {
            moKeyJobStatus.setSelectedIndex(--index);
            itemStateChangedJobStatus();    // field moKeyJobStatus is disabled
            
            jbGoNextStatus.setEnabled(true);
            if (index == 1) {
                jbGoPrevStatus.setEnabled(false);
            }
        }
    }
    
    private void actionPerformedGoNextStatus() {
        int index = moKeyJobStatus.getSelectedIndex();
        
        if (index < (moKeyJobStatus.getItemCount() - 1)) {
            moKeyJobStatus.setSelectedIndex(++index);
            itemStateChangedJobStatus();    // field moKeyJobStatus is disabled
            
            jbGoPrevStatus.setEnabled(true);
            if (index == (moKeyJobStatus.getItemCount() - 1)) {
                jbGoNextStatus.setEnabled(false);
            }
        }
    }
    
    private void actionPerformedProgPrepAdd() {
        ArrayList<DGuiField> fields = new ArrayList<>();
        ArrayList<DRowJobRqmtMask> rqmts = new ArrayList<>();
        DGuiValidation validation = null;
        DDbJobLinePrep jobLinePrep = null;
        DDbItem item = null;
        
        fields.add(moKeyProgPrepLinePrep);
        fields.add(moKeyProgPrepLinePrepItem);
        fields.add(moKeyProgPrepFormula);
        fields.add(moDecProgPrepLoads);
        fields.add(moCompProgPrepQuantity.getField());
        fields.add(moCompProgPrepDefaultVariable1.getField());
        
        validation = validateFields(fields);
        if (DGuiUtils.computeValidation(miClient, validation)) {
            
            validation = validateProg(moGridProgPrep, new int[] { moRegistry.getPkJobId(), moKeyProgPrepLinePrep.getValue()[0] });
            if (DGuiUtils.computeValidation(miClient, validation)) {
                item = (DDbItem) miClient.getSession().readRegistry(DModConsts.CU_ITM, moKeyProgPrepLinePrepItem.getValue());

                jobLinePrep = new DDbJobLinePrep();
                jobLinePrep.setPkJobId(moRegistry.getPkJobId());
                jobLinePrep.setPkLinePrepId(moKeyProgPrepLinePrep.getValue()[0]);
                jobLinePrep.setPkPrepId(moGridProgPrep.getModel().getRowCount() + 1);
                jobLinePrep.setLoads(moDecProgPrepLoads.getValue());
                jobLinePrep.setDefaultVariable1(moCompProgPrepDefaultVariable1.getField().getValue());
                jobLinePrep.setQuantity(moCompProgPrepQuantity.getField().getValue());
                jobLinePrep.setMassUnit(item.getMassUnit());
                jobLinePrep.setMass_r(item.getMassUnit() * moCompProgPrepQuantity.getField().getValue());
                jobLinePrep.setPackagingFactor(0);
                jobLinePrep.setQuantityVariable1(moFormulaPrep.isQuantityVariable1());
                jobLinePrep.setFkItemTypeId(item.getXtaFkItemTypeId());
                jobLinePrep.setFkItemId(item.getPkItemId());
                jobLinePrep.setFkUnitId(item.getFkUnitId());
                jobLinePrep.setFkFormulaTypeId(moFormulaPrep.getFkFormulaTypeId());
                jobLinePrep.setFkFormulaId(moFormulaPrep.getPkFormulaId());
                jobLinePrep.setXtaLinePrepCode((String) moKeyProgPrepLinePrep.getSelectedItem().getComplement());
                jobLinePrep.setXtaLinePrepName((String) moKeyProgPrepLinePrep.getSelectedItem().getItem());
                jobLinePrep.setXtaItemCode(item.getCode());
                jobLinePrep.setXtaItemName(item.getName());
                jobLinePrep.setXtaUnitCode(item.getXtaUnitCode());
                jobLinePrep.setXtaUnitName(item.getXtaUnitName());
                jobLinePrep.setXtaFormulaName(moFormulaPrep.getName());

                moGridProgPrep.addGridRow(new DRowJobProg(jobLinePrep));
                moGridProgPrep.renderGridRows();
                moGridProgPrep.setSelectedGridRow(moGridProgPrep.getTable().getRowCount() - 1);

                rqmts = jobLinePrep.createRqmts(miClient.getSession());
                for (DRowJobRqmtMask rqmt : rqmts) {
                    moGridPrepRqmt.addGridRow(new DRowJobRqmt(rqmt));
                }
                moGridPrepRqmt.renderGridRows();
                moGridPrepRqmt.setSelectedGridRow(moGridPrepRqmt.getTable().getRowCount() - 1);
                
                populateProgPrepLineItems();
                
                actionPerformedProgPrepClear(true);
            }
        }
    }
    
    private void actionPerformedProgPrepClear(boolean preserveLine) {
        clearFieldsProgPrep(preserveLine);
        moKeyProgPrepLinePrep.requestFocus();
    }

    private void actionPerformedProgPackAdd() {
        ArrayList<DGuiItem> items = new ArrayList<>();
        ArrayList<DGuiField> fields = new ArrayList<>();
        ArrayList<DRowJobRqmtMask> rqmts = new ArrayList<>();
        DGuiValidation validation = null;
        DDbJobLinePack jobLinePack = null;
        DDbItem item = null;
        
        fields.add(moKeyProgPackLinePack);
        fields.add(moKeyProgPackLinePackItem);
        fields.add(moKeyProgPackFormula);
        fields.add(moDecProgPackLoads);
        fields.add(moCompProgPackQuantity.getField());
        
        validation = validateFields(fields);
        
        if (DGuiUtils.computeValidation(miClient, validation)) {
            
            validation = validateProg(moGridProgPack, new int[] { moRegistry.getPkJobId(), moKeyProgPackLinePack.getValue()[0] });
            if (DGuiUtils.computeValidation(miClient, validation)) {
                item = (DDbItem) miClient.getSession().readRegistry(DModConsts.CU_ITM, moKeyProgPackLinePackItem.getValue());

                jobLinePack = new DDbJobLinePack();
                jobLinePack.setPkJobId(moRegistry.getPkJobId());
                jobLinePack.setPkLinePackId(moKeyProgPackLinePack.getValue()[0]);
                jobLinePack.setPkPackId(moGridProgPack.getModel().getRowCount() + 1);
                jobLinePack.setLoads(moDecProgPackLoads.getValue());
                jobLinePack.setQuantity(moCompProgPackQuantity.getField().getValue());
                jobLinePack.setMassUnit(item.getMassUnit());
                jobLinePack.setMass_r(item.getMassUnit() * moCompProgPackQuantity.getField().getValue());
                jobLinePack.setFkItemTypeId(item.getXtaFkItemTypeId());
                jobLinePack.setFkItemId(item.getPkItemId());
                jobLinePack.setFkUnitId(item.getFkUnitId());
                jobLinePack.setFkPresentId(item.getFkPresentId());
                jobLinePack.setFkFormulaTypeId(moFormulaPack.getFkFormulaTypeId());
                jobLinePack.setFkFormulaId(moFormulaPack.getPkFormulaId());
                jobLinePack.setXtaLinePackCode((String) moKeyProgPackLinePack.getSelectedItem().getComplement());
                jobLinePack.setXtaLinePackName((String) moKeyProgPackLinePack.getSelectedItem().getItem());
                jobLinePack.setXtaItemCode(item.getCode());
                jobLinePack.setXtaItemName(item.getName());
                jobLinePack.setXtaUnitCode(item.getXtaUnitCode());
                jobLinePack.setXtaUnitName(item.getXtaUnitName());
                jobLinePack.setXtaFormulaName(moFormulaPack.getName());

                moGridProgPack.addGridRow(new DRowJobProg(jobLinePack));
                moGridProgPack.renderGridRows();
                moGridProgPack.setSelectedGridRow(moGridProgPack.getTable().getRowCount() - 1);

                rqmts = jobLinePack.createRqmts(miClient.getSession());
                for (DRowJobRqmtMask rqmt : rqmts) {
                    moGridPackRqmt.addGridRow(new DRowJobRqmt(rqmt));
                }
                moGridPackRqmt.renderGridRows();
                moGridPackRqmt.setSelectedGridRow(moGridPackRqmt.getTable().getRowCount() - 1);

                populateProgPackLineItems();
                
                actionPerformedProgPackClear(true);
            }
        }
    }

    private void actionPerformedProgPackClear(boolean preserveLine) {
        clearFieldsProgPack(preserveLine);
        moKeyProgPackLinePack.requestFocus();
    }

    private void actionPerformedPrepConAdd() {
        
    }

    private void actionPerformedPrepConClear() {
        clearFieldsPrepCon();
        moKeyPrepConLinePrep.requestFocus();
    }

    private void actionPerformedPrepMfgAdd() {
        
    }

    private void actionPerformedPrepMfgClear() {
        clearFieldsPrepMfg();
        moKeyPrepMfgLinePrep.requestFocus();
    }

    private void actionPerformedPackConAdd() {
        
    }

    private void actionPerformedPackConClear() {
        clearFieldsPackCon();
        moKeyPackConLinePack.requestFocus();
    }

    private void actionPerformedPackMfgAdd() {
        
    }

    private void actionPerformedPackMfgClear() {
        clearFieldsPackMfg();
        moKeyPackMfgLinePack.requestFocus();
    }
    
    /*
     * Private methods: item state changed handlers
     */

    private void itemStateChangedJobType() {
        updateFieldsJobType();
        
        itemStateChangedJobItemFamily();
    }
    
    private void itemStateChangedJobStatus() {
        updateFieldsJobStatus();
        
        itemStateChangedJobItemFamily();
    }
    
    private void itemStateChangedJobItemFamily() {
        updateFieldsJobItemFamily();
        
        if (moKeyJobItemFamily.getSelectedIndex() <= 0 || !isJobTypePrepPack() || !isJobStatusPending()) {
            moKeyProgPrepLinePrep.removeAllItems();
        }
        else {
            miClient.getSession().populateCatalogue(moKeyProgPrepLinePrep, DModConsts.MX_LIN_PRP_BY_FAM, DLibConsts.UNDEFINED, new DGuiParams(moKeyJobItemFamily.getValue()));
        }
        
        itemStateChangedJobItem();
    }
    
    @SuppressWarnings("unchecked")
    private void itemStateChangedJobItem() {
        updateFieldsJobItem();
        
        moKeyProgPrepLinePrepItem.removeAllItems();
        
        if (moKeyJobItem.getSelectedIndex() > 0 && isJobTypePrepPack() && isJobStatusPending()) {
            moKeyProgPrepLinePrepItem.addItem(new DGuiItem(""));
            moKeyProgPrepLinePrepItem.addItem(moKeyJobItem.getSelectedItem());
            moKeyProgPrepLinePrepItem.setSelectedIndex(1);
        }
        
        itemStateChangedProgPrepLinePrep();
    }
    
    private void itemStateChangedProgPrepLinePrep() {
        updateFieldsProgPrepLinePrep();
        
        if (moKeyProgPrepLinePrep.getSelectedIndex() <= 0) {
            moKeyProgPackLinePack.removeAllItems();
        }
        else {
            miClient.getSession().populateCatalogue(moKeyProgPackLinePack, DModConsts.MX_LIN_PCK_BY_LIN_PRP, DLibConsts.UNDEFINED, new DGuiParams(moKeyProgPrepLinePrep.getValue()));
        }
        
        itemStateChangedProgPrepLinePrepItem();
        
        itemStateChangedProgPackLinePack();
    }
    
    private void itemStateChangedProgPrepLinePrepItem() {
        updateFieldsProgPrepLinePrepItem();
        
        moKeyProgPrepFormula.removeAllItems();
        moCompProgPrepQuantity.setCompoundText("");
        moCompProgPrepQuantity.getField().setValue(0d);
        
        if (moKeyProgPrepLinePrepItem.getSelectedIndex() > 0) {
            miClient.getSession().populateCatalogue(moKeyProgPrepFormula, DModConsts.MX_FRM_BY_ITM, DLibConsts.UNDEFINED, new DGuiParams(moKeyProgPrepLinePrepItem.getValue()));
            moCompProgPrepQuantity.setCompoundText(moKeyJobItem.getSelectedItem().getComplement().toString());
        }
        
        itemStateChangedProgPrepFormula();
    }
    
    private void itemStateChangedProgPrepFormula() {
        updateFieldsProgPrepFormula();
        
        if (moFormulaPrep == null) {
            moDecProgPrepLoads.setValue(0d);
            moCompProgPrepDefaultVariable1.getField().setValue(0d);
        }
        else {
            moDecProgPrepLoads.setValue(1d);
            moCompProgPrepDefaultVariable1.getField().setValue(moFormulaPrep.getDefaultVariable1());
        }
        
        computeProgPrepQuantity();
    }
    
    private void itemStateChangedProgPackLinePack() {
        updateFieldsProgPackLinePack();
        
        if (moKeyProgPackLinePack.getSelectedIndex() <= 0) {
            moKeyProgPackLinePackItem.removeAllItems();
        }
        else {
            DGuiParams params = new DGuiParams();
            params.getParamsMap().put(DModConsts.CU_ITM, moKeyProgPrepLinePrepItem.getValue()[0]);
            params.getParamsMap().put(DModConsts.MU_LIN_PCK, moKeyProgPackLinePack.getValue()[0]);
            miClient.getSession().populateCatalogue(moKeyProgPackLinePackItem, DModConsts.MX_PF_BY_PB_N_LIN_PCK, DLibConsts.UNDEFINED, params);
        }
        
        itemStateChangedProgPackLinePackItem();
    }
    
    private void itemStateChangedProgPackLinePackItem() {
        updateFieldsProgPackLinePackItem();
        
        moKeyProgPackFormula.removeAllItems();
        moCompProgPackQuantity.setCompoundText("");
        moCompProgPackQuantity.getField().setValue(0d);
        
        if (moKeyProgPackLinePackItem.getSelectedIndex() > 0) {
            miClient.getSession().populateCatalogue(moKeyProgPackFormula, DModConsts.MX_FRM_BY_ITM, DLibConsts.UNDEFINED, new DGuiParams(moKeyProgPackLinePackItem.getValue()));
            moCompProgPackQuantity.setCompoundText(moKeyProgPackLinePackItem.getSelectedItem().getComplement().toString());
        }
        
        itemStateChangedProgPackFormula();
    }
    
    private void itemStateChangedProgPackFormula() {
        updateFieldsProgPackFormula();
        
        if (moFormulaPack == null) {
            moDecProgPackLoads.setValue(0d);
        }
        else {
            moDecProgPackLoads.setValue(1d);
        }
        
        computeProgPackQuantity();
    }
    
    private void itemStateChangedPrepConLinePrep() {
        updateFieldsPrepConLinePrep();
        
        moKeyPrepConLinePrepItem.removeAllItems();
        
        if (moKeyPrepConLinePrep.getSelectedIndex() > 0) {
            
        }
        
        itemStateChangedPrepConLinePrepItem();
    }
    
    private void itemStateChangedPrepConLinePrepItem() {
        updateFieldsPrepConLinePrepItem();
        
        moKeyPrepConRequirement.removeAllItems();
        
        if (moKeyPrepConLinePrepItem.getSelectedIndex() > 0) {
            
        }
        
        itemStateChangedPrepConRequirement();
    }
    
    private void itemStateChangedPrepConRequirement() {
        updateFieldsPrepConRequirement();
        
        moCompPrepConQuantity.getField().setValue(0d);
        moCompPrepConVariable1.getField().setValue(0d);
        moTextPrepConLot.setValue("");
    }
    
    private void itemStateChangedPrepMfgLinePrep() {
        updateFieldsPrepMfgLinePrep();
        
        moKeyPrepMfgLinePrepItem.removeAllItems();
        
        if (moKeyPrepMfgLinePrep.getSelectedIndex() > 0) {
            
        }
        
        itemStateChangedPrepMfgLinePrepItem();
    }
    
    private void itemStateChangedPrepMfgLinePrepItem() {
        updateFieldsPrepMfgLinePrepItem();
        
        moCompPrepMfgQuantity.getField().setValue(0d);
        moCompPrepMfgVariable1.getField().setValue(0d);
    }
    
    private void itemStateChangedPackConLinePack() {
        updateFieldsPackConLinePack();
        
        moKeyPackConLinePackItem.removeAllItems();
        
        if (moKeyPackConLinePack.getSelectedIndex() > 0) {
            
        }
        
        itemStateChangedPackConLinePackItem();
    }
    
    private void itemStateChangedPackConLinePackItem() {
        updateFieldsPackConLinePackItem();
        
        moKeyPackConRequirement.removeAllItems();
        
        if (moKeyPackConLinePackItem.getSelectedIndex() > 0) {
            
        }
        
        itemStateChangedPackConRequirement();
    }
    
    private void itemStateChangedPackConRequirement() {
        updateFieldsPackConRequirement();
        
        moCompPackConQuantity.getField().setValue(0d);
        moTextPackConLot.setValue("");
    }
    
    private void itemStateChangedPackMfgLinePack() {
        updateFieldsPackMfgLinePack();
        
        moKeyPackMfgLinePackItem.removeAllItems();
        
        if (moKeyPackMfgLinePack.getSelectedIndex() > 0) {
            
        }
        
        itemStateChangedPackMfgLinePackItem();
    }
    
    private void itemStateChangedPackMfgLinePackItem() {
        updateFieldsPackMfgLinePackItem();
        
        moCompPackMfgQuantity.getField().setValue(0d);
    }
    
    /*
     * Private methods: focus gained handlers
     */

    /*
     * Private methods: focus lost handlers
     */

    private void focusLostProgPrepLoads() {
        computeProgPrepQuantity();
    }
    
    private void focusLostProgPackLoads() {
        computeProgPackQuantity();
    }
    
    /*
     * Public methods
     */
    
    /*
     * Overriden methods
     */
    
    @Override
    public void addAllListeners() {
        jbGoPrevStatus.addActionListener(this);
        jbGoNextStatus.addActionListener(this);
        jbProgPrepAdd.addActionListener(this);
        jbProgPrepClear.addActionListener(this);
        jbProgPackAdd.addActionListener(this);
        jbProgPackClear.addActionListener(this);
        jbPrepConAdd.addActionListener(this);
        jbPrepConClear.addActionListener(this);
        jbPrepMfgAdd.addActionListener(this);
        jbPrepMfgClear.addActionListener(this);
        jbPackConAdd.addActionListener(this);
        jbPackConClear.addActionListener(this);
        jbPackMfgAdd.addActionListener(this);
        jbPackMfgClear.addActionListener(this);
        
        moKeyJobType.addItemListener(this);
        moKeyJobItemFamily.addItemListener(this);
        moKeyJobItem.addItemListener(this);
        moKeyJobStatus.addItemListener(this);
        moKeyProgPrepLinePrep.addItemListener(this);
        moKeyProgPrepLinePrepItem.addItemListener(this);
        moKeyProgPrepFormula.addItemListener(this);
        moKeyProgPackLinePack.addItemListener(this);
        moKeyProgPackLinePackItem.addItemListener(this);
        moKeyProgPackFormula.addItemListener(this);
        moKeyPrepConLinePrep.addItemListener(this);
        moKeyPrepConLinePrepItem.addItemListener(this);
        moKeyPrepConRequirement.addItemListener(this);
        moKeyPrepMfgLinePrep.addItemListener(this);
        moKeyPrepMfgLinePrepItem.addItemListener(this);
        moKeyPackConLinePack.addItemListener(this);
        moKeyPackConLinePackItem.addItemListener(this);
        moKeyPackConRequirement.addItemListener(this);
        moKeyPackMfgLinePack.addItemListener(this);
        moKeyPackMfgLinePackItem.addItemListener(this);
        
        moDecProgPrepLoads.addFocusListener(this);
        moDecProgPackLoads.addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbGoPrevStatus.removeActionListener(this);
        jbGoNextStatus.removeActionListener(this);
        jbProgPrepAdd.removeActionListener(this);
        jbProgPrepClear.removeActionListener(this);
        jbProgPackAdd.removeActionListener(this);
        jbProgPackClear.removeActionListener(this);
        jbPrepConAdd.removeActionListener(this);
        jbPrepConClear.removeActionListener(this);
        jbPrepMfgAdd.removeActionListener(this);
        jbPrepMfgClear.removeActionListener(this);
        jbPackConAdd.removeActionListener(this);
        jbPackConClear.removeActionListener(this);
        jbPackMfgAdd.removeActionListener(this);
        jbPackMfgClear.removeActionListener(this);
        
        moKeyJobType.removeItemListener(this);
        moKeyJobItemFamily.removeItemListener(this);
        moKeyJobItem.removeItemListener(this);
        moKeyJobStatus.removeItemListener(this);
        moKeyProgPrepLinePrep.removeItemListener(this);
        moKeyProgPrepLinePrepItem.removeItemListener(this);
        moKeyProgPrepFormula.removeItemListener(this);
        moKeyProgPackLinePack.removeItemListener(this);
        moKeyProgPackLinePackItem.removeItemListener(this);
        moKeyProgPackFormula.removeItemListener(this);
        moKeyPrepConLinePrep.removeItemListener(this);
        moKeyPrepConLinePrepItem.removeItemListener(this);
        moKeyPrepConRequirement.removeItemListener(this);
        moKeyPrepMfgLinePrep.removeItemListener(this);
        moKeyPrepMfgLinePrepItem.removeItemListener(this);
        moKeyPackConLinePack.removeItemListener(this);
        moKeyPackConLinePackItem.removeItemListener(this);
        moKeyPackConRequirement.removeItemListener(this);
        moKeyPackMfgLinePack.removeItemListener(this);
        moKeyPackMfgLinePackItem.removeItemListener(this);
        
        moDecProgPrepLoads.removeFocusListener(this);
        moDecProgPackLoads.removeFocusListener(this);
    }

    @Override
    public void reloadCatalogues() {
        moKeyGroupJobItem.initGroup();
        moKeyGroupJobItem.addFieldKey(moKeyJobItemFamily, DModConsts.CU_FAM, DModSysConsts.CS_ITM_TP_PB, null);
        moKeyGroupJobItem.addFieldKey(moKeyJobItem, DModConsts.CU_ITM, DLibConsts.UNDEFINED, null);
        moKeyGroupJobItem.populateCatalogues();
        
        miClient.getSession().populateCatalogue(moKeyJobType, DModConsts.MS_JOB_TP, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyJobStatus, DModConsts.MS_JOB_ST, DLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        DDbItem item = null;
        DDbJobLinePrep linePrep = null;
        Vector<DGridRow> rows = new Vector<>();
        
        moRegistry = (DDbJob) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.setNumber(0);
            moRegistry.setDate(miClient.getSession().getWorkingDate());
            moRegistry.setJobStart(DLibTimeUtils.convertToDateOnly(miClient.getSession().getWorkingDate()));
            moRegistry.setJobEnd(DLibTimeUtils.convertToDateOnly(miClient.getSession().getWorkingDate()));
            //moRegistry.setFkJobTypeId(DModSysConsts.MS_JOB_TP_PRP_PCK);
            moRegistry.setFkJobStatusId(DModSysConsts.MS_JOB_ST_PND);
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            item = (DDbItem) miClient.getSession().readRegistry(DModConsts.CU_ITM, new int[] { moRegistry.getFkItemId() }, DDbConsts.MODE_STEALTH);
            jtfRegistryKey.setText(DLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        jtfJobNumber.setText(DLibUtils.DecimalFormatIntegerRaw.format(moRegistry.getNumber()));
        jtfJobNumber.setCaretPosition(0);
        moDateJobDate.setValue(moRegistry.getDate());
        moTextJobLot.setValue(moRegistry.getLot());
        moTimeJobTimeStart.setValue(moRegistry.getJobStart());
        moTimeJobTimeEnd.setValue(moRegistry.getJobEnd());
        
        moKeyJobType.setValue(new int[] { moRegistry.getFkJobTypeId() });
        itemStateChangedJobType();
        moKeyJobStatus.setValue(new int[] { moRegistry.getFkJobStatusId() });
        itemStateChangedJobStatus();
        moKeyJobItemFamily.setValue(new int[] { item == null ? DLibConsts.UNDEFINED : item.getFkItemFamilyId() });
        itemStateChangedJobItemFamily();
        moKeyJobItem.setValue(new int[] { moRegistry.getFkItemId() });
        itemStateChangedJobItem();
        
        if (!moRegistry.getChildPreps().isEmpty()) {
            linePrep = moRegistry.getChildPreps().get(0);
        }
        
        if (linePrep == null) {
            moKeyProgPrepLinePrep.resetField();
            moKeyProgPrepLinePrepItem.resetField();
            moKeyProgPrepFormula.resetField();
            moDecProgPrepLoads.resetField();
            moCompProgPrepQuantity.getField().resetField();
            moCompProgPrepDefaultVariable1.getField().resetField();
        }
        else {
            moKeyProgPrepLinePrep.setValue(new int[] { linePrep.getPkLinePrepId() });
            moKeyProgPrepLinePrepItem.setValue(new int[] { linePrep.getFkItemId() });
            moKeyProgPrepFormula.setValue(new int[] { linePrep.getFkFormulaId() });
            moDecProgPrepLoads.setValue(linePrep.getLoads());
            moCompProgPrepQuantity.getField().setValue(linePrep.getQuantity());
            moCompProgPrepDefaultVariable1.getField().setValue(linePrep.getDefaultVariable1());
        }
        
        rows.clear();
        for (DDbJobLinePrep child : moRegistry.getChildPreps()) {
            rows.add(new DRowJobProg(child));
        }
        
        moGridProgPrep.populateGrid(rows);

        rows.clear();
        for (DDbJobLinePack child : moRegistry.getChildPacks()) {
            rows.add(new DRowJobProg(child));
        }
        
        moGridProgPack.populateGrid(rows);
        
        rows.clear();
        moGridPrepRqmt.populateGrid(rows);

        rows.clear();
        moGridPrepCons.populateGrid(rows);

        rows.clear();
        moGridPrepMfg.populateGrid(rows);

        rows.clear();
        moGridPackRqmt.populateGrid(rows);

        rows.clear();
        moGridPackCons.populateGrid(rows);

        rows.clear();
        moGridPackMfg.populateGrid(rows);

        setFormEditable(true);
        
        if (moRegistry.isRegistryNew()) {
            moKeyJobItem.setEnabled(false);
        }
        
        updateFieldsJobType();
        updateFieldsJobStatus();
        updateFieldsJobItemFamily();
        updateFieldsJobItem();
        updateFieldsProgPrepLinePrep();
        updateFieldsProgPrepLinePrepItem();
        updateFieldsProgPrepFormula();
        updateFieldsProgPackLinePack();
        updateFieldsProgPackLinePackItem();
        updateFieldsProgPackFormula();

        addAllListeners();
    }

    @Override
    public DDbJob getRegistry() throws Exception {
        DDbJob registry = moRegistry.clone();

        if (registry.isRegistryNew()) { }

        //registry.setCode(moTextCode.getValue());
        //registry.setName(moTextName.getValue());

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        return moFields.validateFields();
    }

    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        if (gridType == mnFormType) {
            switch (gridSubtype) {
                case DModConsts.M_JOB_PRP:
                    computeDeletionProgPrepLine((DRowJobProg) gridRow);
                    break;
                case DModConsts.M_JOB_PRP_REQ:
                    break;
                case DModConsts.M_JOB_PRP_CON:
                    break;
                case DModConsts.M_JOB_PRP_MFG:
                    break;
                case DModConsts.M_JOB_PCK:
                    computeDeletionProgPackLine((DRowJobProg) gridRow);
                    break;
                case DModConsts.M_JOB_PCK_REQ:
                    break;
                case DModConsts.M_JOB_PCK_CON:
                    break;
                case DModConsts.M_JOB_PCK_MFG:
                    break;
                default:
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbGoPrevStatus) {
                actionPerformedGoPrevStatus();
            }
            else if (button == jbGoNextStatus) {
                actionPerformedGoNextStatus();
            }
            else if (button == jbProgPrepAdd) {
                actionPerformedProgPrepAdd();
            }
            else if (button == jbProgPrepClear) {
                actionPerformedProgPrepClear(false);
            }
            else if (button == jbProgPackAdd) {
                actionPerformedProgPackAdd();
            }
            else if (button == jbProgPackClear) {
                actionPerformedProgPackClear(false);
            }
            else if (button == jbPrepConAdd) {
                actionPerformedPrepConAdd();
            }
            else if (button == jbPrepConClear) {
                actionPerformedPrepConClear();
            }
            else if (button == jbPrepMfgAdd) {
                actionPerformedPrepMfgAdd();
            }
            else if (button == jbPrepMfgClear) {
                actionPerformedPrepMfgClear();
            }
            else if (button == jbPackConAdd) {
                actionPerformedPackConAdd();
            }
            else if (button == jbPackConClear) {
                actionPerformedPackConClear();
            }
            else if (button == jbPackMfgAdd) {
                actionPerformedPackMfgAdd();
            }
            else if (button == jbPackMfgClear) {
                actionPerformedPackMfgClear();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldKey) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldKey field = (DBeanFieldKey) e.getSource();
                
                if (field == moKeyJobType) {
                    itemStateChangedJobType();
                }
                else if (field == moKeyJobStatus) {
                    itemStateChangedJobStatus();
                }
                else if (field == moKeyJobItemFamily) {
                    itemStateChangedJobItemFamily();
                }
                else if (field == moKeyJobItem) {
                    itemStateChangedJobItem();
                }
                else if (field == moKeyProgPrepLinePrep) {
                    itemStateChangedProgPrepLinePrep();
                }
                else if (field == moKeyProgPrepLinePrepItem) {
                    itemStateChangedProgPrepLinePrepItem();
                }
                else if (field == moKeyProgPrepFormula) {
                    itemStateChangedProgPrepFormula();
                }
                else if (field == moKeyProgPackLinePack) {
                    itemStateChangedProgPackLinePack();
                }
                else if (field == moKeyProgPackLinePackItem) {
                    itemStateChangedProgPackLinePackItem();
                }
                else if (field == moKeyProgPackFormula) {
                    itemStateChangedProgPackFormula();
                }
                else if (field == moKeyPrepConLinePrep) {
                    itemStateChangedPrepConLinePrep();
                }
                else if (field == moKeyPrepConLinePrepItem) {
                    itemStateChangedPrepConLinePrepItem();
                }
                else if (field == moKeyPrepConRequirement) {
                    itemStateChangedPrepConRequirement();
                }
                else if (field == moKeyPrepMfgLinePrep) {
                    itemStateChangedPrepMfgLinePrep();
                }
                else if (field == moKeyPrepMfgLinePrepItem) {
                    itemStateChangedPrepMfgLinePrepItem();
                }
                else if (field == moKeyPackConLinePack) {
                    itemStateChangedPackConLinePack();
                }
                else if (field == moKeyPackConLinePackItem) {
                    itemStateChangedPackConLinePackItem();
                }
                else if (field == moKeyPackConRequirement) {
                    itemStateChangedPackConRequirement();
                }
                else if (field == moKeyPackMfgLinePack) {
                    itemStateChangedPackMfgLinePack();
                }
                else if (field == moKeyPackMfgLinePackItem) {
                    itemStateChangedPackMfgLinePackItem();
                }
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof DBeanFieldDecimal) {
            DBeanFieldDecimal field = (DBeanFieldDecimal) e.getSource();
            
            if (field == moDecProgPrepLoads) {
                focusLostProgPrepLoads();
            }
            else if (field == moDecProgPackLoads) {
                focusLostProgPackLoads();
            }
        }
    }
}
