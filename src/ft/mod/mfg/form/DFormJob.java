/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package ft.mod.mfg.form;

import ft.mod.DModConsts;
import ft.mod.DModSysConsts;
import ft.mod.cfg.db.DCfgUtils;
import ft.mod.cfg.db.DDbItem;
import ft.mod.mfg.db.DDbFormula;
import ft.mod.mfg.db.DDbFormulaComp;
import ft.mod.mfg.db.DDbJob;
import ft.mod.mfg.db.DDbJobConsump;
import ft.mod.mfg.db.DDbJobReqment;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridColumnForm;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridPaneFormOwner;
import sba.lib.grid.DGridRow;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiFieldKeyGroup;
import sba.lib.gui.DGuiFields;
import sba.lib.gui.DGuiParams;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldDecimal;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanForm;

/**
 *
 * @author Sergio Flores
 */
public class DFormJob extends DBeanForm implements DGridPaneFormOwner, ActionListener, ItemListener, FocusListener, ListSelectionListener {
    
    private static final int TAB_MFG = 1;
    private static final int TAB_QTY = 2;
    private static final int TAB_STS = 3;

    private DDbJob moRegistry;
    private DDbFormula moFormula;
    private DDbItem moItemConsump;
    private DDbItem moItemMfgProd;
    private int mnJobStatus;
    private String msCompTypeNameItm;
    private String msCompTypeNameFam;
    private HashMap<Integer, String> moMapStatus;
    private DGuiFields moFieldsConsump;
    private DGuiFields moFieldsMfgProd;
    private DGridPaneForm moGridReqments;
    private DGridPaneForm moGridConsumps;
    private DGridPaneForm moGridMfgProds;
    private DGuiFieldKeyGroup moKeyGroupJobFormula;
    private DGuiFieldKeyGroup moKeyGroupJobLine;
    private DGuiFieldKeyGroup moKeyGroupConsumpItem;
    private DGuiFieldKeyGroup moKeyGroupMfgProdItem;

    /** Creates new form DFormJob */
    public DFormJob(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.M_JOB, DLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContainer = new javax.swing.JPanel();
        jpJob = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jlJobNumber = new javax.swing.JLabel();
        jtfJobSeries = new javax.swing.JTextField();
        jtfJobNumber = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlJobDate = new javax.swing.JLabel();
        moDateJobDate = new sba.lib.gui.bean.DBeanFieldDate();
        jPanel6 = new javax.swing.JPanel();
        jlJobItemType = new javax.swing.JLabel();
        moKeyJobItemType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel11 = new javax.swing.JPanel();
        jlJobFamily = new javax.swing.JLabel();
        moKeyJobFamily = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel22 = new javax.swing.JPanel();
        jlJobItem = new javax.swing.JLabel();
        moKeyJobItem = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel18 = new javax.swing.JPanel();
        jlJobFormula = new javax.swing.JLabel();
        moKeyJobFormula = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel19 = new javax.swing.JPanel();
        jlJobLoads = new javax.swing.JLabel();
        moDecJobLoads = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel20 = new javax.swing.JPanel();
        jlJobQuantityFormula = new javax.swing.JLabel();
        moCompJobQuantityFormula = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel21 = new javax.swing.JPanel();
        jlJobQuantity = new javax.swing.JLabel();
        moCompJobQuantity = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel9 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jlJobDepart = new javax.swing.JLabel();
        moKeyJobDepart = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel24 = new javax.swing.JPanel();
        jlJobLine = new javax.swing.JLabel();
        moKeyJobLine = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel14 = new javax.swing.JPanel();
        jlJobStatus = new javax.swing.JLabel();
        jtfJobStatus = new javax.swing.JTextField();
        jbJobGoStatusPrev = new javax.swing.JButton();
        jbJobGoStatusNext = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jlJobLot = new javax.swing.JLabel();
        moTextJobLot = new sba.lib.gui.bean.DBeanFieldText();
        jPanel15 = new javax.swing.JPanel();
        jlJobTimeStart = new javax.swing.JLabel();
        moTimeJobTimeStart = new sba.lib.gui.bean.DBeanFieldDatetime();
        jPanel16 = new javax.swing.JPanel();
        jlJobTimeEnd = new javax.swing.JLabel();
        moTimeJobTimeEnd = new sba.lib.gui.bean.DBeanFieldDatetime();
        jPanel25 = new javax.swing.JPanel();
        jlJobPackingFactor = new javax.swing.JLabel();
        moDecJobPackingFactor = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel26 = new javax.swing.JPanel();
        jlJobMassFormula = new javax.swing.JLabel();
        moCompJobMassFormula = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel27 = new javax.swing.JPanel();
        jlJobMass = new javax.swing.JLabel();
        moCompJobMass = new sba.lib.gui.bean.DBeanCompoundField();
        jtpJob = new javax.swing.JTabbedPane();
        jpMfg = new javax.swing.JPanel();
        jpMfgReqment = new javax.swing.JPanel();
        jpConsump = new javax.swing.JPanel();
        jpConsumpData = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jlConsumpType = new javax.swing.JLabel();
        moKeyConsumpType = new sba.lib.gui.bean.DBeanFieldKey();
        jtfConsumpType = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jlConsumpItem = new javax.swing.JLabel();
        moKeyConsumpItem = new sba.lib.gui.bean.DBeanFieldKey();
        jtfConsumpItem = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jlConsumpQuantity = new javax.swing.JLabel();
        moCompConsumpQuantity = new sba.lib.gui.bean.DBeanCompoundField();
        moCompConsumpMass = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel12 = new javax.swing.JPanel();
        jlConsumpLot = new javax.swing.JLabel();
        moTextConsumpLot = new sba.lib.gui.bean.DBeanFieldText();
        moBoolConsumpRework = new sba.lib.gui.bean.DBeanFieldBoolean();
        jbConsumpNew = new javax.swing.JButton();
        jbConsumpAdd = new javax.swing.JButton();
        jbConsumpClear = new javax.swing.JButton();
        jpMfgProd = new javax.swing.JPanel();
        jpMfgData = new javax.swing.JPanel();
        jPanel28 = new javax.swing.JPanel();
        jlMfgProdType = new javax.swing.JLabel();
        moKeyMfgProdType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel31 = new javax.swing.JPanel();
        jlMfgProdItem = new javax.swing.JLabel();
        moKeyMfgProdItem = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel30 = new javax.swing.JPanel();
        jlMfgProdQuantity = new javax.swing.JLabel();
        moCompMfgProdQuantity = new sba.lib.gui.bean.DBeanCompoundField();
        moCompMfgProdMass = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel32 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jbMfgProdNew = new javax.swing.JButton();
        jbMfgProdAdd = new javax.swing.JButton();
        jbMfgProdClear = new javax.swing.JButton();
        jpQty = new javax.swing.JPanel();
        jpSts = new javax.swing.JPanel();

        jpContainer.setLayout(new java.awt.BorderLayout());

        jpJob.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpJob.setLayout(new java.awt.GridLayout(1, 3));

        jPanel1.setLayout(new java.awt.GridLayout(9, 1, 0, 5));

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobNumber.setText("Folio:");
        jlJobNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlJobNumber);

        jtfJobSeries.setEditable(false);
        jtfJobSeries.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfJobSeries.setFocusable(false);
        jtfJobSeries.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel17.add(jtfJobSeries);

        jtfJobNumber.setEditable(false);
        jtfJobNumber.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfJobNumber.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfJobNumber.setFocusable(false);
        jtfJobNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jtfJobNumber);

        jPanel1.add(jPanel17);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobDate.setText("Fecha:*");
        jlJobDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlJobDate);
        jPanel5.add(moDateJobDate);

        jPanel1.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobItemType.setText("Tipo producto:*");
        jlJobItemType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlJobItemType);

        moKeyJobItemType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel6.add(moKeyJobItemType);

        jPanel1.add(jPanel6);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobFamily.setText("Familia:*");
        jlJobFamily.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlJobFamily);

        moKeyJobFamily.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel11.add(moKeyJobFamily);

        jPanel1.add(jPanel11);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobItem.setText("Producto:*");
        jlJobItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jlJobItem);

        moKeyJobItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel22.add(moKeyJobItem);

        jPanel1.add(jPanel22);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobFormula.setText("Fórmula:*");
        jlJobFormula.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel18.add(jlJobFormula);

        moKeyJobFormula.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel18.add(moKeyJobFormula);

        jPanel1.add(jPanel18);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobLoads.setText("Cargas:");
        jlJobLoads.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel19.add(jlJobLoads);
        jPanel19.add(moDecJobLoads);

        jPanel1.add(jPanel19);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobQuantityFormula.setText("Cantidad fórmula:");
        jlJobQuantityFormula.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jlJobQuantityFormula);
        jPanel20.add(moCompJobQuantityFormula);

        jPanel1.add(jPanel20);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobQuantity.setText("Cantidad orden:");
        jlJobQuantity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlJobQuantity);
        jPanel21.add(moCompJobQuantity);

        jPanel1.add(jPanel21);

        jpJob.add(jPanel1);

        jPanel9.setLayout(new java.awt.GridLayout(9, 1, 0, 5));

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobDepart.setText("Depto. producción:*");
        jlJobDepart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel23.add(jlJobDepart);

        moKeyJobDepart.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel23.add(moKeyJobDepart);

        jPanel9.add(jPanel23);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobLine.setText("Línea producción:*");
        jlJobLine.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel24.add(jlJobLine);

        moKeyJobLine.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel24.add(moKeyJobLine);

        jPanel9.add(jPanel24);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobStatus.setText("Estatus orden:*");
        jlJobStatus.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlJobStatus);

        jtfJobStatus.setEditable(false);
        jtfJobStatus.setFocusable(false);
        jtfJobStatus.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel14.add(jtfJobStatus);

        jbJobGoStatusPrev.setText("<<<");
        jbJobGoStatusPrev.setToolTipText("Ir a estatus previo");
        jbJobGoStatusPrev.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbJobGoStatusPrev.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel14.add(jbJobGoStatusPrev);

        jbJobGoStatusNext.setText(">>>");
        jbJobGoStatusNext.setToolTipText("Ir a estatus siguiente");
        jbJobGoStatusNext.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbJobGoStatusNext.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel14.add(jbJobGoStatusNext);

        jPanel9.add(jPanel14);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobLot.setText("Lote:*");
        jlJobLot.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlJobLot);

        moTextJobLot.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel13.add(moTextJobLot);

        jPanel9.add(jPanel13);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobTimeStart.setText("Fecha-hora inicial:");
        jlJobTimeStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlJobTimeStart);
        jPanel15.add(moTimeJobTimeStart);

        jPanel9.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobTimeEnd.setText("Fecha-hora final:");
        jlJobTimeEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlJobTimeEnd);
        jPanel16.add(moTimeJobTimeEnd);

        jPanel9.add(jPanel16);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobPackingFactor.setText("Factor empaque:");
        jlJobPackingFactor.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel25.add(jlJobPackingFactor);
        jPanel25.add(moDecJobPackingFactor);

        jPanel9.add(jPanel25);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobMassFormula.setText("Masa fórmula:");
        jlJobMassFormula.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel26.add(jlJobMassFormula);
        jPanel26.add(moCompJobMassFormula);

        jPanel9.add(jPanel26);

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlJobMass.setText("Masa orden:");
        jlJobMass.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel27.add(jlJobMass);
        jPanel27.add(moCompJobMass);

        jPanel9.add(jPanel27);

        jpJob.add(jPanel9);

        jpContainer.add(jpJob, java.awt.BorderLayout.NORTH);

        jpMfg.setLayout(new java.awt.GridLayout(1, 3));

        jpMfgReqment.setBorder(javax.swing.BorderFactory.createTitledBorder("Insumos requeridos:"));
        jpMfgReqment.setLayout(new java.awt.BorderLayout());
        jpMfg.add(jpMfgReqment);

        jpConsump.setBorder(javax.swing.BorderFactory.createTitledBorder("Insumos consumidos:"));
        jpConsump.setLayout(new java.awt.BorderLayout(0, 5));

        jpConsumpData.setLayout(new java.awt.GridLayout(4, 0, 0, 5));

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlConsumpType.setText("Tipo:*");
        jlConsumpType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jlConsumpType);

        moKeyConsumpType.setPreferredSize(new java.awt.Dimension(240, 23));
        jPanel10.add(moKeyConsumpType);

        jtfConsumpType.setEditable(false);
        jtfConsumpType.setText("jTextField2");
        jtfConsumpType.setFocusable(false);
        jtfConsumpType.setPreferredSize(new java.awt.Dimension(240, 23));
        jPanel10.add(jtfConsumpType);

        jpConsumpData.add(jPanel10);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlConsumpItem.setText("Insumo:*");
        jlConsumpItem.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jlConsumpItem);

        moKeyConsumpItem.setPreferredSize(new java.awt.Dimension(240, 23));
        jPanel7.add(moKeyConsumpItem);

        jtfConsumpItem.setEditable(false);
        jtfConsumpItem.setText("jTextField2");
        jtfConsumpItem.setFocusable(false);
        jtfConsumpItem.setPreferredSize(new java.awt.Dimension(240, 23));
        jPanel7.add(jtfConsumpItem);

        jpConsumpData.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlConsumpQuantity.setText("Cantidad:*");
        jlConsumpQuantity.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jlConsumpQuantity);

        moCompConsumpQuantity.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel8.add(moCompConsumpQuantity);

        moCompConsumpMass.setToolTipText("Masa");
        moCompConsumpMass.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel8.add(moCompConsumpMass);

        jpConsumpData.add(jPanel8);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlConsumpLot.setText("Lote:*");
        jlConsumpLot.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel12.add(jlConsumpLot);

        moTextConsumpLot.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel12.add(moTextConsumpLot);

        moBoolConsumpRework.setText("Re-trab.");
        moBoolConsumpRework.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel12.add(moBoolConsumpRework);

        jbConsumpNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_new.gif"))); // NOI18N
        jbConsumpNew.setToolTipText("Nuevo");
        jbConsumpNew.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbConsumpNew);

        jbConsumpAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_add.gif"))); // NOI18N
        jbConsumpAdd.setToolTipText("Agregar");
        jbConsumpAdd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbConsumpAdd);

        jbConsumpClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_clear.gif"))); // NOI18N
        jbConsumpClear.setToolTipText("Limpiar");
        jbConsumpClear.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbConsumpClear);

        jpConsumpData.add(jPanel12);

        jpConsump.add(jpConsumpData, java.awt.BorderLayout.NORTH);

        jpMfg.add(jpConsump);

        jpMfgProd.setBorder(javax.swing.BorderFactory.createTitledBorder("Productos elaborados:"));
        jpMfgProd.setLayout(new java.awt.BorderLayout(0, 5));

        jpMfgData.setLayout(new java.awt.GridLayout(4, 0, 0, 5));

        jPanel28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMfgProdType.setText("Tipo:*");
        jlMfgProdType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel28.add(jlMfgProdType);

        moKeyMfgProdType.setPreferredSize(new java.awt.Dimension(240, 23));
        jPanel28.add(moKeyMfgProdType);

        jpMfgData.add(jPanel28);

        jPanel31.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMfgProdItem.setText("Producto:*");
        jlMfgProdItem.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel31.add(jlMfgProdItem);

        moKeyMfgProdItem.setPreferredSize(new java.awt.Dimension(240, 23));
        jPanel31.add(moKeyMfgProdItem);

        jpMfgData.add(jPanel31);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMfgProdQuantity.setText("Cantidad:*");
        jlMfgProdQuantity.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel30.add(jlMfgProdQuantity);

        moCompMfgProdQuantity.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel30.add(moCompMfgProdQuantity);

        moCompMfgProdMass.setToolTipText("Masa");
        moCompMfgProdMass.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel30.add(moCompMfgProdMass);

        jpMfgData.add(jPanel30);

        jPanel32.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jLabel2.setPreferredSize(new java.awt.Dimension(240, 23));
        jPanel32.add(jLabel2);

        jbMfgProdNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_new.gif"))); // NOI18N
        jbMfgProdNew.setToolTipText("Nuevo");
        jbMfgProdNew.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel32.add(jbMfgProdNew);

        jbMfgProdAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_add.gif"))); // NOI18N
        jbMfgProdAdd.setToolTipText("Agregar");
        jbMfgProdAdd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel32.add(jbMfgProdAdd);

        jbMfgProdClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_clear.gif"))); // NOI18N
        jbMfgProdClear.setToolTipText("Limpiar");
        jbMfgProdClear.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel32.add(jbMfgProdClear);

        jpMfgData.add(jPanel32);

        jpMfgProd.add(jpMfgData, java.awt.BorderLayout.NORTH);

        jpMfg.add(jpMfgProd);

        jtpJob.addTab("Producción", jpMfg);
        jtpJob.addTab("Calidad", jpQty);
        jtpJob.addTab("Estadísticas", jpSts);

        jpContainer.add(jtpJob, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbConsumpAdd;
    private javax.swing.JButton jbConsumpClear;
    private javax.swing.JButton jbConsumpNew;
    private javax.swing.JButton jbJobGoStatusNext;
    private javax.swing.JButton jbJobGoStatusPrev;
    private javax.swing.JButton jbMfgProdAdd;
    private javax.swing.JButton jbMfgProdClear;
    private javax.swing.JButton jbMfgProdNew;
    private javax.swing.JLabel jlConsumpItem;
    private javax.swing.JLabel jlConsumpLot;
    private javax.swing.JLabel jlConsumpQuantity;
    private javax.swing.JLabel jlConsumpType;
    private javax.swing.JLabel jlJobDate;
    private javax.swing.JLabel jlJobDepart;
    private javax.swing.JLabel jlJobFamily;
    private javax.swing.JLabel jlJobFormula;
    private javax.swing.JLabel jlJobItem;
    private javax.swing.JLabel jlJobItemType;
    private javax.swing.JLabel jlJobLine;
    private javax.swing.JLabel jlJobLoads;
    private javax.swing.JLabel jlJobLot;
    private javax.swing.JLabel jlJobMass;
    private javax.swing.JLabel jlJobMassFormula;
    private javax.swing.JLabel jlJobNumber;
    private javax.swing.JLabel jlJobPackingFactor;
    private javax.swing.JLabel jlJobQuantity;
    private javax.swing.JLabel jlJobQuantityFormula;
    private javax.swing.JLabel jlJobStatus;
    private javax.swing.JLabel jlJobTimeEnd;
    private javax.swing.JLabel jlJobTimeStart;
    private javax.swing.JLabel jlMfgProdItem;
    private javax.swing.JLabel jlMfgProdQuantity;
    private javax.swing.JLabel jlMfgProdType;
    private javax.swing.JPanel jpConsump;
    private javax.swing.JPanel jpConsumpData;
    private javax.swing.JPanel jpContainer;
    private javax.swing.JPanel jpJob;
    private javax.swing.JPanel jpMfg;
    private javax.swing.JPanel jpMfgData;
    private javax.swing.JPanel jpMfgProd;
    private javax.swing.JPanel jpMfgReqment;
    private javax.swing.JPanel jpQty;
    private javax.swing.JPanel jpSts;
    private javax.swing.JTextField jtfConsumpItem;
    private javax.swing.JTextField jtfConsumpType;
    private javax.swing.JTextField jtfJobNumber;
    private javax.swing.JTextField jtfJobSeries;
    private javax.swing.JTextField jtfJobStatus;
    private javax.swing.JTabbedPane jtpJob;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolConsumpRework;
    private sba.lib.gui.bean.DBeanCompoundField moCompConsumpMass;
    private sba.lib.gui.bean.DBeanCompoundField moCompConsumpQuantity;
    private sba.lib.gui.bean.DBeanCompoundField moCompJobMass;
    private sba.lib.gui.bean.DBeanCompoundField moCompJobMassFormula;
    private sba.lib.gui.bean.DBeanCompoundField moCompJobQuantity;
    private sba.lib.gui.bean.DBeanCompoundField moCompJobQuantityFormula;
    private sba.lib.gui.bean.DBeanCompoundField moCompMfgProdMass;
    private sba.lib.gui.bean.DBeanCompoundField moCompMfgProdQuantity;
    private sba.lib.gui.bean.DBeanFieldDate moDateJobDate;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecJobLoads;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecJobPackingFactor;
    private sba.lib.gui.bean.DBeanFieldKey moKeyConsumpItem;
    private sba.lib.gui.bean.DBeanFieldKey moKeyConsumpType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyJobDepart;
    private sba.lib.gui.bean.DBeanFieldKey moKeyJobFamily;
    private sba.lib.gui.bean.DBeanFieldKey moKeyJobFormula;
    private sba.lib.gui.bean.DBeanFieldKey moKeyJobItem;
    private sba.lib.gui.bean.DBeanFieldKey moKeyJobItemType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyJobLine;
    private sba.lib.gui.bean.DBeanFieldKey moKeyMfgProdItem;
    private sba.lib.gui.bean.DBeanFieldKey moKeyMfgProdType;
    private sba.lib.gui.bean.DBeanFieldText moTextConsumpLot;
    private sba.lib.gui.bean.DBeanFieldText moTextJobLot;
    private sba.lib.gui.bean.DBeanFieldDatetime moTimeJobTimeEnd;
    private sba.lib.gui.bean.DBeanFieldDatetime moTimeJobTimeStart;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        String mass = DCfgUtils.getMassUnitCode(miClient.getSession());
        
        DGuiUtils.setWindowBounds(this, 1040, 650);
        
        moDateJobDate.setDateSettings(miClient, DGuiUtils.getLabelName(jlJobDate), true);
        moKeyJobItemType.setKeySettings(miClient, DGuiUtils.getLabelName(jlJobItemType), true);
        moKeyJobFamily.setKeySettings(miClient, DGuiUtils.getLabelName(jlJobFamily), true);
        moKeyJobItem.setKeySettings(miClient, DGuiUtils.getLabelName(jlJobItem), true);
        moKeyJobFormula.setKeySettings(miClient, DGuiUtils.getLabelName(jlJobFormula), true);
        moDecJobLoads.setDecimalSettings(DGuiUtils.getLabelName(jlJobLoads), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCompJobQuantityFormula.setCompoundFieldSettings(miClient);
        moCompJobQuantityFormula.getField().setDecimalSettings(DGuiUtils.getLabelName(jlJobQuantityFormula), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCompJobQuantity.setCompoundFieldSettings(miClient);
        moCompJobQuantity.getField().setDecimalSettings(DGuiUtils.getLabelName(jlJobQuantity), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moKeyJobDepart.setKeySettings(miClient, DGuiUtils.getLabelName(jlJobDepart), true);
        moKeyJobLine.setKeySettings(miClient, DGuiUtils.getLabelName(jlJobLine), true);
        moTextJobLot.setTextSettings(DGuiUtils.getLabelName(jlJobLot), 25);
        moTimeJobTimeStart.setDateSettings(miClient, DGuiUtils.getLabelName(jlJobTimeStart), true);
        moTimeJobTimeEnd.setDateSettings(miClient, DGuiUtils.getLabelName(jlJobTimeEnd), true);
        moDecJobPackingFactor.setDecimalSettings(DGuiUtils.getLabelName(jlJobPackingFactor), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCompJobMassFormula.setCompoundFieldSettings(miClient);
        moCompJobMassFormula.getField().setDecimalSettings(DGuiUtils.getLabelName(jlJobMassFormula), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCompJobMass.setCompoundFieldSettings(miClient);
        moCompJobMass.getField().setDecimalSettings(DGuiUtils.getLabelName(jlJobMass), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        
        moFields.addField(moDateJobDate);
        moFields.addField(moKeyJobItemType);
        moFields.addField(moKeyJobFamily);
        moFields.addField(moKeyJobItem);
        moFields.addField(moKeyJobFormula);
        moFields.addField(moDecJobLoads);
        //moFields.addField(moCompJobQuantityFormula.getField());
        //moFields.addField(moCompJobQuantity.getField());
        moFields.addField(moKeyJobDepart);
        moFields.addField(moKeyJobLine);
        moFields.addField(moTextJobLot);
        moFields.addField(moTimeJobTimeStart);
        moFields.addField(moTimeJobTimeEnd);
        //moFields.addField(moDecJobPackingFactor);
        //moFields.addField(moCompJobMassFormula.getField());
        //moFields.addField(moCompJobMass.getField());
        
        moFields.setFormButton(jbSave);
        
        moKeyConsumpType.setKeySettings(miClient, DGuiUtils.getLabelName(jlConsumpType), true);
        moKeyConsumpType.setTab(0);
        moKeyConsumpItem.setKeySettings(miClient, DGuiUtils.getLabelName(jlConsumpItem), true);
        moKeyConsumpItem.setTab(0);
        moCompConsumpQuantity.setCompoundFieldSettings(miClient);
        moCompConsumpQuantity.getField().setDecimalSettings(DGuiUtils.getLabelName(jlConsumpQuantity), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCompConsumpQuantity.getField().setTab(0);
        moCompConsumpMass.setCompoundFieldSettings(miClient);
        moCompConsumpMass.getField().setDecimalSettings(moCompConsumpMass.getField().getComponent().getToolTipText(), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCompConsumpMass.getField().setTab(0);
        moTextConsumpLot.setTextSettings(DGuiUtils.getLabelName(jlConsumpLot), 25);
        moTextConsumpLot.setTab(0);
        moBoolConsumpRework.setBooleanSettings(moBoolConsumpRework.getText(), false);
        moBoolConsumpRework.setTab(0);
        
        moFieldsConsump = new DGuiFields(jtpJob);
        moFieldsConsump.addField(moKeyConsumpType);
        moFieldsConsump.addField(moKeyConsumpItem);
        moFieldsConsump.addField(moCompConsumpQuantity.getField());
        //moFieldsConsump.addField(moCompConsumpMass.getField());
        moFieldsConsump.addField(moTextConsumpLot);
        moFieldsConsump.addField(moBoolConsumpRework);
        
        moFieldsConsump.setFormButton(jbConsumpAdd);
        
        moKeyMfgProdType.setKeySettings(miClient, DGuiUtils.getLabelName(jlMfgProdType), true);
        moKeyMfgProdType.setTab(0);
        moKeyMfgProdItem.setKeySettings(miClient, DGuiUtils.getLabelName(jlMfgProdItem), true);
        moKeyMfgProdItem.setTab(0);
        moCompMfgProdQuantity.setCompoundFieldSettings(miClient);
        moCompMfgProdQuantity.getField().setDecimalSettings(DGuiUtils.getLabelName(jlMfgProdQuantity), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCompMfgProdQuantity.getField().setTab(0);
        moCompMfgProdMass.setCompoundFieldSettings(miClient);
        moCompMfgProdMass.getField().setDecimalSettings(moCompMfgProdMass.getField().getComponent().getToolTipText(), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCompMfgProdMass.getField().setTab(0);
        
        moFieldsMfgProd = new DGuiFields();
        moFieldsMfgProd.addField(moKeyMfgProdType);
        moFieldsMfgProd.addField(moKeyMfgProdItem);
        moFieldsMfgProd.addField(moCompMfgProdQuantity.getField());
        //moFieldsMfgProd.addField(moCompMfgProdMass.getField());
        
        moFieldsMfgProd.setFormButton(jbMfgProdAdd);
        
        moCompJobQuantityFormula.setEditable(false);
        moCompJobQuantity.setEditable(false);
        moDecJobPackingFactor.setEditable(false);
        moCompJobMassFormula.setEditable(false);
        moCompJobMass.setEditable(false);
        moCompConsumpMass.setEditable(false);
        moCompMfgProdMass.setEditable(false);
        
        moCompJobMassFormula.setCompoundText(mass);
        moCompJobMass.setCompoundText(mass);
        moCompConsumpMass.setCompoundText(mass);
        moCompMfgProdMass.setCompoundText(mass);
        
        msCompTypeNameItm = (String) miClient.getSession().readField(DModConsts.MS_CMP_TP, new int[] { DModSysConsts.MS_CMP_TP_ITM }, DDbRegistry.FIELD_NAME);
        msCompTypeNameFam = (String) miClient.getSession().readField(DModConsts.MS_CMP_TP, new int[] { DModSysConsts.MS_CMP_TP_FAM }, DDbRegistry.FIELD_NAME);
        
        moMapStatus = new HashMap<>();
        moMapStatus.put(DModSysConsts.MS_JOB_ST_PEN, (String) miClient.getSession().readField(DModConsts.MS_JOB_ST, new int[] { DModSysConsts.MS_JOB_ST_PEN }, DDbRegistry.FIELD_NAME));
        moMapStatus.put(DModSysConsts.MS_JOB_ST_PRC, (String) miClient.getSession().readField(DModConsts.MS_JOB_ST, new int[] { DModSysConsts.MS_JOB_ST_PRC }, DDbRegistry.FIELD_NAME));
        moMapStatus.put(DModSysConsts.MS_JOB_ST_FIN, (String) miClient.getSession().readField(DModConsts.MS_JOB_ST, new int[] { DModSysConsts.MS_JOB_ST_FIN }, DDbRegistry.FIELD_NAME));
        
        moGridReqments = new DGridPaneForm(miClient, mnFormType, DModConsts.M_JOB_REQ, msTitle) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[9];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_INT_1B, "# componente");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CAT, DGridConsts.COL_TITLE_TYPE + " componente");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CAT, DGridConsts.COL_TITLE_TYPE + " ítem");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_S, DGridConsts.COL_TITLE_NAME + " componente");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_ITM, DGridConsts.COL_TITLE_CODE + " componente");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cantidad requerida");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cantidad consumida");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad componente");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_M, "Estándar componente");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };
        
        moGridConsumps = new DGridPaneForm(miClient, mnFormType, DModConsts.M_JOB_CON, msTitle) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[4];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cant consum");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Masa consum (" + mass + ")");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT, "Lote");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };
        
        moGridMfgProds = new DGridPaneForm(miClient, mnFormType, DModConsts.M_JOB_MFG, msTitle) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[3];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cant prodda");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Masa prodda (" + mass + ")");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };
        
        moGridReqments.setPaneFormOwner(this);
        moGridConsumps.setPaneFormOwner(this);
        moGridMfgProds.setPaneFormOwner(this);
        
        jpMfgReqment.add(moGridReqments, BorderLayout.CENTER);
        jpConsump.add(moGridConsumps, BorderLayout.CENTER);
        jpMfgProd.add(moGridMfgProds, BorderLayout.CENTER);
        
        mvFormGrids.add(moGridReqments);
        mvFormGrids.add(moGridConsumps);
        mvFormGrids.add(moGridMfgProds);
        
        moKeyGroupJobFormula = new DGuiFieldKeyGroup(miClient);
        moKeyGroupJobLine = new DGuiFieldKeyGroup(miClient);
        moKeyGroupConsumpItem = new DGuiFieldKeyGroup(miClient);
        moKeyGroupMfgProdItem = new DGuiFieldKeyGroup(miClient);
    }
    
    private void renderJobFormula() {
        if (moFormula == null) {
            moCompJobQuantityFormula.getField().resetField();
            moCompJobMassFormula.getField().resetField();
            
            moCompJobQuantityFormula.setCompoundText("");
            moCompJobQuantity.setCompoundText("");
        }
        else {
            moCompJobQuantityFormula.getField().setValue(moFormula.getQuantity());
            moCompJobMassFormula.getField().setValue(moFormula.getMass_r());
            
            moCompJobQuantityFormula.setCompoundText(moFormula.getRegUnit().getCode());
            moCompJobQuantity.setCompoundText(moFormula.getRegUnit().getCode());
        }
    }
    
    private void renderConsumpItem() {
        if (moItemConsump == null) {
            moCompConsumpQuantity.setCompoundText("");
        }
        else {
            moCompConsumpQuantity.setCompoundText(moItemConsump.getRegUnit().getCode());
        }
    }
    
    private void renderMfgProdItem() {
        if (moItemMfgProd == null) {
            moCompMfgProdQuantity.setCompoundText("");
        }
        else {
            moCompMfgProdQuantity.setCompoundText(moItemConsump.getRegUnit().getCode());
        }
    }
    
    private void createGridReqItems() throws Exception {
        Vector<DGridRow> rows = new Vector<>();
        
        moGridReqments.clearGridRows();
        
        if (moFormula != null) {
            for (DDbFormulaComp comp : moFormula.getChildComps()) {
                rows.add(comp.createJobReqment());
            }
            
            moGridReqments.populateGrid(rows, this);
        }
    }
    
    private void updateFieldsJobStatus() {
        jtfConsumpType.setText("");
        jtfConsumpItem.setText("");
        moKeyConsumpType.resetField();
        moKeyConsumpItem.resetField();
        moCompConsumpMass.getField().resetField();
        moTextConsumpLot.resetField();
        moBoolConsumpRework.resetField();
        moKeyMfgProdType.resetField();
        moKeyMfgProdItem.resetField();
        moCompMfgProdMass.getField().resetField();
        
        jtfJobStatus.setText(moMapStatus.get(mnJobStatus));
        jtfJobStatus.setCaretPosition(0);
        
        switch (mnJobStatus) {
            case DModSysConsts.MS_JOB_ST_PEN:
                moDateJobDate.setEditable(true);
                moKeyJobItemType.setEnabled(true);
                moKeyJobFamily.setEnabled(moKeyJobFamily.getSelectedIndex() > 0);
                moKeyJobItem.setEnabled(moKeyJobItem.getSelectedIndex() > 0);
                moKeyJobFormula.setEnabled(moKeyJobFormula.getSelectedIndex() > 0);
                moDecJobLoads.setEditable(true);
                moKeyJobDepart.setEnabled(true);
                moKeyJobLine.setEnabled(moKeyJobLine.getSelectedIndex() > 0);
                moTextJobLot.setEditable(false);
                moTimeJobTimeStart.setEditable(false);
                moTimeJobTimeEnd.setEditable(false);
                
                moCompConsumpQuantity.getField().setEditable(false);
                moTextConsumpLot.setEditable(false);
                moBoolConsumpRework.setEnabled(false);
                moCompMfgProdQuantity.getField().setEditable(false);
                moGridConsumps.setRowButtonsEnabled(false);
                moKeyMfgProdType.setEnabled(false);
                moGridMfgProds.setRowButtonsEnabled(false);
                
                jbConsumpNew.setEnabled(false);
                jbConsumpAdd.setEnabled(false);
                jbConsumpClear.setEnabled(false);
                jbMfgProdNew.setEnabled(false);
                jbMfgProdAdd.setEnabled(false);
                jbMfgProdClear.setEnabled(false);
                
                jbJobGoStatusNext.setEnabled(true);
                jbJobGoStatusPrev.setEnabled(false);
                break;
                
            case DModSysConsts.MS_JOB_ST_PRC:
                moDateJobDate.setEditable(false);
                moKeyJobItemType.setEnabled(false);
                moKeyJobFamily.setEnabled(false);
                moKeyJobItem.setEnabled(false);
                moKeyJobFormula.setEnabled(false);
                moDecJobLoads.setEditable(false);
                moKeyJobDepart.setEnabled(false);
                moKeyJobLine.setEnabled(false);
                moTextJobLot.setEditable(true);
                moTimeJobTimeStart.setEditable(true);
                moTimeJobTimeEnd.setEditable(true);
                
                moCompConsumpQuantity.getField().setEditable(true);
                moTextConsumpLot.setEditable(true);
                moBoolConsumpRework.setEnabled(true);
                moCompMfgProdQuantity.getField().setEditable(true);
                moGridConsumps.setRowButtonsEnabled(false, false, true);
                moKeyMfgProdType.setEnabled(true);
                moGridMfgProds.setRowButtonsEnabled(false, false, true);
                
                jbConsumpNew.setEnabled(true);
                jbConsumpAdd.setEnabled(true);
                jbConsumpClear.setEnabled(true);
                jbMfgProdNew.setEnabled(true);
                jbMfgProdAdd.setEnabled(true);
                jbMfgProdClear.setEnabled(true);
                
                jbJobGoStatusNext.setEnabled(true);
                jbJobGoStatusPrev.setEnabled(true);
                break;
                
            case DModSysConsts.MS_JOB_ST_FIN:
                moDateJobDate.setEditable(false);
                moKeyJobItemType.setEnabled(false);
                moKeyJobFamily.setEnabled(false);
                moKeyJobItem.setEnabled(false);
                moKeyJobFormula.setEnabled(false);
                moDecJobLoads.setEditable(false);
                moKeyJobDepart.setEnabled(false);
                moKeyJobLine.setEnabled(false);
                moTextJobLot.setEditable(false);
                moTimeJobTimeStart.setEditable(false);
                moTimeJobTimeEnd.setEditable(false);
                
                moCompConsumpQuantity.getField().setEditable(false);
                moTextConsumpLot.setEditable(false);
                moBoolConsumpRework.setEnabled(false);
                moCompMfgProdQuantity.getField().setEditable(false);
                moGridConsumps.setRowButtonsEnabled(false);
                moKeyMfgProdType.setEnabled(false);
                moGridMfgProds.setRowButtonsEnabled(false);
                
                jbConsumpNew.setEnabled(false);
                jbConsumpAdd.setEnabled(false);
                jbConsumpClear.setEnabled(false);
                jbMfgProdNew.setEnabled(false);
                jbMfgProdAdd.setEnabled(false);
                jbMfgProdClear.setEnabled(false);
                
                jbJobGoStatusNext.setEnabled(false);
                jbJobGoStatusPrev.setEnabled(true);
                break;
            default:
        }
    }
    
    private void computeJobQuantity() {
        if (moFormula == null) {
            moCompJobQuantity.getField().setValue(0d);
            moCompJobMassFormula.getField().setValue(0d);
        }
        else {
            moCompJobQuantity.getField().setValue(moFormula.getQuantity() * moDecJobLoads.getValue());
            moCompJobMassFormula.getField().setValue(moFormula.getMass_r()* moDecJobLoads.getValue());
        }
    }
    
    private void computeJobMass() {
        double mass = 0;
        
        for (DGridRow row : moGridConsumps.getModel().getGridRows()) {
            mass += ((DDbJobConsump) row).getMass_r();
        }
        
        moCompJobMass.getField().setValue(mass);
        
        moDecJobPackingFactor.setValue(moCompJobMassFormula.getField().getValue() == 0d ? 0d : mass / moCompJobMassFormula.getField().getValue());
    }
    
    private void computeConsumpMass() {
        if (moItemConsump == null) {
            moCompConsumpMass.getField().setValue(0d);
        }
        else {
            moCompConsumpMass.getField().setValue(moItemConsump.getMassUnit() * moCompConsumpQuantity.getField().getValue());
        }
    }
    
    private void computeMfgProdMass() {
        if (moItemMfgProd == null) {
            moCompMfgProdMass.getField().setValue(0d);
        }
        else {
            moCompMfgProdMass.getField().setValue(moItemMfgProd.getMassUnit() * moCompMfgProdQuantity.getField().getValue());
        }
    }
    
    private void actionPerformedJobGoStatusPrev() {
        if (mnJobStatus > DModSysConsts.MS_JOB_ST_PEN) {
            mnJobStatus--;
        }
        
        updateFieldsJobStatus();
        
        if (mnJobStatus == DModSysConsts.MS_JOB_ST_PEN) {
            jbJobGoStatusNext.requestFocus();
        }
    }
    
    private void actionPerformedJobGoStatusNext() {
        DGuiValidation validation = moFields.validateFields();
        
        if (!validation.isValid()) {
            DGuiUtils.computeValidation(miClient, validation);
        }
        else {
            if (mnJobStatus < DModSysConsts.MS_JOB_ST_FIN) {
                mnJobStatus++;
            }

            updateFieldsJobStatus();

            if (mnJobStatus == DModSysConsts.MS_JOB_ST_PRC) {
                try {
                    createGridReqItems();
                }
                catch (Exception e) {
                    DLibUtils.showException(this, e);
                }
            }
            else if (mnJobStatus == DModSysConsts.MS_JOB_ST_FIN) {
                jbJobGoStatusPrev.requestFocus();
            }
        }
    }
    
    private void actionPerformedConsumpNew() {
        moKeyGroupConsumpItem.initGroup();
        moKeyGroupConsumpItem.addFieldKey(moKeyConsumpType, DModConsts.CX_ITM_TP_CMP, WIDTH, null);
        moKeyGroupConsumpItem.addFieldKey(moKeyConsumpItem, DModConsts.CX_ITM_FK_ITM_TP, WIDTH, null);
        moKeyGroupConsumpItem.populateCatalogues();
    }
    
    private void actionPerformedConsumpAdd() {
        DGuiValidation validation = moFieldsConsump.validateFields();
        
        if (!validation.isValid()) {
            DGuiUtils.computeValidation(miClient, validation);
        }
        else {
            DDbJobConsump consump = new DDbJobConsump();
            
            //consump.setPkJobId(...);
            //consump.setPkConsumpId(...);
            consump.setQuantity(moCompConsumpQuantity.getField().getValue());
            //consump.setMassUnit(...);
            //consump.setMass_r(...);
            consump.setLot(moTextConsumpLot.getValue());
            consump.setRework(moBoolConsumpRework.getValue());
            consump.setFkItemId(moItemConsump.getPkItemId());
            //consump.setFkItemTypeId(...);
            //consump.setFkUnitId(...);
            
            consump.compute(miClient.getSession());
            
            moGridConsumps.addGridRow(consump);
            moGridConsumps.setSelectedGridRow(moGridConsumps.getTable().getRowCount() - 1);
            computeJobMass();
            actionPerformedConsumpClear();
        }
    }
    
    private void actionPerformedConsumpClear() {
        moFieldsConsump.resetFields();
        moCompConsumpQuantity.getField().getComponent().requestFocus();
    }
    
    private void actionPerformedMfgProdNew() {
        
    }
    
    private void actionPerformedMfgProdAdd() {
        
    }
    
    private void actionPerformedMfgProdClear() {
        
    }
    
    private void itemStateChangedJobFormula() {
        if (moKeyJobFormula.getSelectedIndex() <= 0) {
            moFormula = null;
        }
        else {
            moFormula = (DDbFormula) miClient.getSession().readRegistry(DModConsts.MU_FRM, moKeyJobFormula.getValue());
        }
        
        renderJobFormula();
    }
    
    private void itemStateChangedConsumpItem() {
        if (moKeyConsumpItem.getSelectedIndex() <= 0) {
            moItemConsump = null;
        }
        else {
            moItemConsump = (DDbItem) miClient.getSession().readRegistry(DModConsts.CU_ITM, moKeyConsumpItem.getValue());
        }
        
        renderConsumpItem();
    }
    
    private void itemStateChangedMfgProdItem() {
        if (moKeyMfgProdItem.getSelectedIndex() <= 0) {
            moItemMfgProd = null;
        }
        else {
            moItemMfgProd = (DDbItem) miClient.getSession().readRegistry(DModConsts.CU_ITM, moKeyMfgProdItem.getValue());
        }
        
        renderMfgProdItem();
    }
    
    private void focusLostJobLoads() {
        computeJobQuantity();
    }
    
    private void focusLostConsumpQuantity() {
        computeConsumpMass();
    }
    
    private void focusLostMfgProdQuantity() {
        computeMfgProdMass();
    }
    
    private void valueChangedReqments() {
        DDbJobReqment reqment = (DDbJobReqment) moGridReqments.getSelectedGridRow();
        
        /* When job requirement is selected on grid, by default hide type and item combo boxes.
         * If current requirement component type is "item", then no combo box is shown.
         * If current requirement component type is "family", then show only item combo box.
         * If "new" consumption is explicitly requested, then show both combo boxes.
         */
        
        moKeyGroupConsumpItem.initGroup();
        
        moCompConsumpQuantity.getField().resetField();
        moCompConsumpMass.getField().resetField();
        moTextConsumpLot.resetField();
        
        if (reqment == null) {
            moItemConsump = null;
            
            jtfConsumpType.setText("");
            jtfConsumpItem.setText("");
            
            moKeyConsumpType.setVisible(false);
            moKeyConsumpItem.setVisible(false);
            
            moKeyConsumpType.setEnabled(false);
            moKeyConsumpItem.setEnabled(false);
            
            moCompConsumpQuantity.setEditable(false);
            moTextConsumpLot.setEditable(false);
            
            moCompConsumpQuantity.setCompoundText("");
        }
        else {
            switch (reqment.getFkCompTypeId()) {
                case DModSysConsts.MS_CMP_TP_ITM:
                    moItemConsump = reqment.getRegItem();
                    
                    jtfConsumpType.setText(msCompTypeNameItm);
                    jtfConsumpType.setCaretPosition(0);
                    jtfConsumpItem.setText(moItemConsump.getName());
                    jtfConsumpItem.setCaretPosition(0);
                    
                    moKeyConsumpType.setVisible(false);
                    moKeyConsumpItem.setVisible(false);
            
                    moKeyConsumpType.setEnabled(false);
                    moKeyConsumpItem.setEnabled(false);

                    moCompConsumpQuantity.setEditable(true);
                    moTextConsumpLot.setEditable(true);
                    
                    moCompConsumpQuantity.setCompoundText(moItemConsump.getRegUnit().getCode());
                    break;
                    
                case DModSysConsts.MS_CMP_TP_FAM:
                    moItemConsump = null;
            
                    jtfConsumpType.setText(msCompTypeNameFam);
                    jtfConsumpType.setCaretPosition(0);
                    jtfConsumpItem.setText("");
                    
                    moKeyConsumpType.setVisible(false);
                    moKeyConsumpItem.setVisible(true);
            
                    moKeyConsumpType.setEnabled(false);
                    moKeyConsumpItem.setEnabled(true);

                    moCompConsumpQuantity.setEditable(true);
                    moTextConsumpLot.setEditable(true);
                    
                    moCompConsumpQuantity.setCompoundText("");
                    
                    miClient.getSession().populateCatalogue(moKeyConsumpItem, DModConsts.CU_ITM, DLibConsts.UNDEFINED, new DGuiParams(new int[] { reqment.getFkCompId() }));
                    break;
                    
                default:
            }
        }
    }
    
    /*
     * Public methods
     */
    
    /*
     * Overriden methods
     */
    
    @Override
    public void addAllListeners() {
        jbJobGoStatusPrev.addActionListener(this);
        jbJobGoStatusNext.addActionListener(this);
        jbConsumpNew.addActionListener(this);
        jbConsumpAdd.addActionListener(this);
        jbConsumpClear.addActionListener(this);
        jbMfgProdNew.addActionListener(this);
        jbMfgProdAdd.addActionListener(this);
        jbMfgProdClear.addActionListener(this);
        moKeyJobFormula.addItemListener(this);
        moKeyConsumpItem.addItemListener(this);
        moKeyMfgProdItem.addItemListener(this);
        moDecJobLoads.addFocusListener(this);
        moCompConsumpQuantity.getField().getComponent().addFocusListener(this);
        moCompMfgProdQuantity.getField().getComponent().addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbJobGoStatusPrev.removeActionListener(this);
        jbJobGoStatusNext.removeActionListener(this);
        jbConsumpNew.removeActionListener(this);
        jbConsumpAdd.removeActionListener(this);
        jbConsumpClear.removeActionListener(this);
        jbMfgProdNew.removeActionListener(this);
        jbMfgProdAdd.removeActionListener(this);
        jbMfgProdClear.removeActionListener(this);
        moKeyJobFormula.removeItemListener(this);
        moKeyConsumpItem.removeItemListener(this);
        moKeyMfgProdItem.removeItemListener(this);
        moDecJobLoads.removeFocusListener(this);
        moCompConsumpQuantity.getField().getComponent().removeFocusListener(this);
        moCompMfgProdQuantity.getField().getComponent().removeFocusListener(this);
    }

    @Override
    public void reloadCatalogues() {
        moKeyGroupJobFormula.initGroup();
        moKeyGroupJobFormula.addFieldKey(moKeyJobItemType, DModConsts.CX_ITM_TP_PRO_MFG, DLibConsts.UNDEFINED, null);
        moKeyGroupJobFormula.addFieldKey(moKeyJobFamily, DModConsts.CU_FAM, DLibConsts.UNDEFINED, null);
        moKeyGroupJobFormula.addFieldKey(moKeyJobItem, DModConsts.CX_ITM_FK_FAM, DLibConsts.UNDEFINED, null);
        moKeyGroupJobFormula.addFieldKey(moKeyJobFormula, DModConsts.MU_FRM, DLibConsts.UNDEFINED, null);
        moKeyGroupJobFormula.populateCatalogues();
        
        moKeyGroupJobLine.initGroup();
        moKeyGroupJobLine.addFieldKey(moKeyJobDepart, DModConsts.MU_DPT, DLibConsts.UNDEFINED, null);
        moKeyGroupJobLine.addFieldKey(moKeyJobLine, DModConsts.MU_LIN, DLibConsts.UNDEFINED, null);
        moKeyGroupJobLine.populateCatalogues();
        
        moKeyGroupMfgProdItem.initGroup();
        moKeyGroupMfgProdItem.addFieldKey(moKeyMfgProdType, DModConsts.CX_ITM_TP_PRO_MFG_ALL, WIDTH, null);
        moKeyGroupMfgProdItem.addFieldKey(moKeyMfgProdItem, DModConsts.CX_ITM_FK_ITM_TP, WIDTH, null);
        moKeyGroupMfgProdItem.populateCatalogues();
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        moRegistry = (DDbJob) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();
        
        if (moRegistry.isRegistryNew()) {
            moRegistry.setDate(miClient.getSession().getWorkingDate());
            moRegistry.setTsStart_n(miClient.getSession().getWorkingDate());
            moRegistry.setTsEnd_n(miClient.getSession().getWorkingDate());
            moRegistry.setFkJobStatusId(DModSysConsts.MS_JOB_ST_PEN);
            
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(DLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        jtfJobSeries.setText((String) miClient.getSession().readField(DModConsts.MS_JOB_TP, new int[] { moRegistry.getFkJobTypeId() }, DDbRegistry.FIELD_CODE));
        jtfJobNumber.setText(DLibUtils.DecimalFormatIntegerRaw.format(moRegistry.getNumber()));
        jtfJobNumber.setCaretPosition(0);
        moDateJobDate.setValue(moRegistry.getDate());
        moKeyJobItemType.setValue(new int[] { moRegistry.getFkItemTypeId() });
        moKeyJobFamily.setValue(new int[] { moRegistry.getRegFormula() == null ? DLibConsts.UNDEFINED : moRegistry.getRegFormula().getRegItem().getFkFamilyId() });
        moKeyJobItem.setValue(new int[] { moRegistry.getFkItemId() });
        moKeyJobFormula.setValue(new int[] { moRegistry.getFkFormulaId() });
        itemStateChangedJobFormula();
        moDecJobLoads.setValue(moRegistry.getLoads());
        computeJobQuantity();
        moKeyJobDepart.setValue(new int[] { moRegistry.getFkDepartId() });
        moKeyJobLine.setValue(new int[] { moRegistry.getFkLineId() });
        moTextJobLot.setValue(moRegistry.getLot());
        moTimeJobTimeStart.setValue(moRegistry.getTsStart_n());
        moTimeJobTimeEnd.setValue(moRegistry.getTsEnd_n());
        computeJobMass();
        
        moGridReqments.populateGrid(new Vector<DGridRow>(moRegistry.getChildReqemnts()), this);
        moGridConsumps.populateGrid(new Vector<DGridRow>());
        moGridMfgProds.populateGrid(new Vector<DGridRow>());
        
        renderConsumpItem();
        renderMfgProdItem();
        
        setFormEditable(true);
        
        mnJobStatus = moRegistry.getFkJobStatusId();
        updateFieldsJobStatus();
        moKeyGroupMfgProdItem.resetGroup();
        
        if (moRegistry.isRegistryNew()) {
            moKeyGroupJobFormula.resetGroup();
            moKeyGroupJobLine.resetGroup();
        }
        else {
            
        }
        
        addAllListeners();
    }

    @Override
    public DDbJob getRegistry() throws Exception {
        DDbJob registry = moRegistry.clone();

        if (registry.isRegistryNew()) { }

        //registry.setCode(moTextCode.getValue());
        //registry.setName(moTextName.getValue());

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        return moFields.validateFields();
    }

    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        if (gridType == mnFormType) {
            switch (gridSubtype) {
                case DModConsts.M_JOB_REQ:
                    break;
                case DModConsts.M_JOB_CON:
                    break;
                case DModConsts.M_JOB_MFG:
                    break;
                default:
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbJobGoStatusPrev) {
                actionPerformedJobGoStatusPrev();
            }
            else if (button == jbJobGoStatusNext) {
                actionPerformedJobGoStatusNext();
            }
            else if (button == jbConsumpNew) {
                actionPerformedConsumpNew();
            }
            else if (button == jbConsumpAdd) {
                actionPerformedConsumpAdd();
            }
            else if (button == jbConsumpClear) {
                actionPerformedConsumpClear();
            }
            else if (button == jbMfgProdNew) {
                actionPerformedMfgProdNew();
            }
            else if (button == jbMfgProdAdd) {
                actionPerformedMfgProdAdd();
            }
            else if (button == jbMfgProdClear) {
                actionPerformedMfgProdClear();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldKey) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldKey field = (DBeanFieldKey) e.getSource();
                
                if (field == moKeyJobFormula) {
                    itemStateChangedJobFormula();
                }
                else if (field == moKeyConsumpItem) {
                    itemStateChangedConsumpItem();
                }
                else if (field == moKeyMfgProdItem) {
                    itemStateChangedMfgProdItem();
                }
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof DBeanFieldDecimal) {
            DBeanFieldDecimal field = (DBeanFieldDecimal) e.getSource();
            
            if (field == moDecJobLoads) {
                focusLostJobLoads();
            }
            else if (field == moCompConsumpQuantity.getField().getComponent()) {
                focusLostConsumpQuantity();
            }
            else if (field == moCompMfgProdQuantity.getField().getComponent()) {
                focusLostMfgProdQuantity();
            }
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (e.getSource() instanceof ListSelectionModel) {
            ListSelectionModel listSelectionModel = (ListSelectionModel) e.getSource();
            
            if (listSelectionModel == moGridReqments.getTable().getSelectionModel()) {
                valueChangedReqments();
            }
        }
    }
}
