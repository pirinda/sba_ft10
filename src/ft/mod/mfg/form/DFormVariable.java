/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package ft.mod.mfg.form;

import ft.lib.DLibRowOption;
import ft.mod.DModConsts;
import ft.mod.mfg.db.DDbVariable;
import ft.mod.mfg.db.DDbVariableFamily;
import java.awt.BorderLayout;
import java.text.DecimalFormat;
import java.util.Vector;
import javax.swing.JSpinner;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridColumnForm;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridRow;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiItem;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanForm;

/**
 *
 * @author Sergio Flores
 */
public class DFormVariable extends DBeanForm implements ChangeListener {

    private DDbVariable moRegistry;
    private DGridPaneForm moGridFamilies;

    /** Creates new form DFormVariable */
    public DFormVariable(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.MU_VAR, DLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContainer = new javax.swing.JPanel();
        jpVariable = new javax.swing.JPanel();
        jpVariable1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlCode = new javax.swing.JLabel();
        moTextCode = new sba.lib.gui.bean.DBeanFieldText();
        jPanel4 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sba.lib.gui.bean.DBeanFieldText();
        jPanel8 = new javax.swing.JPanel();
        jlUnit = new javax.swing.JLabel();
        moTextUnit = new sba.lib.gui.bean.DBeanFieldText();
        jpVariable2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jlDecimals = new javax.swing.JLabel();
        jsDecimals = new javax.swing.JSpinner();
        jPanel6 = new javax.swing.JPanel();
        jlValueMin = new javax.swing.JLabel();
        moDecValueMin = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel7 = new javax.swing.JPanel();
        jlValueMax = new javax.swing.JLabel();
        moDecValueMax = new sba.lib.gui.bean.DBeanFieldDecimal();
        jpFamilies = new javax.swing.JPanel();

        jpContainer.setLayout(new java.awt.BorderLayout());

        jpVariable.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpVariable.setLayout(new java.awt.GridLayout(1, 2));

        jpVariable1.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCode.setText("Código:*");
        jlCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlCode);
        jPanel3.add(moTextCode);

        jpVariable1.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Nombre:*");
        jlName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlName);

        moTextName.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel4.add(moTextName);

        jpVariable1.add(jPanel4);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnit.setForeground(new java.awt.Color(0, 102, 102));
        jlUnit.setText("Unidad:");
        jlUnit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlUnit);
        jPanel8.add(moTextUnit);

        jpVariable1.add(jPanel8);

        jpVariable.add(jpVariable1);

        jpVariable2.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDecimals.setText("Decimales:");
        jlDecimals.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlDecimals);

        jsDecimals.setModel(new javax.swing.SpinnerNumberModel(0, 0, 8, 1));
        jsDecimals.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel5.add(jsDecimals);

        jpVariable2.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlValueMin.setText("Valor mínimo:");
        jlValueMin.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlValueMin);
        jPanel6.add(moDecValueMin);

        jpVariable2.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlValueMax.setText("Valor máximo:");
        jlValueMax.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlValueMax);
        jPanel7.add(moDecValueMax);

        jpVariable2.add(jPanel7);

        jpVariable.add(jpVariable2);

        jpContainer.add(jpVariable, java.awt.BorderLayout.NORTH);

        jpFamilies.setBorder(javax.swing.BorderFactory.createTitledBorder("Familias:"));
        jpFamilies.setLayout(new java.awt.BorderLayout());
        jpContainer.add(jpFamilies, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JLabel jlCode;
    private javax.swing.JLabel jlDecimals;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlUnit;
    private javax.swing.JLabel jlValueMax;
    private javax.swing.JLabel jlValueMin;
    private javax.swing.JPanel jpContainer;
    private javax.swing.JPanel jpFamilies;
    private javax.swing.JPanel jpVariable;
    private javax.swing.JPanel jpVariable1;
    private javax.swing.JPanel jpVariable2;
    private javax.swing.JSpinner jsDecimals;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecValueMax;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecValueMin;
    private sba.lib.gui.bean.DBeanFieldText moTextCode;
    private sba.lib.gui.bean.DBeanFieldText moTextName;
    private sba.lib.gui.bean.DBeanFieldText moTextUnit;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 640, 400);
        
        moTextCode.setTextSettings(DGuiUtils.getLabelName(jlCode), 5);
        moTextName.setTextSettings(DGuiUtils.getLabelName(jlName), 50);
        moTextUnit.setTextSettings(DGuiUtils.getLabelName(jlUnit), 10);
        moTextUnit.setTextCaseType(DLibConsts.UNDEFINED);
        moDecValueMin.setDecimalSettings(DGuiUtils.getLabelName(jlValueMin), DGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);
        moDecValueMax.setDecimalSettings(DGuiUtils.getLabelName(jlValueMax), DGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);
        
        moFields.addField(moTextCode);
        moFields.addField(moTextName);
        moFields.addField(moTextUnit);
        moFields.addField(moDecValueMin);
        moFields.addField(moDecValueMax);
        
        moFields.setFormButton(jbSave);
        
        moGridFamilies = new DGridPaneForm(miClient, mnFormType, DModConsts.CU_FAM, DGuiUtils.getLabelName(((TitledBorder) jpFamilies.getBorder()).getTitle())) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[3];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_L, DGridConsts.COL_TITLE_NAME);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CAT, DGridConsts.COL_TITLE_CODE);
                columns[col] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_S, "Aplica");
                columns[col].setEditable(true);

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };
        
        jpFamilies.add(moGridFamilies, BorderLayout.CENTER);
        
        mvFormGrids.add(moGridFamilies);
    }
    
    private void stateChangedDecimals() {
        int value = (Integer) jsDecimals.getValue();
        DecimalFormat format = new DecimalFormat("#,##0" + (value == 0 ? "" : "." + DLibUtils.textRepeat("0", value)));
        
        moDecValueMin.setDecimalFormat(format);
        moDecValueMax.setDecimalFormat(format);
        
        moDecValueMin.setValue(moDecValueMin.getValue());
        moDecValueMax.setValue(moDecValueMax.getValue());
    }
    
    /*
     * Public methods
     */
    
    /*
     * Overriden methods
     */
    
    @Override
    public void addAllListeners() {
        jsDecimals.addChangeListener(this);
    }

    @Override
    public void removeAllListeners() {
        jsDecimals.removeChangeListener(this);
    }

    @Override
    public void reloadCatalogues() {
        
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        boolean isCopy = false;
        Vector<DGuiItem> items = null;
        Vector<DGridRow> rows = new Vector<>();
        
        moRegistry = (DDbVariable) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            isCopy = moRegistry.getPkVariableId() != DLibConsts.UNDEFINED;
            
            moRegistry.initPrimaryKey();
            moRegistry.setCode("");
            
            if (!isCopy) {
                moRegistry.setDecimals(DLibUtils.getDecimalFormatAmountUnitary().getMaximumFractionDigits());
            }
            
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(DLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moTextCode.setValue(moRegistry.getCode());
        moTextName.setValue(moRegistry.getName());
        moTextUnit.setValue(moRegistry.getUnit());
        jsDecimals.setValue(moRegistry.getDecimals());
        stateChangedDecimals();
        moDecValueMin.setValue(moRegistry.getValueMin());
        moDecValueMax.setValue(moRegistry.getValueMax());
        
        items = miClient.getSession().readItems(DModConsts.CU_FAM, DLibConsts.UNDEFINED, null);
        items.remove(0);
        rows.clear(); // just for consistence
        
        for (DGuiItem item : items) {
            rows.add(new DLibRowOption(item.getPrimaryKey()[0], item.getCode(), item.getItem(), moRegistry.isUtilFamilySelected(item.getPrimaryKey()[0])));
        }
        
        moGridFamilies.populateGrid(rows);
        
        setFormEditable(true);
        
        moTextCode.setEditable(false);

        if (moRegistry.isRegistryNew()) {

        }
        else {
            
        }
        
        addAllListeners();
    }

    @Override
    public DDbVariable getRegistry() throws Exception {
        DDbVariable registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            //registry.setPkVariableId(...);
        }

        registry.setCode(moTextCode.getValue());
        registry.setName(moTextName.getValue());
        registry.setDecimals((Integer) jsDecimals.getValue());
        registry.setValueMin(moDecValueMin.getValue());
        registry.setValueMax(moDecValueMax.getValue());
        registry.setUnit(moTextUnit.getValue());
        //registry.setDeleted(...);
        //registry.setSystem(...);
        
        registry.getChildFamilies().clear();
        for (DGridRow row : moGridFamilies.getModel().getGridRows()) {
            if (((DLibRowOption) row).Selected) {
                DDbVariableFamily variableFamily = new DDbVariableFamily();
                //variableFamily.setPkVariableId(...);
                variableFamily.setPkFamilyId(((DLibRowOption) row).OptionId);
                registry.getChildFamilies().add(variableFamily);
            }
        }
        
        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        return moFields.validateFields();
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        if (e.getSource() instanceof JSpinner) {
            JSpinner spinner = (JSpinner) e.getSource();
            
            if (spinner == jsDecimals) {
                stateChangedDecimals();
            }
        }
    }
}
