/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package ft.mod.mfg.form;

import ft.mod.DModConsts;
import ft.mod.DModSysConsts;
import ft.mod.cfg.db.DCfgConsts;
import ft.mod.cfg.db.DCfgUtils;
import ft.mod.cfg.db.DDbFamily;
import ft.mod.cfg.db.DDbItem;
import ft.mod.mfg.db.DDbFormula;
import ft.mod.mfg.db.DDbFormulaComp;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.border.TitledBorder;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridColumnForm;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridPaneFormOwner;
import sba.lib.grid.DGridRow;
import sba.lib.grid.DGridUtils;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiFieldKeyGroup;
import sba.lib.gui.DGuiFields;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldDecimal;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanFieldRadio;
import sba.lib.gui.bean.DBeanForm;

/**
 *
 * @author Sergio Flores
 */
public class DFormFormula extends DBeanForm implements DGridPaneFormOwner, ActionListener, ItemListener, FocusListener {

    private DDbFormula moRegistry;
    private DDbFormulaComp moFormulaComp;
    private DGuiFieldKeyGroup moKeyGroupItem;
    private DGuiFieldKeyGroup moKeyGroupComp;
    private DGuiFields moFieldsComps;
    private DGridPaneForm moGridComps;
    private DDbItem moItemForm;
    private DDbItem moItemComp;
    private DDbFamily moFamilyComp;
    private JButton mjCompModify;
    private JButton mjCompMoveUp;
    private JButton mjCompMoveDown;

    /** Creates new form DFormFormula */
    public DFormFormula(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.MU_FRM, DLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbgCompType = new javax.swing.ButtonGroup();
        jpContainer = new javax.swing.JPanel();
        jpFormula = new javax.swing.JPanel();
        jpFormula1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jlFormulaType = new javax.swing.JLabel();
        moKeyFormulaType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel6 = new javax.swing.JPanel();
        jlFormItemType = new javax.swing.JLabel();
        moKeyFormItemType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel16 = new javax.swing.JPanel();
        jlFormFamily = new javax.swing.JLabel();
        moKeyFormFamily = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel15 = new javax.swing.JPanel();
        jlFormItem = new javax.swing.JLabel();
        moKeyFormItem = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel21 = new javax.swing.JPanel();
        jlFormUnit = new javax.swing.JLabel();
        jtfFormUnit = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jlFormPresent = new javax.swing.JLabel();
        jtfFormPresent = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jlFormReference = new javax.swing.JLabel();
        moTextFormReference = new sba.lib.gui.bean.DBeanFieldText();
        jpFormula2 = new javax.swing.JPanel();
        jpFormula21 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlItemQuantity = new javax.swing.JLabel();
        moCompItemQuantity = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel22 = new javax.swing.JPanel();
        jlItemMassUnit = new javax.swing.JLabel();
        moCompItemMassUnit = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel1 = new javax.swing.JPanel();
        jlItemMass = new javax.swing.JLabel();
        moCompItemMass = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel23 = new javax.swing.JPanel();
        jlItemBrix = new javax.swing.JLabel();
        moCompItemBrix = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel24 = new javax.swing.JPanel();
        jlItemMassSolid = new javax.swing.JLabel();
        moCompItemMassSolid = new sba.lib.gui.bean.DBeanCompoundField();
        jpFormula22 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jlFormMass = new javax.swing.JLabel();
        moCompFormMass = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel13 = new javax.swing.JPanel();
        jlFormBrix = new javax.swing.JLabel();
        moCompFormBrix = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel25 = new javax.swing.JPanel();
        jlFormMassSolid = new javax.swing.JLabel();
        moCompFormMassSolid = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel26 = new javax.swing.JPanel();
        jlTargetBrix = new javax.swing.JLabel();
        moCompTargetBrix = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel27 = new javax.swing.JPanel();
        jlTargetMass = new javax.swing.JLabel();
        moCompTargetMass = new sba.lib.gui.bean.DBeanCompoundField();
        jpComps = new javax.swing.JPanel();
        jpComps1 = new javax.swing.JPanel();
        jpComps11 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        moRadCompTypeItem = new sba.lib.gui.bean.DBeanFieldRadio();
        moRadCompTypeFamily = new sba.lib.gui.bean.DBeanFieldRadio();
        jPanel17 = new javax.swing.JPanel();
        jlCompItemType = new javax.swing.JLabel();
        moKeyCompItemType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel20 = new javax.swing.JPanel();
        jlCompFamily = new javax.swing.JLabel();
        moKeyCompFamily = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel18 = new javax.swing.JPanel();
        jlCompItem = new javax.swing.JLabel();
        moKeyCompItem = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel19 = new javax.swing.JPanel();
        jlCompUnit = new javax.swing.JLabel();
        jtfCompUnit = new javax.swing.JTextField();
        jpComps12 = new javax.swing.JPanel();
        jpComps121 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlCompQuantity = new javax.swing.JLabel();
        moCompCompQuantity = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel7 = new javax.swing.JPanel();
        jlCompMassUnit = new javax.swing.JLabel();
        moCompCompMassUnit = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel4 = new javax.swing.JPanel();
        jlCompMass = new javax.swing.JLabel();
        moCompCompMass = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel31 = new javax.swing.JPanel();
        jlCompBrix = new javax.swing.JLabel();
        moCompCompBrix = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel32 = new javax.swing.JPanel();
        jlCompMassSolid = new javax.swing.JLabel();
        moCompCompMassSolid = new sba.lib.gui.bean.DBeanCompoundField();
        jpComps122 = new javax.swing.JPanel();
        jPanel34 = new javax.swing.JPanel();
        jlCompCompIncType = new javax.swing.JLabel();
        moKeyCompCompIncType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel35 = new javax.swing.JPanel();
        jlCompExclusionLabel = new javax.swing.JLabel();
        moTextCompExclusionLabel = new sba.lib.gui.bean.DBeanFieldText();
        jPanel33 = new javax.swing.JPanel();
        jbCompAdd = new javax.swing.JButton();
        jbCompClear = new javax.swing.JButton();

        jpContainer.setLayout(new java.awt.BorderLayout());

        jpFormula.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpFormula.setLayout(new java.awt.BorderLayout());

        jpFormula1.setLayout(new java.awt.GridLayout(7, 1, 0, 5));

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFormulaType.setText("Tipo fórmula:*");
        jlFormulaType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlFormulaType);

        moKeyFormulaType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel5.add(moKeyFormulaType);

        jpFormula1.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFormItemType.setText("Tipo ítem:*");
        jlFormItemType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlFormItemType);

        moKeyFormItemType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel6.add(moKeyFormItemType);

        jpFormula1.add(jPanel6);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFormFamily.setText("Familia:*");
        jlFormFamily.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlFormFamily);

        moKeyFormFamily.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel16.add(moKeyFormFamily);

        jpFormula1.add(jPanel16);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFormItem.setBackground(new java.awt.Color(255, 204, 102));
        jlFormItem.setText("Producto:*");
        jlFormItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlFormItem);

        moKeyFormItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel15.add(moKeyFormItem);

        jpFormula1.add(jPanel15);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFormUnit.setBackground(new java.awt.Color(255, 204, 102));
        jlFormUnit.setText("Unidad medida:");
        jlFormUnit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlFormUnit);

        jtfFormUnit.setEditable(false);
        jtfFormUnit.setFocusable(false);
        jtfFormUnit.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel21.add(jtfFormUnit);

        jpFormula1.add(jPanel21);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFormPresent.setBackground(new java.awt.Color(255, 204, 102));
        jlFormPresent.setText("Presentación:");
        jlFormPresent.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlFormPresent);

        jtfFormPresent.setEditable(false);
        jtfFormPresent.setFocusable(false);
        jtfFormPresent.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel8.add(jtfFormPresent);

        jpFormula1.add(jPanel8);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFormReference.setBackground(new java.awt.Color(255, 204, 102));
        jlFormReference.setText("Referencia:");
        jlFormReference.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlFormReference);

        moTextFormReference.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel12.add(moTextFormReference);

        jpFormula1.add(jPanel12);

        jpFormula.add(jpFormula1, java.awt.BorderLayout.CENTER);

        jpFormula2.setLayout(new java.awt.GridLayout(1, 2));

        jpFormula21.setLayout(new java.awt.GridLayout(7, 1, 0, 5));

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemQuantity.setBackground(new java.awt.Color(255, 204, 102));
        jlItemQuantity.setText("Cantidad prod.:*");
        jlItemQuantity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlItemQuantity);
        jPanel9.add(moCompItemQuantity);

        jpFormula21.add(jPanel9);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemMassUnit.setBackground(new java.awt.Color(255, 204, 102));
        jlItemMassUnit.setText("Masa unit. prod.:");
        jlItemMassUnit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jlItemMassUnit);

        moCompItemMassUnit.setEditable(false);
        jPanel22.add(moCompItemMassUnit);

        jpFormula21.add(jPanel22);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemMass.setBackground(new java.awt.Color(255, 204, 102));
        jlItemMass.setText("Masa prod.:");
        jlItemMass.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(jlItemMass);

        moCompItemMass.setEditable(false);
        jPanel1.add(moCompItemMass);

        jpFormula21.add(jPanel1);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemBrix.setBackground(new java.awt.Color(255, 204, 102));
        jlItemBrix.setText("°Bx prod.:");
        jlItemBrix.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel23.add(jlItemBrix);

        moCompItemBrix.setEditable(false);
        jPanel23.add(moCompItemBrix);

        jpFormula21.add(jPanel23);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemMassSolid.setBackground(new java.awt.Color(255, 204, 102));
        jlItemMassSolid.setText("Masa sólida prod.:");
        jlItemMassSolid.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel24.add(jlItemMassSolid);

        moCompItemMassSolid.setEditable(false);
        jPanel24.add(moCompItemMassSolid);

        jpFormula21.add(jPanel24);

        jpFormula2.add(jpFormula21);

        jpFormula22.setLayout(new java.awt.GridLayout(7, 1, 0, 5));

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFormMass.setText("Masa fórm.:");
        jlFormMass.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlFormMass);

        moCompFormMass.setEditable(false);
        jPanel10.add(moCompFormMass);

        jpFormula22.add(jPanel10);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFormBrix.setText("°Bx fórm.:");
        jlFormBrix.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlFormBrix);

        moCompFormBrix.setEditable(false);
        jPanel13.add(moCompFormBrix);

        jpFormula22.add(jPanel13);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFormMassSolid.setText("Masa sólida fórm.:");
        jlFormMassSolid.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel25.add(jlFormMassSolid);

        moCompFormMassSolid.setEditable(false);
        jPanel25.add(moCompFormMassSolid);

        jpFormula22.add(jPanel25);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTargetBrix.setText("°Bx meta fórm.:*");
        jlTargetBrix.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel26.add(jlTargetBrix);
        jPanel26.add(moCompTargetBrix);

        jpFormula22.add(jPanel26);

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTargetMass.setText("Masa meta fórm.:");
        jlTargetMass.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel27.add(jlTargetMass);

        moCompTargetMass.setEditable(false);
        jPanel27.add(moCompTargetMass);

        jpFormula22.add(jPanel27);

        jpFormula2.add(jpFormula22);

        jpFormula.add(jpFormula2, java.awt.BorderLayout.EAST);

        jpContainer.add(jpFormula, java.awt.BorderLayout.NORTH);

        jpComps.setBorder(javax.swing.BorderFactory.createTitledBorder("Componentes:"));
        jpComps.setLayout(new java.awt.BorderLayout());

        jpComps1.setLayout(new java.awt.BorderLayout());

        jpComps11.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbgCompType.add(moRadCompTypeItem);
        moRadCompTypeItem.setText("Ítem");
        jPanel14.add(moRadCompTypeItem);

        jbgCompType.add(moRadCompTypeFamily);
        moRadCompTypeFamily.setText("Familia");
        jPanel14.add(moRadCompTypeFamily);

        jpComps11.add(jPanel14);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCompItemType.setText("Tipo ítem:*");
        jlCompItemType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlCompItemType);

        moKeyCompItemType.setToolTipText("Tipo componente");
        moKeyCompItemType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel17.add(moKeyCompItemType);

        jpComps11.add(jPanel17);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCompFamily.setText("Familia:*");
        jlCompFamily.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jlCompFamily);

        moKeyCompFamily.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel20.add(moKeyCompFamily);

        jpComps11.add(jPanel20);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCompItem.setText("Componente:*");
        jlCompItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel18.add(jlCompItem);

        moKeyCompItem.setToolTipText("Componente");
        moKeyCompItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel18.add(moKeyCompItem);

        jpComps11.add(jPanel18);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCompUnit.setText("Unidad medida:");
        jlCompUnit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel19.add(jlCompUnit);

        jtfCompUnit.setEditable(false);
        jtfCompUnit.setFocusable(false);
        jtfCompUnit.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel19.add(jtfCompUnit);

        jpComps11.add(jPanel19);

        jpComps1.add(jpComps11, java.awt.BorderLayout.CENTER);

        jpComps12.setLayout(new java.awt.GridLayout(1, 2));

        jpComps121.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCompQuantity.setText("Cantidad comp.:*");
        jlCompQuantity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlCompQuantity);
        jPanel11.add(moCompCompQuantity);

        jpComps121.add(jPanel11);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCompMassUnit.setText("Masa unit. comp.:");
        jlCompMassUnit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlCompMassUnit);

        moCompCompMassUnit.setEditable(false);
        jPanel7.add(moCompCompMassUnit);

        jpComps121.add(jPanel7);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCompMass.setText("Masa comp.:");
        jlCompMass.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlCompMass);

        moCompCompMass.setEditable(false);
        jPanel4.add(moCompCompMass);

        jpComps121.add(jPanel4);

        jPanel31.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCompBrix.setText("°Bx comp.:");
        jlCompBrix.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel31.add(jlCompBrix);

        moCompCompBrix.setEditable(false);
        jPanel31.add(moCompCompBrix);

        jpComps121.add(jPanel31);

        jPanel32.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCompMassSolid.setText("Masa sólida comp.:");
        jlCompMassSolid.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel32.add(jlCompMassSolid);

        moCompCompMassSolid.setEditable(false);
        jPanel32.add(moCompCompMassSolid);

        jpComps121.add(jPanel32);

        jpComps12.add(jpComps121);

        jpComps122.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel34.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCompCompIncType.setText("Tipo incorporación:*");
        jlCompCompIncType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel34.add(jlCompCompIncType);

        moKeyCompCompIncType.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel34.add(moKeyCompCompIncType);

        jpComps122.add(jPanel34);

        jPanel35.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCompExclusionLabel.setText("Etiqueta exclusión:*");
        jlCompExclusionLabel.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel35.add(jlCompExclusionLabel);

        moTextCompExclusionLabel.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel35.add(moTextCompExclusionLabel);

        jpComps122.add(jPanel35);

        jPanel33.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jbCompAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_add.gif"))); // NOI18N
        jbCompAdd.setToolTipText("Agregar");
        jbCompAdd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel33.add(jbCompAdd);

        jbCompClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_clear.gif"))); // NOI18N
        jbCompClear.setToolTipText("Limpiar");
        jbCompClear.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel33.add(jbCompClear);

        jpComps122.add(jPanel33);

        jpComps12.add(jpComps122);

        jpComps1.add(jpComps12, java.awt.BorderLayout.EAST);

        jpComps.add(jpComps1, java.awt.BorderLayout.NORTH);

        jpContainer.add(jpComps, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCompAdd;
    private javax.swing.JButton jbCompClear;
    private javax.swing.ButtonGroup jbgCompType;
    private javax.swing.JLabel jlCompBrix;
    private javax.swing.JLabel jlCompCompIncType;
    private javax.swing.JLabel jlCompExclusionLabel;
    private javax.swing.JLabel jlCompFamily;
    private javax.swing.JLabel jlCompItem;
    private javax.swing.JLabel jlCompItemType;
    private javax.swing.JLabel jlCompMass;
    private javax.swing.JLabel jlCompMassSolid;
    private javax.swing.JLabel jlCompMassUnit;
    private javax.swing.JLabel jlCompQuantity;
    private javax.swing.JLabel jlCompUnit;
    private javax.swing.JLabel jlFormBrix;
    private javax.swing.JLabel jlFormFamily;
    private javax.swing.JLabel jlFormItem;
    private javax.swing.JLabel jlFormItemType;
    private javax.swing.JLabel jlFormMass;
    private javax.swing.JLabel jlFormMassSolid;
    private javax.swing.JLabel jlFormPresent;
    private javax.swing.JLabel jlFormReference;
    private javax.swing.JLabel jlFormUnit;
    private javax.swing.JLabel jlFormulaType;
    private javax.swing.JLabel jlItemBrix;
    private javax.swing.JLabel jlItemMass;
    private javax.swing.JLabel jlItemMassSolid;
    private javax.swing.JLabel jlItemMassUnit;
    private javax.swing.JLabel jlItemQuantity;
    private javax.swing.JLabel jlTargetBrix;
    private javax.swing.JLabel jlTargetMass;
    private javax.swing.JPanel jpComps;
    private javax.swing.JPanel jpComps1;
    private javax.swing.JPanel jpComps11;
    private javax.swing.JPanel jpComps12;
    private javax.swing.JPanel jpComps121;
    private javax.swing.JPanel jpComps122;
    private javax.swing.JPanel jpContainer;
    private javax.swing.JPanel jpFormula;
    private javax.swing.JPanel jpFormula1;
    private javax.swing.JPanel jpFormula2;
    private javax.swing.JPanel jpFormula21;
    private javax.swing.JPanel jpFormula22;
    private javax.swing.JTextField jtfCompUnit;
    private javax.swing.JTextField jtfFormPresent;
    private javax.swing.JTextField jtfFormUnit;
    private sba.lib.gui.bean.DBeanCompoundField moCompCompBrix;
    private sba.lib.gui.bean.DBeanCompoundField moCompCompMass;
    private sba.lib.gui.bean.DBeanCompoundField moCompCompMassSolid;
    private sba.lib.gui.bean.DBeanCompoundField moCompCompMassUnit;
    private sba.lib.gui.bean.DBeanCompoundField moCompCompQuantity;
    private sba.lib.gui.bean.DBeanCompoundField moCompFormBrix;
    private sba.lib.gui.bean.DBeanCompoundField moCompFormMass;
    private sba.lib.gui.bean.DBeanCompoundField moCompFormMassSolid;
    private sba.lib.gui.bean.DBeanCompoundField moCompItemBrix;
    private sba.lib.gui.bean.DBeanCompoundField moCompItemMass;
    private sba.lib.gui.bean.DBeanCompoundField moCompItemMassSolid;
    private sba.lib.gui.bean.DBeanCompoundField moCompItemMassUnit;
    private sba.lib.gui.bean.DBeanCompoundField moCompItemQuantity;
    private sba.lib.gui.bean.DBeanCompoundField moCompTargetBrix;
    private sba.lib.gui.bean.DBeanCompoundField moCompTargetMass;
    private sba.lib.gui.bean.DBeanFieldKey moKeyCompCompIncType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyCompFamily;
    private sba.lib.gui.bean.DBeanFieldKey moKeyCompItem;
    private sba.lib.gui.bean.DBeanFieldKey moKeyCompItemType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyFormFamily;
    private sba.lib.gui.bean.DBeanFieldKey moKeyFormItem;
    private sba.lib.gui.bean.DBeanFieldKey moKeyFormItemType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyFormulaType;
    private sba.lib.gui.bean.DBeanFieldRadio moRadCompTypeFamily;
    private sba.lib.gui.bean.DBeanFieldRadio moRadCompTypeItem;
    private sba.lib.gui.bean.DBeanFieldText moTextCompExclusionLabel;
    private sba.lib.gui.bean.DBeanFieldText moTextFormReference;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        String mass = "";
        
        DGuiUtils.setWindowBounds(this, 960, 600);
        
        moKeyFormulaType.setKeySettings(miClient, DGuiUtils.getLabelName(jlFormulaType), true);
        moKeyFormItemType.setKeySettings(miClient, DGuiUtils.getLabelName(jlFormItemType), true);
        moKeyFormFamily.setKeySettings(miClient, DGuiUtils.getLabelName(jlFormFamily), true);
        moKeyFormItem.setKeySettings(miClient, DGuiUtils.getLabelName(jlFormItem), true);
        moTextFormReference.setTextSettings(DGuiUtils.getLabelName(jlFormReference), 50, 0);
        
        moCompItemQuantity.setCompoundFieldSettings(miClient);
        moCompItemQuantity.getField().setDecimalSettings(DGuiUtils.getLabelName(jlItemQuantity), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCompItemMassUnit.setCompoundFieldSettings(miClient);
        moCompItemMassUnit.getField().setDecimalSettings(DGuiUtils.getLabelName(jlItemMassUnit), DGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);
        moCompItemMass.setCompoundFieldSettings(miClient);
        moCompItemMass.getField().setDecimalSettings(DGuiUtils.getLabelName(jlItemMass), DGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCompItemBrix.setCompoundFieldSettings(miClient);
        moCompItemBrix.getField().setDecimalSettings(DGuiUtils.getLabelName(jlItemBrix), DGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCompItemMassSolid.setCompoundFieldSettings(miClient);
        moCompItemMassSolid.getField().setDecimalSettings(DGuiUtils.getLabelName(jlItemMassSolid), DGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCompFormMass.setCompoundFieldSettings(miClient);
        moCompFormMass.getField().setDecimalSettings(DGuiUtils.getLabelName(jlFormMass), DGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCompFormBrix.setCompoundFieldSettings(miClient);
        moCompFormBrix.getField().setDecimalSettings(DGuiUtils.getLabelName(jlFormBrix), DGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCompFormMassSolid.setCompoundFieldSettings(miClient);
        moCompFormMassSolid.getField().setDecimalSettings(DGuiUtils.getLabelName(jlFormMassSolid), DGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCompTargetBrix.setCompoundFieldSettings(miClient);
        moCompTargetBrix.getField().setDecimalSettings(DGuiUtils.getLabelName(jlTargetBrix), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCompTargetBrix.getField().setMaxDouble(DCfgConsts.BRIX_MAX);
        moCompTargetMass.setCompoundFieldSettings(miClient);
        moCompTargetMass.getField().setDecimalSettings(DGuiUtils.getLabelName(jlTargetMass), DGuiConsts.GUI_TYPE_DEC_QTY, false);
        
        moRadCompTypeItem.setBooleanSettings(moRadCompTypeItem.getText(), true);
        moRadCompTypeFamily.setBooleanSettings(moRadCompTypeFamily.getText(), false);
        moKeyCompItemType.setKeySettings(miClient, DGuiUtils.getLabelName(jlCompItemType), true);
        moKeyCompFamily.setKeySettings(miClient, DGuiUtils.getLabelName(jlCompFamily), true);
        moKeyCompItem.setKeySettings(miClient, DGuiUtils.getLabelName(jlCompItem), true);
        
        moCompCompQuantity.setCompoundFieldSettings(miClient);
        moCompCompQuantity.getField().setDecimalSettings(DGuiUtils.getLabelName(jlCompQuantity), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCompCompMassUnit.setCompoundFieldSettings(miClient);
        moCompCompMassUnit.getField().setDecimalSettings(DGuiUtils.getLabelName(jlCompMassUnit), DGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);
        moCompCompMass.setCompoundFieldSettings(miClient);
        moCompCompMass.getField().setDecimalSettings(DGuiUtils.getLabelName(jlCompMass), DGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCompCompBrix.setCompoundFieldSettings(miClient);
        moCompCompBrix.getField().setDecimalSettings(DGuiUtils.getLabelName(jlCompBrix), DGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCompCompMassSolid.setCompoundFieldSettings(miClient);
        moCompCompMassSolid.getField().setDecimalSettings(DGuiUtils.getLabelName(jlCompMassSolid), DGuiConsts.GUI_TYPE_DEC_QTY, false);
        moKeyCompCompIncType.setKeySettings(miClient, DGuiUtils.getLabelName(jlCompCompIncType), true);
        moTextCompExclusionLabel.setTextSettings(DGuiUtils.getLabelName(jlCompExclusionLabel), 25, 1);
        
        moFields.addField(moKeyFormulaType);
        moFields.addField(moKeyFormItemType);
        moFields.addField(moKeyFormFamily);
        moFields.addField(moKeyFormItem);
        moFields.addField(moTextFormReference);
        
        moFields.addField(moCompItemQuantity.getField());
        //moFields.addField(moCompItemMassUnit.getField()); // always disabled
        //moFields.addField(moCompItemMass.getField()); // always disabled
        //moFields.addField(moCompItemBrix.getField()); // always disabled
        //moFields.addField(moCompItemMassSolid.getField()); // always disabled
        //moFields.addField(moCompFormMass.getField()); // always disabled
        //moFields.addField(moCompFormMassSolid.getField()); // always disabled
        //moFields.addField(moCompFormBrix.getField()); // always disabled
        moFields.addField(moCompTargetBrix.getField());
        //moFields.addField(moCompTargetMass.getField()); // always disabled
        
        //moFields.setFormButton(jbSave); // not required
        
        moFieldsComps = new DGuiFields();
        moFieldsComps.addField(moRadCompTypeItem);
        moFieldsComps.addField(moRadCompTypeFamily);
        moFieldsComps.addField(moKeyCompItemType);
        moFieldsComps.addField(moKeyCompFamily);
        moFieldsComps.addField(moKeyCompItem);
        
        moFieldsComps.addField(moCompCompQuantity.getField());
        //moFields.addField(moCompCompMassUnit.getField()); // always disabled
        //moFields.addField(moCompCompMass.getField()); // always disabled
        //moFields.addField(moCompCompBrix.getField()); // always disabled
        //moFields.addField(moCompCompMassSolid.getField()); // always disabled
        moFieldsComps.addField(moKeyCompCompIncType);
        moFieldsComps.addField(moTextCompExclusionLabel);
        
        moFieldsComps.setFormButton(jbCompAdd);
        
        moKeyGroupItem = new DGuiFieldKeyGroup(miClient);
        moKeyGroupComp = new DGuiFieldKeyGroup(miClient);
        
        mass = DCfgUtils.getMassUnitCode(miClient.getSession());
        
        moCompItemMassUnit.setCompoundText(mass);
        moCompItemMass.setCompoundText(mass);
        moCompItemMassSolid.setCompoundText(mass);
        moCompFormMass.setCompoundText(mass);
        moCompFormMassSolid.setCompoundText(mass);
        moCompTargetMass.setCompoundText(mass);
        
        moCompCompMassUnit.setCompoundText(mass);
        moCompCompMass.setCompoundText(mass);
        moCompCompMassSolid.setCompoundText(mass);
        
        moCompItemBrix.setCompoundText(DCfgConsts.BRIX);
        moCompFormBrix.setCompoundText(DCfgConsts.BRIX);
        moCompTargetBrix.setCompoundText(DCfgConsts.BRIX);
        
        moCompCompBrix.setCompoundText(DCfgConsts.BRIX);
        
        mjCompModify = DGridUtils.createButton(new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_edit.gif")), "Modificar", this);
        mjCompMoveUp = DGridUtils.createButton(new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_move_up.gif")), "Mover arriba", this);
        mjCompMoveDown = DGridUtils.createButton(new ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_move_down.gif")), "Mover abajo", this);
        
        moGridComps = new DGridPaneForm(miClient, mnFormType, DModConsts.MU_FRM_CMP, DGuiUtils.getLabelName(((TitledBorder) jpComps.getBorder()).getTitle())) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, true);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[11];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_INT_1B, "# componente");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CAT, DGridConsts.COL_TITLE_TYPE + " componente");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CAT, DGridConsts.COL_TITLE_TYPE + " ítem componente");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_L, DGridConsts.COL_TITLE_NAME + " componente");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_ITM, DGridConsts.COL_TITLE_CODE + " componente");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cantidad");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad medida");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Masa (" + DCfgUtils.getMassUnitCode(miClient.getSession()) + ")");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Masa sólida (" + DCfgUtils.getMassUnitCode(miClient.getSession()) + ")");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CAT, DGridConsts.COL_TITLE_TYPE + " incorporación");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Etiqueta exclusión");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };
        
        moGridComps.setPaneFormOwner(this);
        moGridComps.getPanelCommandsSys(DGuiConsts.PANEL_CENTER).add(mjCompModify);
        moGridComps.getPanelCommandsSys(DGuiConsts.PANEL_CENTER).add(mjCompMoveUp);
        moGridComps.getPanelCommandsSys(DGuiConsts.PANEL_CENTER).add(mjCompMoveDown);
        
        jpComps.add(moGridComps, BorderLayout.CENTER);
        
        mvFormGrids.add(moGridComps);
    }
    
    private void updateFieldTargetBrix() {
        if (moItemForm == null) {
            moCompTargetBrix.setEditable(false);
        }
        else {
            moCompTargetBrix.setEditable(moItemForm.isBrix());
        }
    }
    
    private void renderFormItem() {
        if (moKeyFormItem.getSelectedIndex() <= 0) {
            moItemForm = null;
            
            jtfFormUnit.setText("");
            jtfFormPresent.setText("");
            
            moCompItemMassUnit.getField().resetField();
            moCompItemBrix.getField().resetField();
            moCompTargetBrix.getField().resetField();
            
            moCompItemQuantity.setCompoundText("");
        }
        else {
            moItemForm = (DDbItem) miClient.getSession().readRegistry(DModConsts.CU_ITM, moKeyFormItem.getValue());
            
            jtfFormUnit.setText(moItemForm.getRegUnit().getName());
            jtfFormUnit.setCaretPosition(0);
            jtfFormPresent.setText(moKeyFormItemType.getValue()[0] != DModSysConsts.CS_ITM_TP_PF ? "" : moItemForm.getRegPresent().getName());
            jtfFormPresent.setCaretPosition(0);
            
            moCompItemMassUnit.getField().setValue(moItemForm.getMassUnit());
            moCompItemBrix.getField().setValue(moItemForm.getBrix());
            moCompTargetBrix.getField().setValue(moItemForm.getBrix());
            
            moCompItemQuantity.setCompoundText(moItemForm.getRegUnit().getCode());
        }
        
        updateFieldTargetBrix();
        
        calculateItemMass();
        calculateFormulaMass();
    }
    
    private void renderCompItem() {
        if (!moRadCompTypeItem.isSelected() || moKeyCompItem.getSelectedIndex() <= 0) {
            moItemComp = null;
            
            jtfCompUnit.setText("");
            
            moCompCompMassUnit.getField().resetField();
            moCompCompBrix.getField().resetField();
            
            moCompCompQuantity.setCompoundText("");
        }
        else {
            moItemComp = (DDbItem) miClient.getSession().readRegistry(DModConsts.CU_ITM, moKeyCompItem.getValue());
            
            jtfCompUnit.setText(moItemComp.getRegUnit().getName());
            jtfCompUnit.setCaretPosition(0);
            
            moCompCompMassUnit.getField().setValue(moItemComp.getMassUnit());
            moCompCompBrix.getField().setValue(moItemComp.getBrix());
            
            moCompCompQuantity.setCompoundText(moItemComp.getRegUnit().getCode());
        }
        
        calculateCompMassWhenItem();
    }
    
    private void renderCompFamily() {
        if (!moRadCompTypeFamily.isSelected() || moKeyCompFamily.getSelectedIndex() <= 0) {
            moFamilyComp = null;
            
            jtfCompUnit.setText("");
            
            moCompCompMassUnit.getField().resetField();
            moCompCompBrix.getField().resetField();
            
            moCompCompQuantity.setCompoundText("");
        }
        else {
            moFamilyComp = (DDbFamily) miClient.getSession().readRegistry(DModConsts.CU_FAM, moKeyCompFamily.getValue());
            
            jtfCompUnit.setText(moFamilyComp.getRegUnit().getName());
            jtfCompUnit.setCaretPosition(0);
            
            moCompCompMassUnit.getField().setValue(moFamilyComp.getMassUnit());
            moCompCompBrix.getField().setValue(moFamilyComp.getBrix());
            
            moCompCompQuantity.setCompoundText(moFamilyComp.getRegUnit().getCode());
        }
        
        calculateCompMassWhenFamily();
    }
    
    private void renderFormulaComp() {
        if (moFormulaComp != null) {
            switch (moFormulaComp.getFkCompTypeId()) {
                case DModSysConsts.MS_CMP_TP_ITM:
                    moRadCompTypeItem.setSelected(true);
                    itemStateChangedCompTypeItem();
                    break;
                case DModSysConsts.MS_CMP_TP_FAM:
                    moRadCompTypeFamily.setSelected(true);
                    itemStateChangedCompTypeFamily();
                    break;
            }
            
            moKeyCompItemType.setValue(new int[] { moFormulaComp.getFkItemTypeId() });
            
            switch (moFormulaComp.getFkCompTypeId()) {
                case DModSysConsts.MS_CMP_TP_ITM:
                    moKeyCompFamily.setValue(new int[] { moFormulaComp.getFkFamilyId() });
                    moKeyCompItem.setValue(new int[] { moFormulaComp.getFkItemId() });
                    renderCompItem();
                    break;
                case DModSysConsts.MS_CMP_TP_FAM:
                    moKeyCompFamily.setValue(new int[] { moFormulaComp.getFkFamilyId() });
                    renderCompFamily();
                    break;
            }
            
            moCompCompQuantity.getField().setValue(moFormulaComp.getQuantity());
            moCompCompMassUnit.getField().setValue(moFormulaComp.getMassUnit());
            moCompCompMass.getField().setValue(moFormulaComp.getMass_r());
            moCompCompBrix.getField().setValue(moFormulaComp.getBrix());
            moCompCompMassSolid.getField().setValue(moFormulaComp.getMassSolid_r());
            
            moKeyCompCompIncType.setValue(new int[] { moFormulaComp.getFkCompIncTypeId() });
            moTextCompExclusionLabel.setValue(moFormulaComp.getExclusionLabel());
        }
    }
    
    private void calculateFormulaMass() {
        double mass = 0d;
        double massSolid = 0d;
        
        for (DGridRow row : moGridComps.getModel().getGridRows()) {
            mass += ((DDbFormulaComp) row).getMass_r();
            massSolid += ((DDbFormulaComp) row).getMassSolid_r();
        }
        
        moCompFormMass.getField().setValue(mass);
        moCompFormMassSolid.getField().setValue(massSolid);
        moCompFormBrix.getField().setValue(mass == 0d ? 0d : (massSolid / mass * DCfgConsts.BRIX_MAX));
        
        calculateTargetMass();
    }
    
    private void calculateTargetMass() {
        moCompTargetMass.getField().setValue(moCompTargetBrix.getField().getValue() == 0d ? 0d : (moCompFormMassSolid.getField().getValue() / moCompTargetBrix.getField().getValue() * DCfgConsts.BRIX_MAX));
    }
    
    private void calculateItemMass() {
        moCompItemMass.getField().setValue(moItemForm == null ? 0d : moCompItemQuantity.getField().getValue() * moItemForm.getMassUnit());
        moCompItemMassSolid.getField().setValue(moItemForm == null ? 0d : moCompItemMass.getField().getValue() * (moItemForm.getBrix() / DCfgConsts.BRIX_MAX));
    }
    
    private void calculateCompMassWhenItem() {
        moCompCompMass.getField().setValue(moItemComp == null ? 0d : moCompCompQuantity.getField().getValue() * moItemComp.getMassUnit());
        moCompCompMassSolid.getField().setValue(moItemComp == null ? 0d : moCompCompMass.getField().getValue() * (moItemComp.getBrix() / DCfgConsts.BRIX_MAX));
    }
    
    private void calculateCompMassWhenFamily() {
        moCompCompMass.getField().setValue(moFamilyComp == null ? 0d : moCompCompQuantity.getField().getValue() * moFamilyComp.getMassUnit());
        moCompCompMassSolid.getField().setValue(moFamilyComp == null ? 0d : moCompCompMass.getField().getValue() * (moFamilyComp.getBrix() / DCfgConsts.BRIX_MAX));
    }
    
    private void updateCompsNumbers() {
        int number = 0;
        
        for (DGridRow row : moGridComps.getModel().getGridRows()) {
            ((DDbFormulaComp) row).setPkCompId(++number);
        }
    }
    
    private void resetCompCompIncType() {
        moKeyCompCompIncType.setValue(new int[] { DModSysConsts.MS_CMP_INC_TP_SNG_REQ });
        itemStateChangedCompCompIncType();
    }
    
    private void doCompAdd() {
        DGuiValidation validation = moFieldsComps.validateFields();

        if (validation.isValid()) {
            int indexItemType = moKeyCompItemType.getSelectedIndex();
            int indexFamily = moKeyCompFamily.getSelectedIndex();
            DDbFormulaComp comp = null;
            
            comp = moFormulaComp != null ? moFormulaComp : new DDbFormulaComp();

            //comp.setPkFormulaId(...);
            //comp.setPkCompId(...);
            comp.setQuantity(moCompCompQuantity.getField().getValue());
            //comp.setMassUnit(...);
            //comp.setMass_r(...);
            //comp.setBrix(...);
            //comp.setMassSolid_r(...);
            comp.setExclusionLabel(moTextCompExclusionLabel.getValue());
            comp.setFkCompTypeId(moRadCompTypeItem.isSelected() ? DModSysConsts.MS_CMP_TP_ITM : DModSysConsts.MS_CMP_TP_FAM);
            comp.setFkCompIncTypeId(moKeyCompCompIncType.getValue()[0]);
            comp.setFkItemId(moKeyCompItem.getSelectedIndex() <= 0 ? DModSysConsts.CU_ITM_ND : moKeyCompItem.getValue()[0]);
            comp.setFkFamilyId(moKeyCompFamily.getSelectedIndex() <= 0 ? DModSysConsts.CU_FAM_ND : moKeyCompFamily.getValue()[0]);
            //comp.setFkItemTypeId(...);
            //comp.setFkUnitId(...);

            comp.compute(miClient.getSession());

            if (moFormulaComp != null) {
                moFormulaComp = null;
            }
            else {
                moGridComps.addGridRow(comp);
                updateCompsNumbers();
            }
            
            moGridComps.renderGridRows();
            moGridComps.setSelectedGridRow(moGridComps.getTable().getRowCount() - 1);

            calculateFormulaMass();
            actionPerformedCompClear();

            if (indexItemType < moKeyCompItemType.getItemCount()) {
                moKeyCompItemType.setSelectedIndex(indexItemType);
                if (indexFamily < moKeyCompFamily.getItemCount() && moRadCompTypeItem.isSelected()) {
                    moKeyCompFamily.setSelectedIndex(indexFamily);
                }
            }
        }
        
        if (!validation.isValid()) {
            DGuiUtils.computeValidation(miClient, validation);
        }
    }
    
    private void doCompDelete() {
        calculateFormulaMass();
    }
    
    private void doRowClear() {
        moFormulaComp = null;
        
        moFieldsComps.resetFields();
        moCompCompMassUnit.getField().resetField();
        moCompCompMass.getField().resetField();
        moCompCompBrix.getField().resetField();
        moCompCompMassSolid.getField().resetField();
        
        renderCompItem();
        resetCompCompIncType();
    }
    
    private void actionPerformedCompAdd() {
        doCompAdd();
    }
    
    private void actionPerformedCompClear() {
        doRowClear();
        moKeyCompItemType.requestFocus();
    }
    
    private void actionPerformedCompModify() {
        if (moGridComps.getTable().getSelectedRowCount() != 1) {
            miClient.showMsgBoxInformation(DGridConsts.MSG_SELECT_ROW);
        }
        else {
            moFormulaComp = (DDbFormulaComp) moGridComps.getSelectedGridRow();
            renderFormulaComp();
            moKeyCompItemType.requestFocus();
        }
    }
    
    private void actionPerformedCompMoveUp() {
        int index = -1;
        DGridRow row = null;
        
        if (moGridComps.getTable().getSelectedRowCount() != 1) {
            miClient.showMsgBoxInformation(DGridConsts.MSG_SELECT_ROW);
        }
        else if ((index = moGridComps.getTable().getSelectedRow()) > 0) {
            row = moGridComps.getModel().getGridRows().remove(index);
            moGridComps.getModel().getGridRows().add(index - 1, row);
            updateCompsNumbers();
            moGridComps.renderGridRows();
            moGridComps.setSelectedGridRow(index - 1);
        }
    }
    
    private void actionPerformedCompMoveDown() {
        int index = -1;
        DGridRow row = null;
        
        if (moGridComps.getTable().getSelectedRowCount() != 1) {
            miClient.showMsgBoxInformation(DGridConsts.MSG_SELECT_ROW);
        }
        else if ((index = moGridComps.getTable().getSelectedRow()) < moGridComps.getTable().getRowCount() - 1) {
            row = moGridComps.getModel().getGridRows().remove(index);
            moGridComps.getModel().getGridRows().add(index + 1, row);
            updateCompsNumbers();
            moGridComps.renderGridRows();
            moGridComps.setSelectedGridRow(index + 1);
        }
    }
    
    private void itemStateChangedFormulaType() {
        if (moKeyFormulaType.getSelectedIndex() <= 0) {
            moKeyCompCompIncType.setEnabled(false);
        }
        else {
            moKeyCompCompIncType.setEnabled(moKeyFormulaType.getValue()[0] == DModSysConsts.MS_FRM_TP_VAR);
        }
        
        resetCompCompIncType();
    }
    
    private void itemStateChangedFormItem() {
        renderFormItem();
    }
    
    private void itemStateChangedCompTypeItem() {
        moKeyGroupComp.initGroup();
        moKeyGroupComp.addFieldKey(moKeyCompItemType, DModConsts.CX_ITM_TP_CMP, DLibConsts.UNDEFINED, null);
        moKeyGroupComp.addFieldKey(moKeyCompFamily, DModConsts.CU_FAM, DLibConsts.UNDEFINED, null);
        moKeyGroupComp.addFieldKey(moKeyCompItem, DModConsts.CX_ITM_FK_FAM, DLibConsts.UNDEFINED, null);
        moKeyGroupComp.populateCatalogues();
        moKeyGroupComp.resetGroup();
    }
    
    private void itemStateChangedCompTypeFamily() {
        moKeyGroupComp.initGroup();
        moKeyGroupComp.addFieldKey(moKeyCompItemType, DModConsts.CX_ITM_TP_CMP, DLibConsts.UNDEFINED, null);
        moKeyGroupComp.addFieldKey(moKeyCompFamily, DModConsts.CU_FAM, DLibConsts.UNDEFINED, null);
        moKeyGroupComp.populateCatalogues();
        moKeyGroupComp.resetGroup();
        
        moKeyCompItem.setEnabled(false);
        moKeyCompItem.removeAllItems();
    }
    
    private void itemStateChangedCompItem() {
        renderCompItem();
    }
    
    private void itemStateChangedCompFamily() {
        renderCompFamily();
    }
    
    private void itemStateChangedCompCompIncType() {
        if (moKeyCompCompIncType.getSelectedIndex() <= 0) {
            moTextCompExclusionLabel.setEditable(false);
        }
        else {
            moTextCompExclusionLabel.setEditable(DLibUtils.belongsTo(moKeyCompCompIncType.getValue()[0], new int[] { DModSysConsts.MS_CMP_INC_TP_EXC_REQ, DModSysConsts.MS_CMP_INC_TP_EXC_OPT }));
        }
        
        moTextCompExclusionLabel.resetField();
    }
    
    private void focusLostItemQuantity() {
        calculateItemMass();
    }
    
    private void focusLostTargetBrix() {
        calculateTargetMass();
    }
    
    private void focusLostCompQuantity() {
        if (moRadCompTypeItem.isSelected()) {
            calculateCompMassWhenItem();
        }
        else {
            calculateCompMassWhenFamily();
        }
    }
    
    /*
     * Public methods
     */
    
    /*
     * Overriden methods
     */
    
    @Override
    public void addAllListeners() {
        jbCompAdd.addActionListener(this);
        jbCompClear.addActionListener(this);
        mjCompModify.addActionListener(this);
        mjCompMoveUp.addActionListener(this);
        mjCompMoveDown.addActionListener(this);
        moKeyFormulaType.addItemListener(this);
        moKeyFormItem.addItemListener(this);
        moKeyCompFamily.addItemListener(this);
        moKeyCompItem.addItemListener(this);
        moRadCompTypeFamily.addItemListener(this);
        moRadCompTypeItem.addItemListener(this);
        moKeyCompCompIncType.addItemListener(this);
        moCompItemQuantity.getField().getComponent().addFocusListener(this);
        moCompTargetBrix.getField().getComponent().addFocusListener(this);
        moCompCompQuantity.getField().getComponent().addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbCompAdd.removeActionListener(this);
        jbCompClear.removeActionListener(this);
        mjCompModify.removeActionListener(this);
        mjCompMoveUp.removeActionListener(this);
        mjCompMoveDown.removeActionListener(this);
        moKeyFormulaType.removeItemListener(this);
        moKeyFormItem.removeItemListener(this);
        moKeyCompFamily.removeItemListener(this);
        moKeyCompItem.removeItemListener(this);
        moRadCompTypeFamily.removeItemListener(this);
        moRadCompTypeItem.removeItemListener(this);
        moKeyCompCompIncType.removeItemListener(this);
        moCompItemQuantity.getField().getComponent().removeFocusListener(this);
        moCompTargetBrix.getField().getComponent().removeFocusListener(this);
        moCompCompQuantity.getField().getComponent().removeFocusListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyFormulaType, DModConsts.MS_FRM_TP, DLibConsts.UNDEFINED, null);
        
        moKeyGroupItem.initGroup();
        moKeyGroupItem.addFieldKey(moKeyFormItemType, DModConsts.CX_ITM_TP_PRO_MFG, DLibConsts.UNDEFINED, null);
        moKeyGroupItem.addFieldKey(moKeyFormFamily, DModConsts.CU_FAM, DLibConsts.UNDEFINED, null);
        moKeyGroupItem.addFieldKey(moKeyFormItem, DModConsts.CX_ITM_FK_FAM, DLibConsts.UNDEFINED, null);
        moKeyGroupItem.populateCatalogues();
        
        miClient.getSession().populateCatalogue(moKeyCompCompIncType, DModConsts.MS_CMP_INC_TP, DLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        moRegistry = (DDbFormula) registry;
        moFormulaComp = null;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(DLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeyFormulaType.setValue(new int[] { moRegistry.getFkFormulaTypeId() });
        moKeyFormItemType.setValue(new int[] { moRegistry.getFkItemTypeId() });
        moKeyFormFamily.setValue(new int[] { moRegistry.getRegItem() == null ? DLibConsts.UNDEFINED : moRegistry.getRegItem().getFkFamilyId() });
        moKeyFormItem.setValue(new int[] { moRegistry.getFkItemId() });
        itemStateChangedFormItem();
        moTextFormReference.setValue(moRegistry.getReference());
        moCompItemQuantity.getField().setValue(moRegistry.getQuantity());
        moCompItemMassUnit.getField().setValue(moRegistry.getItemMassUnit());
        moCompItemMass.getField().setValue(moRegistry.getItemMass_r());
        moCompItemBrix.getField().setValue(moRegistry.getItemBrix());
        moCompItemMassSolid.getField().setValue(moRegistry.getItemMassSolid_r());
        moCompFormMass.getField().setValue(moRegistry.getFormulaMass_r());
        moCompFormBrix.getField().setValue(moRegistry.getFormulaBrix_r());
        moCompFormMassSolid.getField().setValue(moRegistry.getFormulaMassSolid_r());
        moCompTargetBrix.getField().setValue(moRegistry.getTargetBrix());
        moCompTargetMass.getField().setValue(moRegistry.getTargetMass_r());
        
        moGridComps.populateGrid(new Vector<>(moRegistry.getChildComps()));
        
        setFormEditable(true);
        
        itemStateChangedFormulaType();
        updateFieldTargetBrix();
        
        moRadCompTypeItem.setSelected(true);
        itemStateChangedCompTypeItem();
        
        doRowClear();
        
        if (moRegistry.isRegistryNew()) {
            moKeyGroupItem.resetGroup();
        }
        else {
        }
        
        addAllListeners();
    }

    @Override
    public DDbFormula getRegistry() throws Exception {
        DDbFormula registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            //registry.setPkFormulaId(...);
        }

        //registry.setCode(...);
        //registry.setName(...);
        registry.setReference(moTextFormReference.getValue());
        registry.setQuantity(moCompItemQuantity.getField().getValue());
        //registry.setItemMassUnit(...);
        //registry.setItemMass_r(...);
        //registry.setItemBrix(...);
        //registry.setItemMassSolid_r(...);
        //registry.setFormulaMass_r(...);
        //registry.setFormulaMassSolid_r(...);
        //registry.setFormulaBrix_r(...);
        registry.setTargetBrix(moCompTargetBrix.getField().getValue());
        //registry.setTargetMass_r(...);
        //registry.setDeleted(...);
        //registry.setSystem(...);
        registry.setFkFormulaTypeId(moKeyFormulaType.getValue()[0]);
        registry.setFkItemId(moKeyFormItem.getValue()[0]);
        //registry.setFkItemTypeId(...);
        //registry.setFkUnitId(...);
        //registry.setFkPresentId(...);
        
        registry.getChildComps().clear();
        for (DGridRow row : moGridComps.getModel().getGridRows()) {
            registry.getChildComps().add((DDbFormulaComp) row);
        }

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        return moFields.validateFields();
    }

    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        doCompDelete();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbCompAdd) {
                actionPerformedCompAdd();
            }
            else if (button == jbCompClear) {
                actionPerformedCompClear();
            }
            else if (button == mjCompModify) {
                actionPerformedCompModify();
            }
            else if (button == mjCompMoveUp) {
                actionPerformedCompMoveUp();
            }
            else if (button == mjCompMoveDown) {
                actionPerformedCompMoveDown();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldKey) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldKey field = (DBeanFieldKey) e.getSource();
                
                if (field == moKeyFormulaType) {
                    itemStateChangedFormulaType();
                }
                else if (field == moKeyFormItem) {
                    itemStateChangedFormItem();
                }
                else if (field == moKeyCompItem) {
                    itemStateChangedCompItem();
                }
                else if (field == moKeyCompFamily) {
                    itemStateChangedCompFamily();
                }
                else if (field == moKeyCompCompIncType) {
                    itemStateChangedCompCompIncType();
                }
            }
        }
        else if (e.getSource() instanceof DBeanFieldRadio) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldRadio field = (DBeanFieldRadio) e.getSource();

                if (field == moRadCompTypeItem) {
                    itemStateChangedCompTypeItem();
                }
                else if (field == moRadCompTypeFamily) {
                    itemStateChangedCompTypeFamily();
                }
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {

    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof DBeanFieldDecimal) {
            DBeanFieldDecimal field = (DBeanFieldDecimal) e.getSource();
            
            if (field == moCompItemQuantity.getField()) {
                focusLostItemQuantity();
            }
            else if (field == moCompTargetBrix.getField()) {
                focusLostTargetBrix();
            }
            else if (field == moCompCompQuantity.getField()) {
                focusLostCompQuantity();
            }
        }
    }
}
