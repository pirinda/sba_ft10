/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFormFormula.java
 *
 * Created on 29/08/2011, 08:02:13 PM
 */

package ft.mod.mfg.form;

import ft.mod.DModConsts;
import ft.mod.DModSysConsts;
import ft.mod.cfg.db.DDbConfig;
import ft.mod.cfg.db.DDbItem;
import ft.mod.mfg.db.DDbFormula;
import ft.mod.mfg.db.DDbFormulaComp;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Vector;
import javax.swing.JButton;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridPaneFormOwner;
import sba.lib.grid.DGridRow;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiFieldKeyGroup;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldBoolean;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanFieldText;
import sba.lib.gui.bean.DBeanForm;

/**
 *
 * @author Sergio Flores
 */
public class DFormFormula extends DBeanForm implements DGridPaneFormOwner, ActionListener, ItemListener, FocusListener {

    private DDbFormula moRegistry;
    private DDbConfig moConfig;
    private DGuiFieldKeyGroup moKeyGroupRef;
    private DGuiFieldKeyGroup moKeyGroupComp;
    private DGridPaneForm moGridComps;

    /** Creates new form DFormFormula */
    public DFormFormula(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.MU_FRM, DLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContainer = new javax.swing.JPanel();
        jpFormula = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jlFormulaType = new javax.swing.JLabel();
        moKeyFormulaType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel6 = new javax.swing.JPanel();
        jlItemType = new javax.swing.JLabel();
        moKeyItemType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel15 = new javax.swing.JPanel();
        jlReferenceType = new javax.swing.JLabel();
        moKeyReferenceType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel10 = new javax.swing.JPanel();
        jlReference = new javax.swing.JLabel();
        moKeyReference = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel12 = new javax.swing.JPanel();
        jlNameReference = new javax.swing.JLabel();
        moTextNameReference = new sba.lib.gui.bean.DBeanFieldText();
        jPanel7 = new javax.swing.JPanel();
        jlUnit = new javax.swing.JLabel();
        jtfUnit = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jlPresent = new javax.swing.JLabel();
        jtfPresent = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        jtfName = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jlQuantity = new javax.swing.JLabel();
        moCompQuantity = new sba.lib.gui.bean.DBeanCompoundField();
        moBoolQuantityByVar1 = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel14 = new javax.swing.JPanel();
        jlDefaultVar1 = new javax.swing.JLabel();
        moCompDefaultVar1 = new sba.lib.gui.bean.DBeanCompoundField();
        jpComps = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        moKeyCompItemType = new sba.lib.gui.bean.DBeanFieldKey();
        moBoolCompStandard = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolCompConsByVar1 = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel11 = new javax.swing.JPanel();
        moKeyCompItem = new sba.lib.gui.bean.DBeanFieldKey();
        jlCompQuantity = new javax.swing.JLabel();
        moCompCompQuantity = new sba.lib.gui.bean.DBeanCompoundField();
        jlCompStatisticsReference = new javax.swing.JLabel();
        moTextCompStatisticsReference = new sba.lib.gui.bean.DBeanFieldText();
        jbCompAdd = new javax.swing.JButton();
        jbCompClear = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jbCompMoveUp = new javax.swing.JButton();
        jbCompMoveDown = new javax.swing.JButton();

        jpContainer.setLayout(new java.awt.BorderLayout());

        jpFormula.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpFormula.setLayout(new java.awt.GridLayout(10, 1, 0, 5));

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFormulaType.setText("Tipo fórmula:*");
        jlFormulaType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlFormulaType);

        moKeyFormulaType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel5.add(moKeyFormulaType);

        jpFormula.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemType.setText("Tipo producto:*");
        jlItemType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlItemType);

        moKeyItemType.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel6.add(moKeyItemType);

        jpFormula.add(jPanel6);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlReferenceType.setText("Tipo destino:*");
        jlReferenceType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlReferenceType);

        moKeyReferenceType.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel15.add(moKeyReferenceType);

        jpFormula.add(jPanel15);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlReference.setText("Destino:*");
        jlReference.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlReference);

        moKeyReference.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel10.add(moKeyReference);

        jpFormula.add(jPanel10);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNameReference.setText("Referencia:");
        jlNameReference.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlNameReference);

        moTextNameReference.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel12.add(moTextNameReference);

        jpFormula.add(jPanel12);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnit.setText("Unidad:");
        jlUnit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlUnit);

        jtfUnit.setEditable(false);
        jtfUnit.setFocusable(false);
        jtfUnit.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel7.add(jtfUnit);

        jpFormula.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPresent.setText("Presentación:");
        jlPresent.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlPresent);

        jtfPresent.setEditable(false);
        jtfPresent.setFocusable(false);
        jtfPresent.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel8.add(jtfPresent);

        jpFormula.add(jPanel8);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Nombre:");
        jlName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlName);

        jtfName.setEditable(false);
        jtfName.setFocusable(false);
        jtfName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel13.add(jtfName);

        jpFormula.add(jPanel13);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantity.setText("Cantidad:*");
        jlQuantity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlQuantity);
        jPanel9.add(moCompQuantity);

        moBoolQuantityByVar1.setText("Cantidad por Variable 1");
        moBoolQuantityByVar1.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel9.add(moBoolQuantityByVar1);

        jpFormula.add(jPanel9);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDefaultVar1.setText("Variable 1 default:");
        jlDefaultVar1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlDefaultVar1);
        jPanel14.add(moCompDefaultVar1);

        jpFormula.add(jPanel14);

        jpContainer.add(jpFormula, java.awt.BorderLayout.NORTH);

        jpComps.setBorder(javax.swing.BorderFactory.createTitledBorder("Componentes:"));
        jpComps.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel3.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moKeyCompItemType.setToolTipText("Tipo componente");
        moKeyCompItemType.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel4.add(moKeyCompItemType);

        moBoolCompStandard.setText("Componente estándar");
        moBoolCompStandard.setPreferredSize(new java.awt.Dimension(220, 23));
        jPanel4.add(moBoolCompStandard);

        moBoolCompConsByVar1.setText("Consumo por Variable 1");
        moBoolCompConsByVar1.setPreferredSize(new java.awt.Dimension(205, 23));
        jPanel4.add(moBoolCompConsByVar1);

        jPanel3.add(jPanel4);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moKeyCompItem.setToolTipText("Componente");
        moKeyCompItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel11.add(moKeyCompItem);

        jlCompQuantity.setText("Cantidad:*");
        jlCompQuantity.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jlCompQuantity);
        jPanel11.add(moCompCompQuantity);

        jlCompStatisticsReference.setText("Ref. estadísticas:");
        jlCompStatisticsReference.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlCompStatisticsReference);
        jPanel11.add(moTextCompStatisticsReference);

        jbCompAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_add.gif"))); // NOI18N
        jbCompAdd.setToolTipText("Agregar");
        jbCompAdd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel11.add(jbCompAdd);

        jbCompClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_clear.gif"))); // NOI18N
        jbCompClear.setToolTipText("Limpiar");
        jbCompClear.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel11.add(jbCompClear);

        jPanel3.add(jPanel11);

        jpComps.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jbCompMoveUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_move_up.gif"))); // NOI18N
        jbCompMoveUp.setToolTipText("Mover arriba");
        jbCompMoveUp.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel2.add(jbCompMoveUp);

        jbCompMoveDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/lib/img/cmd_std_move_down.gif"))); // NOI18N
        jbCompMoveDown.setToolTipText("Mover abajo");
        jbCompMoveDown.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel2.add(jbCompMoveDown);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jpComps.add(jPanel1, java.awt.BorderLayout.EAST);

        jpContainer.add(jpComps, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCompAdd;
    private javax.swing.JButton jbCompClear;
    private javax.swing.JButton jbCompMoveDown;
    private javax.swing.JButton jbCompMoveUp;
    private javax.swing.JLabel jlCompQuantity;
    private javax.swing.JLabel jlCompStatisticsReference;
    private javax.swing.JLabel jlDefaultVar1;
    private javax.swing.JLabel jlFormulaType;
    private javax.swing.JLabel jlItemType;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlNameReference;
    private javax.swing.JLabel jlPresent;
    private javax.swing.JLabel jlQuantity;
    private javax.swing.JLabel jlReference;
    private javax.swing.JLabel jlReferenceType;
    private javax.swing.JLabel jlUnit;
    private javax.swing.JPanel jpComps;
    private javax.swing.JPanel jpContainer;
    private javax.swing.JPanel jpFormula;
    private javax.swing.JTextField jtfName;
    private javax.swing.JTextField jtfPresent;
    private javax.swing.JTextField jtfUnit;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolCompConsByVar1;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolCompStandard;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolQuantityByVar1;
    private sba.lib.gui.bean.DBeanCompoundField moCompCompQuantity;
    private sba.lib.gui.bean.DBeanCompoundField moCompDefaultVar1;
    private sba.lib.gui.bean.DBeanCompoundField moCompQuantity;
    private sba.lib.gui.bean.DBeanFieldKey moKeyCompItem;
    private sba.lib.gui.bean.DBeanFieldKey moKeyCompItemType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyFormulaType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyItemType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyReference;
    private sba.lib.gui.bean.DBeanFieldKey moKeyReferenceType;
    private sba.lib.gui.bean.DBeanFieldText moTextCompStatisticsReference;
    private sba.lib.gui.bean.DBeanFieldText moTextNameReference;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 960, 600);
        
        moKeyFormulaType.setKeySettings(miClient, DGuiUtils.getLabelName(jlFormulaType), true);
        moKeyItemType.setKeySettings(miClient, DGuiUtils.getLabelName(jlItemType), true);
        moKeyReferenceType.setKeySettings(miClient, DGuiUtils.getLabelName(jlReferenceType), true);
        moKeyReference.setKeySettings(miClient, DGuiUtils.getLabelName(jlReference), true);
        moTextNameReference.setTextSettings(DGuiUtils.getLabelName(jlNameReference), 50, 0);
        moCompQuantity.setCompoundFieldSettings(miClient);
        moCompQuantity.getField().setDecimalSettings(DGuiUtils.getLabelName(jlQuantity), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moBoolQuantityByVar1.setBooleanSettings(moBoolQuantityByVar1.getText(), false);
        moCompDefaultVar1.setCompoundFieldSettings(miClient);
        moCompDefaultVar1.getField().setDecimalSettings(DGuiUtils.getLabelName(jlDefaultVar1), DGuiConsts.GUI_TYPE_DEC_QTY, false);
        moKeyCompItemType.setKeySettings(miClient, moKeyCompItemType.getToolTipText(), false);
        moKeyCompItem.setKeySettings(miClient, moKeyCompItem.getToolTipText(), false);
        moBoolCompStandard.setBooleanSettings(moBoolCompStandard.getText(), false);
        moCompCompQuantity.setCompoundFieldSettings(miClient);
        moCompCompQuantity.getField().setDecimalSettings(DGuiUtils.getLabelName(jlCompQuantity), DGuiConsts.GUI_TYPE_DEC_QTY, false);
        moBoolCompConsByVar1.setBooleanSettings(moBoolCompConsByVar1.getText(), false);
        moTextCompStatisticsReference.setTextSettings(DGuiUtils.getLabelName(jlCompStatisticsReference.getText()), 25, 0);
        
        moFields.addField(moKeyFormulaType);
        moFields.addField(moKeyItemType);
        moFields.addField(moKeyReferenceType);
        moFields.addField(moKeyReference);
        moFields.addField(moTextNameReference);
        moFields.addField(moCompQuantity.getField());
        moFields.addField(moBoolQuantityByVar1);
        moFields.addField(moCompDefaultVar1.getField());
        moFields.addField(moKeyCompItemType);
        moFields.addField(moKeyCompItem);
        moFields.addField(moBoolCompStandard);
        moFields.addField(moCompCompQuantity.getField());
        moFields.addField(moBoolCompConsByVar1);
        moFields.addField(moTextCompStatisticsReference);
        
        moFields.setFormButton(jbCompAdd);
        
        moConfig = (DDbConfig) miClient.getSession().getConfigCompany();
        moKeyGroupRef = new DGuiFieldKeyGroup(miClient);
        moKeyGroupComp = new DGuiFieldKeyGroup(miClient);
/*XXX        
        moCompDefaultVar1.setCompoundText(moConfig.getVar1());
        
        moGridComps = new DGridPaneForm(miClient, mnFormType, DModConsts.MU_FRM_CMP, DGuiUtils.getLabelName(((TitledBorder) jpComps.getBorder()).getTitle())) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, true);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[8];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_INT_2B, "#");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CAT, DGridConsts.COL_TITLE_TYPE);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_L, DGridConsts.COL_TITLE_NAME);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_S, "Estándar");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cantidad");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_S, "Consumo " + ((DGuiClientApp) miClient).getVar1());
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT, "Ref estadísticas");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };
*/        
        jpComps.add(moGridComps, BorderLayout.CENTER);
        
        mvFormGrids.add(moGridComps);
    }
    
    private void computeName() throws Exception {
        DDbRegistry registry = null;
  /*XXX      
        if (moKeyReferenceType.getSelectedIndex() > 0) {
            switch (moKeyReferenceType.getValue()[0]) {
                case DModSysConsts.MS_REF_TP_FAM:
                    registry = (DDbFamily) miClient.getSession().readRegistry(DModConsts.CU_FAM, moKeyReference.getValue());
                    break;
                case DModSysConsts.MS_REF_TP_GRP:
                    registry = (DDbItemGroup) miClient.getSession().readRegistry(DModConsts.CU_GRP, moKeyReference.getValue());
                    break;
                case DModSysConsts.MS_REF_TP_ITM:
                    registry = (DDbItem) miClient.getSession().readRegistry(DModConsts.CU_ITM, moKeyReference.getValue());
                    break;
                default:
                    throw new Exception(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
            }
        }
  
        jtfName.setText(DDbFormula.computeName(miClient.getSession(),
                registry == null ? "" : registry.getName(),
                moTextNameReference.getValue()));
*/
    }
    
    private void updateCompsNumbers() {
        int number = 0;
        
        for (DGridRow row : moGridComps.getModel().getGridRows()) {
            ((DDbFormulaComp) row).setPkCompId(++number);
        }
        
        moGridComps.renderGridRows();
    }
    
    private void clearComp() {
        moKeyCompItemType.resetField();
        //moKeyCmpComp.resetField();    // already reset by key group
        moBoolCompStandard.setValue(moKeyFormulaType.getSelectedIndex() > 0 && moKeyFormulaType.getValue()[0] == DModSysConsts.MS_FRM_TP_STD);
        moCompCompQuantity.getField().resetField();
        moBoolCompConsByVar1.resetField();
        moTextCompStatisticsReference.resetField();
        
        itemStateChangedCompStandard();
    }
    
    private DGuiValidation validateComp() {
        DGuiValidation validation = new DGuiValidation();
        
        if (moKeyCompItemType.getSelectedIndex() <= 0) {
            validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ + " '" + moKeyCompItemType.getToolTipText() + "'.");
            validation.setComponent(moKeyCompItemType);
        }
        else if (moKeyCompItem.getSelectedIndex() <= 0) {
            validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ + " '" + moKeyCompItem.getToolTipText() + "'.");
            validation.setComponent(moKeyCompItem);
        }
        else if (moBoolCompStandard.isSelected() && moCompCompQuantity.getField().getValue() <= 0) {
            validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ + " '" + DGuiUtils.getLabelName(jlCompQuantity) + "'.");
            validation.setComponent(moCompCompQuantity.getField().getComponent());
        }
        
        return validation;
    }
    
    private void actionPerformedCompAdd() {
        int[] itemTypeKey = null;
        DGuiValidation validation = validateComp();
        DDbFormulaComp comp = null;
        
        if (!validation.isValid()) {
            miClient.showMsgBoxWarning(validation.getMessage());
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
        }
        else {
            comp = new DDbFormulaComp();
            
            //component.setPkFormulaId(...);
            comp.setPkCompId(moGridComps.getTable().getRowCount() + 1);
            comp.setQuantity(moCompCompQuantity.getField().getValue());
            comp.setStatisticsReference(moTextCompStatisticsReference.getValue());
            comp.setStandard(moBoolCompStandard.getValue());
            comp.setConsByVar1(moBoolCompConsByVar1.getValue());
            //component.setFkItemTypeId(...);
            comp.setFkItemId(moKeyCompItem.getValue()[0]);
            //component.setFkUnitId(...);
            
            comp.updateSnapshotData(miClient.getSession());
            comp.readXtaData(miClient.getSession());
            
            moGridComps.addGridRow(comp);
            moGridComps.renderGridRows();
            moGridComps.setSelectedGridRow(moGridComps.getTable().getRowCount() - 1);
            
            itemTypeKey = moKeyCompItemType.getValue();
            actionPerformedCompClear();
            moKeyCompItemType.setValue(itemTypeKey);
        }
    }
    
    private void actionPerformedCompClear() {
        clearComp();
        moKeyCompItemType.requestFocus();
    }
    
    private void actionPerformedCompMoveUp() {
        int index = -1;
        DGridRow row = null;
        
        if (moGridComps.getTable().getSelectedRowCount() != 1) {
            miClient.showMsgBoxInformation(DGridConsts.MSG_SELECT_ROW);
        }
        else if ((index = moGridComps.getTable().getSelectedRow()) > 0) {
            row = moGridComps.getModel().getGridRows().remove(index);
            moGridComps.getModel().getGridRows().add(index - 1, row);
            updateCompsNumbers();
            moGridComps.renderGridRows();
            moGridComps.setSelectedGridRow(index - 1);
        }
    }
    
    private void actionPerformedCompMoveDown() {
        int index = -1;
        DGridRow row = null;
        
        if (moGridComps.getTable().getSelectedRowCount() != 1) {
            miClient.showMsgBoxInformation(DGridConsts.MSG_SELECT_ROW);
        }
        else if ((index = moGridComps.getTable().getSelectedRow()) < moGridComps.getTable().getRowCount() - 1) {
            row = moGridComps.getModel().getGridRows().remove(index);
            moGridComps.getModel().getGridRows().add(index + 1, row);
            updateCompsNumbers();
            moGridComps.renderGridRows();
            moGridComps.setSelectedGridRow(index + 1);
        }
    }
    
    private void updateFieldsItemTypeSettings() {
        moBoolCompConsByVar1.setSelected(false);
        moBoolCompConsByVar1.setEnabled(false);
/*XXX
        if (moKeyItemType.getSelectedIndex() > 0) {
            moBoolCompConsByVar1.setEnabled(moConfig.isVar1() && moKeyItemType.getSelectedItem().getPrimaryKey()[0] == DModSysConsts.CS_ITM_TP_PB);
        }
*/
    }
    
    private void displayItemSettings() {
        DDbItem item = null;
        
        if (moKeyReference.getSelectedIndex() <= 0) {
            jtfUnit.setText("");
            jtfPresent.setText("");
            moCompQuantity.setCompoundText("");
        }
        else {
            item = (DDbItem) miClient.getSession().readRegistry(DModConsts.CU_ITM, new int[] { moKeyReference.getValue()[0] });
            
            jtfUnit.setText(item.getXtaUnitName());
            jtfPresent.setText(item.getXtaPresentName());
            moCompQuantity.setCompoundText(item.getXtaUnitCode());
        }
    }
    
    private void displayCompItemSettings() {
        DDbItem item = null;
        
        if (moKeyCompItem.getSelectedIndex() <= 0) {
            moCompCompQuantity.setCompoundText("");
        }
        else {
            item = (DDbItem) miClient.getSession().readRegistry(DModConsts.CU_ITM, new int[] { moKeyCompItem.getValue()[0] });
            
            moCompCompQuantity.setCompoundText((String) miClient.getSession().readField(DModConsts.CU_UOM, new int[] { item.getFkUnitId() }, DDbRegistry.FIELD_CODE));
        }
    }
    
    private void itemStateChangedFormulaType() {
        if (moKeyFormulaType.getSelectedIndex() <= 0) {
            moCompQuantity.setEditable(false);
            moCompQuantity.getField().setValue(0d);
            
            moBoolQuantityByVar1.setEnabled(false);
            moBoolQuantityByVar1.setValue(false);
        }
        else {
            if (moKeyFormulaType.getValue()[0] == DModSysConsts.MS_FRM_TP_STD) {
                moCompQuantity.setEditable(true);
            
                moBoolQuantityByVar1.setEnabled(false);
                moBoolQuantityByVar1.setValue(false);
            }
            else {
                moCompQuantity.setEditable(false);
                moCompQuantity.getField().setValue(0d);
/*XXX                
                moBoolQuantityByVar1.setEnabled(moConfig.isVar1());
*/
            }
        }
        
        itemStateChangedQuantityByVar1();
        clearComp();
    }
    
    private void itemStateChangedItemType() {
        updateFieldsItemTypeSettings();
    }
    
    private void itemStateChangedItem() {
        displayItemSettings();
        //computeName();    XXX
    }
    
    private void itemStateChangedCompItem() {
        displayCompItemSettings();
    }
    
    private void itemStateChangedQuantityByVar1() {
        if (moBoolQuantityByVar1.isSelected()) {
            moCompDefaultVar1.setEditable(true);
        }
        else {
            moCompDefaultVar1.setEditable(false);
            moCompDefaultVar1.getField().setValue(0d);
        }
    }
    
    private void itemStateChangedCompStandard() {
        if (moBoolCompStandard.isSelected()) {
            moCompCompQuantity.setEditable(true);
        }
        else {
            moCompCompQuantity.setEditable(false);
            moCompCompQuantity.getField().setValue(0d);
        }
    }
    
    private void focusLostNameReference() {
        //computeName();    XXX
    }
    
    /*
     * Public methods
     */
    
    /*
     * Overriden methods
     */
    
    @Override
    public void addAllListeners() {
        moKeyFormulaType.addItemListener(this);
        moKeyItemType.addItemListener(this);
        moKeyReference.addItemListener(this);
        moKeyCompItem.addItemListener(this);
        moBoolQuantityByVar1.addItemListener(this);
        moBoolCompStandard.addItemListener(this);
        moTextNameReference.addFocusListener(this);
        jbCompClear.addActionListener(this);
        jbCompAdd.addActionListener(this);
        jbCompMoveUp.addActionListener(this);
        jbCompMoveDown.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        moKeyFormulaType.removeItemListener(this);
        moKeyItemType.removeItemListener(this);
        moKeyReference.removeItemListener(this);
        moKeyCompItem.removeItemListener(this);
        moBoolQuantityByVar1.removeItemListener(this);
        moBoolCompStandard.removeItemListener(this);
        moTextNameReference.removeFocusListener(this);
        jbCompClear.removeActionListener(this);
        jbCompAdd.removeActionListener(this);
        jbCompMoveUp.removeActionListener(this);
        jbCompMoveDown.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyFormulaType, DModConsts.MS_FRM_TP, DLibConsts.UNDEFINED, null);
        
        moKeyGroupRef.initGroup();
        moKeyGroupRef.addFieldKey(moKeyItemType, DModConsts.CX_ITM_TP_PRO, DLibConsts.UNDEFINED, null);
        moKeyGroupRef.addFieldKey(moKeyReference, DModConsts.CX_ITM_BY_ITM_TP, DLibConsts.UNDEFINED, null);
        moKeyGroupRef.populateCatalogues();
        
        moKeyGroupComp.initGroup();
        moKeyGroupComp.addFieldKey(moKeyCompItemType, DModConsts.CX_ITM_TP_CMP, DLibConsts.UNDEFINED, null);
        moKeyGroupComp.addFieldKey(moKeyCompItem, DModConsts.CX_ITM_BY_ITM_TP, DLibConsts.UNDEFINED, null);
        moKeyGroupComp.populateCatalogues();
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        Vector<DGridRow> comps = new Vector<>();
        
        moRegistry = (DDbFormula) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(DLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeyFormulaType.setValue(new int[] { moRegistry.getFkFormulaTypeId() });
        moKeyItemType.setValue(new int[] { moRegistry.getFkItemTypeId()});
        //moKeyReference.setValue(new int[] { moRegistry.getFkItemId()});   XXX
        moTextNameReference.setValue(moRegistry.getNameReference());
        moCompQuantity.getField().setValue(moRegistry.getQuantity());
/*XXX
        moCompDefaultVar1.getField().setValue(!moConfig.isVar1() ? 0d : moRegistry.getDefaultVar1());
        moBoolQuantityByVar1.setValue(!moConfig.isVar1() ? false : moRegistry.isQuantityByVar1());

        displayItemSettings();
        computeName();
        
        for (DDbFormulaComp comp : moRegistry.getChildComps()) {
            if (!moConfig.isVar1()) {
                comp.setConsByVar1(false);
            }
            comps.add(comp);
        }
*/        
        moGridComps.populateGrid(comps);
        
        setFormEditable(true);
        
        updateFieldsItemTypeSettings();
        itemStateChangedFormulaType();
        //itemStateChangedQuantityByVar1(...);      // already called in itemStateChangedFormulaType()
        
        clearComp();
        //itemStateChangedCompStandard(...);        // already called in clearComp()

        if (moRegistry.isRegistryNew()) {
            moKeyReference.setEnabled(moKeyReference.getSelectedIndex() > 0);
        }

        moKeyCompItem.setEnabled(false);
        
        addAllListeners();
    }

    @Override
    public DDbFormula getRegistry() throws Exception {
        DDbFormula registry = moRegistry.clone();

        if (registry.isRegistryNew()) { }

        //registry.setCode(...);
        //registry.setName(...);
        registry.setNameReference(moTextNameReference.getValue());
        registry.setDefaultVar1(moCompDefaultVar1.getField().getValue());
        registry.setQuantity(moCompQuantity.getField().getValue());
        registry.setQuantityByVar1(moBoolQuantityByVar1.getValue());
        registry.setFkFormulaTypeId(moKeyFormulaType.getValue()[0]);
        //registry.setFkItemTypeId(...);
//        registry.setFkItemId(moKeyReference.getValue()[0]);   XXX
        //registry.setFkUnitId(...);
        //registry.setFkPresentId(...);
        
        registry.getChildComps().clear();
        for (DGridRow row : moGridComps.getModel().getGridRows()) {
            registry.getChildComps().add((DDbFormulaComp) row);
        }

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        return moFields.validateFields();
    }

    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, DGridRow gridRow) {
/*XXX
        switch (gridType) {
            case DModConsts.MU_FRM_CMP:
                updateCompsNumbers();
                break;
            default:
        }
*/
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbCompClear) {
                actionPerformedCompClear();
            }
            else if (button == jbCompAdd) {
                actionPerformedCompAdd();
            }
            else if (button == jbCompMoveUp) {
                actionPerformedCompMoveUp();
            }
            else if (button == jbCompMoveDown) {
                actionPerformedCompMoveDown();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldKey) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldKey field = (DBeanFieldKey) e.getSource();
                
                if (field == moKeyFormulaType) {
                    itemStateChangedFormulaType();
                }
                else if (field == moKeyItemType) {
                    itemStateChangedItemType();
                }
                else if (field == moKeyReference) {
                    itemStateChangedItem();
                }
                else if (field == moKeyCompItem) {
                    itemStateChangedCompItem();
                }
            }
        }
        else if (e.getSource() instanceof DBeanFieldBoolean) {
            DBeanFieldBoolean field = (DBeanFieldBoolean) e.getSource();
            
            if (field == moBoolQuantityByVar1) {
                itemStateChangedQuantityByVar1();
            }
            else if (field == moBoolCompStandard) {
                itemStateChangedCompStandard();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof DBeanFieldText) {
            DBeanFieldText field = (DBeanFieldText) e.getSource();
            
            if (field == moTextNameReference) {
                focusLostNameReference();
            }
        }
    }
}
