/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package ft.mod.cfg.form;

import ft.mod.DModConsts;
import ft.mod.cfg.db.DDbUnit;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanForm;

/**
 *
 * @author Sergio Flores
 */
public class DFormUnit extends DBeanForm implements ItemListener {

    private DDbUnit moRegistry;

    /** Creates new form DFormUnit */
    public DFormUnit(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.CU_UOM, DLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContainer = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jlUnitType = new javax.swing.JLabel();
        moKeyUnitType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel3 = new javax.swing.JPanel();
        jlCode = new javax.swing.JLabel();
        moTextCode = new sba.lib.gui.bean.DBeanFieldText();
        jPanel4 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sba.lib.gui.bean.DBeanFieldText();
        jPanel7 = new javax.swing.JPanel();
        jlSortingPos = new javax.swing.JLabel();
        moIntSortingPos = new sba.lib.gui.bean.DBeanFieldInteger();
        jPanel6 = new javax.swing.JPanel();
        jlConversionFactor = new javax.swing.JLabel();
        moCompConversionFactor = new sba.lib.gui.bean.DBeanCompoundField();

        jpContainer.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpContainer.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnitType.setText("Tipo unidad:*");
        jlUnitType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlUnitType);

        moKeyUnitType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel5.add(moKeyUnitType);

        jPanel1.add(jPanel5);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCode.setForeground(new java.awt.Color(0, 102, 102));
        jlCode.setText("C칩digo:*");
        jlCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlCode);

        moTextCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel3.add(moTextCode);

        jPanel1.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Nombre:*");
        jlName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlName);

        moTextName.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel4.add(moTextName);

        jPanel1.add(jPanel4);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSortingPos.setText("Posici칩n cat치logo:");
        jlSortingPos.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlSortingPos);

        moIntSortingPos.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel7.add(moIntSortingPos);

        jPanel1.add(jPanel7);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlConversionFactor.setText("Factor conversi칩n:*");
        jlConversionFactor.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlConversionFactor);
        jPanel6.add(moCompConversionFactor);

        jPanel1.add(jPanel6);

        jpContainer.add(jPanel1, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JLabel jlCode;
    private javax.swing.JLabel jlConversionFactor;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlSortingPos;
    private javax.swing.JLabel jlUnitType;
    private javax.swing.JPanel jpContainer;
    private sba.lib.gui.bean.DBeanCompoundField moCompConversionFactor;
    private sba.lib.gui.bean.DBeanFieldInteger moIntSortingPos;
    private sba.lib.gui.bean.DBeanFieldKey moKeyUnitType;
    private sba.lib.gui.bean.DBeanFieldText moTextCode;
    private sba.lib.gui.bean.DBeanFieldText moTextName;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 400, 250);
        
        moKeyUnitType.setKeySettings(miClient, DGuiUtils.getLabelName(jlUnitType), true);
        moTextCode.setTextSettings(DGuiUtils.getLabelName(jlCode), 10);
        moTextCode.setTextCaseType(DLibConsts.UNDEFINED);
        moTextName.setTextSettings(DGuiUtils.getLabelName(jlName), 50);
        moIntSortingPos.setIntegerSettings(DGuiUtils.getLabelName(jlSortingPos), DGuiConsts.GUI_TYPE_INT_RAW, false);
        moCompConversionFactor.setCompoundFieldSettings(miClient);
        moCompConversionFactor.getField().setDecimalSettings(DGuiUtils.getLabelName(jlConversionFactor), DGuiConsts.GUI_TYPE_DEC_AMT_UNIT, true);
        
        moFields.addField(moKeyUnitType);
        moFields.addField(moTextCode);
        moFields.addField(moTextName);
        moFields.addField(moIntSortingPos);
        moFields.addField(moCompConversionFactor.getField());
        
        moFields.setFormButton(jbSave);
    }
    
    private void displayUnitTypeCode() {
        moCompConversionFactor.setCompoundText(moKeyUnitType.getSelectedIndex() <= 0 ? "" : (String) moKeyUnitType.getSelectedItem().getComplement());
    }
    
    private void itemStateChangeUnitType() {
        displayUnitTypeCode();
    }
    
    /*
     * Public methods
     */
    
    /*
     * Overriden methods
     */
    
    @Override
    public void addAllListeners() {
        moKeyUnitType.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        moKeyUnitType.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyUnitType, DModConsts.CS_UOM_TP, DLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        moRegistry = (DDbUnit) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.setCode("");
            moRegistry.initPrimaryKey();
            
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(DLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeyUnitType.setValue(new int[] { moRegistry.getFkUnitTypeId() });
        moTextCode.setValue(moRegistry.getCode());
        moTextName.setValue(moRegistry.getName());
        moIntSortingPos.setValue(moRegistry.getSortingPos());
        moCompConversionFactor.getField().setValue(moRegistry.getConversionFactor());
        
        displayUnitTypeCode();
        
        setFormEditable(true);

        //moTextCode.setEnabled(false);
        
        if (moRegistry.isRegistryNew()) {
            
        }
        else {
            
        }
        
        addAllListeners();
    }

    @Override
    public DDbUnit getRegistry() throws Exception {
        DDbUnit registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            //registry.setPkUnitId(...);
        }

        registry.setCode(moTextCode.getValue());
        registry.setName(moTextName.getValue());
        registry.setSortingPos(moIntSortingPos.getValue());
        registry.setConversionFactor(moCompConversionFactor.getField().getValue());
        //registry.setDeleted(...);
        //registry.setSystem(...);
        registry.setFkUnitTypeId(moKeyUnitType.getValue()[0]);

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        return moFields.validateFields();
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldKey) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldKey field = (DBeanFieldKey) e.getSource();
                
                if (field == moKeyUnitType) {
                    itemStateChangeUnitType();
                }
            }
        }
    }
}
