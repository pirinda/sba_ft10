/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFormItem.java
 *
 * Created on 29/08/2011, 08:02:13 PM
 */

package ft.mod.cfg.form;

import ft.gui.DGuiClientApp;
import ft.mod.DModConsts;
import ft.mod.DModSysConsts;
import ft.mod.cfg.db.DDbItem;
import ft.mod.cfg.db.DDbItemFamily;
import ft.mod.cfg.db.DDbPresent;
import ft.mod.cfg.db.DDbUnit;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiParams;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanFieldText;
import sba.lib.gui.bean.DBeanForm;

/**
 *
 * @author Sergio Flores
 */
public class DFormItem extends DBeanForm implements ItemListener, FocusListener {

    private DDbItem moRegistry;
    private DDbItemFamily moItemFamily;
    private DDbUnit moUnitItem;
    private DDbUnit moUnitPresent;
    private DDbPresent moPresent;
    private boolean mbApplyPresent;
    private boolean mbApplyMassUnit;
    private boolean mbApplyItemBase;

    /** Creates new form DFormItem */
    public DFormItem(DGuiClient client, int itemTypeId, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.CU_ITM, itemTypeId, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContainer = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlItemFamily = new javax.swing.JLabel();
        moKeyItemFamily = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel10 = new javax.swing.JPanel();
        jlItemBase = new javax.swing.JLabel();
        moKeyItemBase = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel3 = new javax.swing.JPanel();
        jlCode = new javax.swing.JLabel();
        moTextCode = new sba.lib.gui.bean.DBeanFieldText();
        jPanel4 = new javax.swing.JPanel();
        jlNameRaw = new javax.swing.JLabel();
        moTextNameRaw = new sba.lib.gui.bean.DBeanFieldText();
        jPanel5 = new javax.swing.JPanel();
        jlUnit = new javax.swing.JLabel();
        moKeyUnit = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel9 = new javax.swing.JPanel();
        jlPresent = new javax.swing.JLabel();
        moKeyPresent = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel6 = new javax.swing.JPanel();
        jlMassUnit = new javax.swing.JLabel();
        moCompMassUnit = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel8 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        jtfName = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jlLotCode = new javax.swing.JLabel();
        moTextLotCode = new sba.lib.gui.bean.DBeanFieldText();

        jpContainer.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpContainer.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(9, 1, 0, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemFamily.setText("Familia ítem:*");
        jlItemFamily.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlItemFamily);

        moKeyItemFamily.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel7.add(moKeyItemFamily);

        jPanel1.add(jPanel7);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemBase.setText("Producto base:*");
        jlItemBase.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlItemBase);

        moKeyItemBase.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel10.add(moKeyItemBase);

        jPanel1.add(jPanel10);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCode.setText("Código:*");
        jlCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlCode);
        jPanel3.add(moTextCode);

        jPanel1.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNameRaw.setText("Nombre simple:*");
        jlNameRaw.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlNameRaw);

        moTextNameRaw.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel4.add(moTextNameRaw);

        jPanel1.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnit.setText("Unidad:*");
        jlUnit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlUnit);

        moKeyUnit.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel5.add(moKeyUnit);

        jPanel1.add(jPanel5);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPresent.setText("Presentación:*");
        jlPresent.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlPresent);

        moKeyPresent.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel9.add(moKeyPresent);

        jPanel1.add(jPanel9);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMassUnit.setText("Masa unidad:*");
        jlMassUnit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlMassUnit);
        jPanel6.add(moCompMassUnit);

        jPanel1.add(jPanel6);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Nombre:");
        jlName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlName);

        jtfName.setEditable(false);
        jtfName.setFocusable(false);
        jtfName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel8.add(jtfName);

        jPanel1.add(jPanel8);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLotCode.setText("Código para lote:");
        jlLotCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlLotCode);

        moTextLotCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel11.add(moTextLotCode);

        jPanel1.add(jPanel11);

        jpContainer.add(jPanel1, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlCode;
    private javax.swing.JLabel jlItemBase;
    private javax.swing.JLabel jlItemFamily;
    private javax.swing.JLabel jlLotCode;
    private javax.swing.JLabel jlMassUnit;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlNameRaw;
    private javax.swing.JLabel jlPresent;
    private javax.swing.JLabel jlUnit;
    private javax.swing.JPanel jpContainer;
    private javax.swing.JTextField jtfName;
    private sba.lib.gui.bean.DBeanCompoundField moCompMassUnit;
    private sba.lib.gui.bean.DBeanFieldKey moKeyItemBase;
    private sba.lib.gui.bean.DBeanFieldKey moKeyItemFamily;
    private sba.lib.gui.bean.DBeanFieldKey moKeyPresent;
    private sba.lib.gui.bean.DBeanFieldKey moKeyUnit;
    private sba.lib.gui.bean.DBeanFieldText moTextCode;
    private sba.lib.gui.bean.DBeanFieldText moTextLotCode;
    private sba.lib.gui.bean.DBeanFieldText moTextNameRaw;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */
    
    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 560, 350);
        
        mbApplyPresent = false;
        mbApplyMassUnit = false;
        mbApplyItemBase = false;
        jlItemBase.setEnabled(false);
        moKeyItemBase.setEnabled(false);
        
        switch (mnFormSubtype) {
            case DModSysConsts.CS_ITM_TP_RMI:
                mbApplyMassUnit = true;
                break;
            case DModSysConsts.CS_ITM_TP_RMP:
                break;
            case DModSysConsts.CS_ITM_TP_MI:
                break;
            case DModSysConsts.CS_ITM_TP_PB:
                mbApplyMassUnit = true;
                break;
            case DModSysConsts.CS_ITM_TP_PF:
                mbApplyPresent = true;
                mbApplyMassUnit = true;
                mbApplyItemBase = true;
                jlItemBase.setEnabled(true);
                moKeyItemBase.setEnabled(true);
                break;
            case DModSysConsts.CS_ITM_TP_EM:
                break;
            case DModSysConsts.CS_ITM_TP_EO:
                break;
        }
        
        moKeyItemFamily.setKeySettings(miClient, DGuiUtils.getLabelName(jlItemFamily), true);
        moKeyItemBase.setKeySettings(miClient, DGuiUtils.getLabelName(jlItemBase), true);
        moTextCode.setTextSettings(DGuiUtils.getLabelName(jlCode), 25);
        moTextNameRaw.setTextSettings(DGuiUtils.getLabelName(jlNameRaw), 50);
        moKeyUnit.setKeySettings(miClient, DGuiUtils.getLabelName(jlUnit), true);
        moKeyPresent.setKeySettings(miClient, DGuiUtils.getLabelName(jlPresent), true);
        moCompMassUnit.setCompoundFieldSettings(miClient);
        moCompMassUnit.getField().setDecimalSettings(DGuiUtils.getLabelName(jlMassUnit), DGuiConsts.GUI_TYPE_DEC_AMT_UNIT, true);
        moTextLotCode.setTextSettings(DGuiUtils.getLabelName(jlLotCode), 5, 0);
        
        moFields.addField(moKeyItemFamily);
        moFields.addField(moKeyItemBase);
        moFields.addField(moTextCode);
        moFields.addField(moTextNameRaw);
        moFields.addField(moKeyUnit);
        moFields.addField(moKeyPresent);
        moFields.addField(moCompMassUnit.getField());
        moFields.addField(moTextLotCode);
        
        moFields.setFormButton(jbSave);
        
        moCompMassUnit.setCompoundText(((DGuiClientApp) miClient).getMassCode());
    }
    
    private void computeName() {
        jtfName.setText(DDbItem.computeName(
                miClient.getSession(),
                moTextNameRaw.getValue(),
                moKeyPresent.getSelectedIndex() <= 0 ? DLibConsts.UNDEFINED : moKeyPresent.getValue()[0],
                moKeyPresent.getSelectedIndex() <= 0 ? "" : (String) miClient.getSession().readField(DModConsts.CU_PRS, moKeyPresent.getValue(), DDbRegistry.FIELD_NAME),
                moKeyUnit.getSelectedIndex() <= 0 ? "" : (String) moKeyUnit.getSelectedItem().getComplement()));
    }
    
    private boolean isUnitItemMass() {
        return moUnitItem != null && moUnitItem.isXtaMass();
    }
    
    private boolean isUnitPresentMass() {
        return moUnitPresent != null && moUnitPresent.isXtaMass();
    }
    
    private void updateFieldItemBase() {
        if (moKeyItemFamily.getSelectedIndex() <= 0) {
            moKeyItemBase.setEnabled(false);
        }
        else {
            moKeyItemBase.setEnabled(mbApplyItemBase);
        }
    }
    
    private void itemStateChangeItemFamily() {
        moItemFamily = null;
        
        if (moKeyItemFamily.getSelectedIndex() <= 0) {
            moKeyItemBase.removeAllItems();
        }
        else {
            if (mbApplyItemBase) {
                moItemFamily = (DDbItemFamily) miClient.getSession().readRegistry(DModConsts.CU_FAM, moKeyItemFamily.getValue());
                miClient.getSession().populateCatalogue(moKeyItemBase, DModConsts.CU_ITM, DLibConsts.UNDEFINED, new DGuiParams(new int[] { moItemFamily.getFkItemFamilyId_n() }));
            }
        }
        
        updateFieldItemBase();
    }
    
    private void itemStateChangeUnit() {
        if (moKeyUnit.getSelectedIndex() <= 0) {
            moUnitItem = null;
        }
        else {
            moUnitItem = (DDbUnit) miClient.getSession().readRegistry(DModConsts.CU_UNT, moKeyUnit.getValue());
        }
        
        if (isUnitItemMass()) {
            moCompMassUnit.setEditable(false);
            moCompMassUnit.getField().setValue(moUnitItem.getBaseEquivalence());
        }
        else {
            itemStateChangePresent();
        }
    }
    
    private void itemStateChangePresent() {
        if (isUnitItemMass()) {
            moPresent = null;
            moUnitPresent = null;
        }
        else {
            if (moKeyPresent.getSelectedIndex() <= 0) {
                moPresent = null;
                moUnitPresent = null;
            }
            else {
                moPresent = (DDbPresent) miClient.getSession().readRegistry(DModConsts.CU_PRS, moKeyPresent.getValue());
                moUnitPresent = (DDbUnit) miClient.getSession().readRegistry(DModConsts.CU_UNT, new int[] { moPresent.getFkUnitId() });
            }
            
            if (isUnitPresentMass()) {
                moCompMassUnit.setEditable(false);
                moCompMassUnit.getField().setValue(moUnitPresent.getBaseEquivalence() * moPresent.getContentUnit());
            }
            else {
                if (mbApplyMassUnit) {
                    moCompMassUnit.setEditable(true);
                }
                else {
                    moCompMassUnit.setEditable(false);
                    moCompMassUnit.getField().setValue(0d);
                }
            }
        }
    }
    
    /*
     * Public methods
     */
    
    /*
     * Overriden methods
     */
    
    @Override
    public void addAllListeners() {
        moTextNameRaw.addFocusListener(this);
        moKeyItemFamily.addItemListener(this);
        moKeyUnit.addItemListener(this);
        moKeyPresent.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        moTextNameRaw.removeFocusListener(this);
        moKeyItemFamily.removeItemListener(this);
        moKeyUnit.removeItemListener(this);
        moKeyPresent.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyItemFamily, DModConsts.CU_FAM, mnFormSubtype, null);
        miClient.getSession().populateCatalogue(moKeyUnit, DModConsts.CU_UNT, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyPresent, DModConsts.CU_PRS, DLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        moRegistry = (DDbItem) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.setCode("");
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
            
            if (mnFormSubtype != DModSysConsts.CS_ITM_TP_PF) {
                moRegistry.setFkPresentId(DModSysConsts.CU_PRS_NA);
            }
        }
        else {
            jtfRegistryKey.setText(DLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeyItemFamily.setValue(new int[] { moRegistry.getFkItemFamilyId() });
        itemStateChangeItemFamily();
        moKeyItemBase.setValue(new int[] { moRegistry.getFkItemId_n() });
        moTextCode.setValue(moRegistry.getCode());
        moTextNameRaw.setValue(moRegistry.getNameRaw());
        moKeyUnit.setValue(new int[] { moRegistry.getFkUnitId()});
        moKeyPresent.setValue(new int[] { moRegistry.getFkPresentId()});
        moCompMassUnit.getField().setValue(moRegistry.getMassUnit());
        moTextLotCode.setValue(moRegistry.getLotCode());
        
        computeName();

        setFormEditable(true);
        moTextCode.setEnabled(false);
        updateFieldItemBase();
        
        itemStateChangeUnit();
        //itemStateChangePresent(); // already called, if needed, in itemStateChangeUnit()
        
        jlPresent.setEnabled(mbApplyPresent);
        moKeyPresent.setEnabled(mbApplyPresent);

        addAllListeners();
    }

    @Override
    public DDbItem getRegistry() throws Exception {
        DDbItem registry = moRegistry.clone();

        if (registry.isRegistryNew()) { }

        registry.setCode(moTextCode.getValue());
        //registry.setName(...);
        registry.setNameRaw(moTextNameRaw.getValue());
        registry.setLotCode(moTextLotCode.getValue());
        registry.setMassUnit(moCompMassUnit.getField().getValue());
        registry.setFkItemFamilyId(moKeyItemFamily.getValue()[0]);
        registry.setFkUnitId(moKeyUnit.getValue()[0]);
        registry.setFkPresentId(moKeyPresent.getValue()[0]);
        registry.setFkItemId_n(!moKeyItemBase.isEnabled() ? DLibConsts.UNDEFINED : moKeyItemBase.getValue()[0]);

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        return moFields.validateFields();
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldKey) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldKey field = (DBeanFieldKey) e.getSource();
                
                if (field == moKeyItemFamily) {
                    itemStateChangeItemFamily();
                }
                else if (field == moKeyUnit) {
                    computeName();
                    itemStateChangeUnit();
                }
                else if (field == moKeyPresent) {
                    computeName();
                    itemStateChangePresent();
                }
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof DBeanFieldText) {
            DBeanFieldText field = (DBeanFieldText) e.getSource();
            
            if (field == moTextNameRaw) {
                computeName();
            }
        }
    }
}
